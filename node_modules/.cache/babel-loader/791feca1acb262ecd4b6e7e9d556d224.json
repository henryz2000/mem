{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.memClientBatchCreateMems = void 0;\n\nvar types_1 = require(\"../../api/__codegen__/types\");\n\nvar memClientBatchCreateMems = function memClientBatchCreateMems(_ref) {\n  var memClient = _ref.memClient;\n  return (\n    /**\n     * Creates a new mem for each set of inputs, then returns the some details about the created mems.\n     */\n    function (batchArgs) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var inputs, result, batchMemsData;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                inputs = batchArgs.map(function (_ref2) {\n                  var memId = _ref2.memId,\n                      content = _ref2.content,\n                      isRead = _ref2.isRead,\n                      isArchived = _ref2.isArchived,\n                      scheduledFor = _ref2.scheduledFor,\n                      createdAt = _ref2.createdAt;\n                  var input = {\n                    memId: memId !== null && memId !== void 0 ? memId : null,\n                    content: content,\n                    format: null,\n                    isRead: isRead !== null && isRead !== void 0 ? isRead : null,\n                    isArchived: isArchived !== null && isArchived !== void 0 ? isArchived : null,\n                    scheduledFor: scheduledFor !== null && scheduledFor !== void 0 ? scheduledFor : null,\n                    createdAt: createdAt !== null && createdAt !== void 0 ? createdAt : null,\n                    richTextDocument: null,\n                    source: null,\n                    clientId: null\n                  };\n                  return input;\n                });\n                _context.next = 3;\n                return memClient.graphqlRequest(types_1.BatchCreateMemsDocument, {\n                  inputs: inputs\n                });\n\n              case 3:\n                result = _context.sent;\n                batchMemsData = result.batchCreateMems.map(function (data) {\n                  return data.mem;\n                });\n                return _context.abrupt(\"return\", batchMemsData);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  );\n};\n\nexports.memClientBatchCreateMems = memClientBatchCreateMems;","map":{"version":3,"sources":["../../../src/mem-client/methods/batchCreateMems.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAOO,IAAM,wBAAwB,GACnC,SADW,wBACX;AAAA,MAAG,SAAH,QAAG,SAAH;AAAA;AACA;;AAEG;AACH,cAAO,SAAP;AAAA,aAAkD,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1C,gBAAA,MAD0C,GACjC,SAAS,CAAC,GAAV,CACb,iBAAoE;AAAA,sBAAjE,KAAiE,SAAjE,KAAiE;AAAA,sBAA1D,OAA0D,SAA1D,OAA0D;AAAA,sBAAjD,MAAiD,SAAjD,MAAiD;AAAA,sBAAzC,UAAyC,SAAzC,UAAyC;AAAA,sBAA7B,YAA6B,SAA7B,YAA6B;AAAA,sBAAf,SAAe,SAAf,SAAe;AAClE,sBAAM,KAAK,GAAG;AACZ,oBAAA,KAAK,EAAE,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAA,KAAA,GAAS,IADJ;AAEZ,oBAAA,OAAO,EAAP,OAFY;AAGZ,oBAAA,MAAM,EAAE,IAHI;AAIZ,oBAAA,MAAM,EAAE,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GAAU,IAJN;AAKZ,oBAAA,UAAU,EAAE,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAA,UAAA,GAAc,IALd;AAMZ,oBAAA,YAAY,EAAE,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAA,YAAA,GAAgB,IANlB;AAOZ,oBAAA,SAAS,EAAE,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAA,SAAA,GAAa,IAPZ;AAQZ,oBAAA,gBAAgB,EAAE,IARN;AASZ,oBAAA,MAAM,EAAE,IATI;AAUZ,oBAAA,QAAQ,EAAE;AAVE,mBAAd;AAaA,yBAAO,KAAP;AACD,iBAhBY,CADiC;AAAA;AAoBjC,uBAAM,SAAS,CAAC,cAAV,CAAyB,OAAA,CAAA,uBAAzB,EAAkD;AACrE,kBAAA,MAAM,EAAN;AADqE,iBAAlD,CAAN;;AApBiC;AAoB1C,gBAAA,MApB0C;AAwB1C,gBAAA,aAxB0C,GAwB1B,MAAM,CAAC,eAAP,CAAuB,GAAvB,CAA2B,UAAA,IAAI;AAAA,yBAAI,IAAI,CAAC,GAAT;AAAA,iBAA/B,CAxB0B;AAAA,iDA0BzC,aA1ByC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAA,EAAlD;AAAA;AAJA;AAAA,CADK;;AAAM,OAAA,CAAA,wBAAA,GAAwB,wBAAxB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.memClientBatchCreateMems = void 0;\nconst types_1 = require(\"../../api/__codegen__/types\");\nconst memClientBatchCreateMems = ({ memClient }) => \n/**\n * Creates a new mem for each set of inputs, then returns the some details about the created mems.\n */\n(batchArgs) => __awaiter(void 0, void 0, void 0, function* () {\n    const inputs = batchArgs.map(({ memId, content, isRead, isArchived, scheduledFor, createdAt }) => {\n        const input = {\n            memId: memId !== null && memId !== void 0 ? memId : null,\n            content,\n            format: null,\n            isRead: isRead !== null && isRead !== void 0 ? isRead : null,\n            isArchived: isArchived !== null && isArchived !== void 0 ? isArchived : null,\n            scheduledFor: scheduledFor !== null && scheduledFor !== void 0 ? scheduledFor : null,\n            createdAt: createdAt !== null && createdAt !== void 0 ? createdAt : null,\n            richTextDocument: null,\n            source: null,\n            clientId: null,\n        };\n        return input;\n    });\n    const result = yield memClient.graphqlRequest(types_1.BatchCreateMemsDocument, {\n        inputs,\n    });\n    const batchMemsData = result.batchCreateMems.map(data => data.mem);\n    return batchMemsData;\n});\nexports.memClientBatchCreateMems = memClientBatchCreateMems;\n//# sourceMappingURL=batchCreateMems.js.map"]},"metadata":{},"sourceType":"script"}