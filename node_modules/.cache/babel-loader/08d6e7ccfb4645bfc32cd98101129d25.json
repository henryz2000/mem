{"ast":null,"code":"// @ts-nocheck\nimport refractorClike from './clike.js';\nimport refractorCpp from './cpp.js';\nchaiscript.displayName = 'chaiscript';\nchaiscript.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function chaiscript(Prism) {\n  Prism.register(refractorClike);\n  Prism.register(refractorCpp);\n  Prism.languages.chaiscript = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': [{\n      // e.g. class Rectangle { ... }\n      pattern: /(\\bclass\\s+)\\w+/,\n      lookbehind: true\n    }, {\n      // e.g. attr Rectangle::height, def Rectangle::area() { ... }\n      pattern: /(\\b(?:attr|def)\\s+)\\w+(?=\\s*::)/,\n      lookbehind: true\n    }],\n    keyword: /\\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\\b/,\n    number: [Prism.languages.cpp.number, /\\b(?:Infinity|NaN)\\b/],\n    operator: />>=?|<<=?|\\|\\||&&|:[:=]?|--|\\+\\+|[=!<>+\\-*/%|&^]=?|[?~]|`[^`\\r\\n]{1,4}`/\n  });\n  Prism.languages.insertBefore('chaiscript', 'operator', {\n    'parameter-type': {\n      // e.g. def foo(int x, Vector y) {...}\n      pattern: /([,(]\\s*)\\w+(?=\\s+\\w)/,\n      lookbehind: true,\n      alias: 'class-name'\n    }\n  });\n  Prism.languages.insertBefore('chaiscript', 'string', {\n    'string-interpolation': {\n      pattern: /(^|[^\\\\])\"(?:[^\"$\\\\]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}/,\n          lookbehind: true,\n          inside: {\n            'interpolation-expression': {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              inside: Prism.languages.chaiscript\n            },\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/chaiscript.js"],"names":["refractorClike","refractorCpp","chaiscript","displayName","aliases","Prism","register","languages","extend","string","pattern","lookbehind","greedy","keyword","number","cpp","operator","insertBefore","alias","inside","interpolation"],"mappings":"AAAA;AACA,OAAOA,cAAP,MAA2B,YAA3B;AACA,OAAOC,YAAP,MAAyB,UAAzB;AACAC,UAAU,CAACC,WAAX,GAAyB,YAAzB;AACAD,UAAU,CAACE,OAAX,GAAqB,EAArB;AAEA;;AACA,eAAe,SAASF,UAAT,CAAoBG,KAApB,EAA2B;AACxCA,EAAAA,KAAK,CAACC,QAAN,CAAeN,cAAf;AACAK,EAAAA,KAAK,CAACC,QAAN,CAAeL,YAAf;AACAI,EAAAA,KAAK,CAACE,SAAN,CAAgBL,UAAhB,GAA6BG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AAC3DC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,iCADH;AAENC,MAAAA,UAAU,EAAE,IAFN;AAGNC,MAAAA,MAAM,EAAE;AAHF,KADmD;AAM3D,kBAAc,CACZ;AACE;AACAF,MAAAA,OAAO,EAAE,iBAFX;AAGEC,MAAAA,UAAU,EAAE;AAHd,KADY,EAMZ;AACE;AACAD,MAAAA,OAAO,EAAE,iCAFX;AAGEC,MAAAA,UAAU,EAAE;AAHd,KANY,CAN6C;AAkB3DE,IAAAA,OAAO,EACL,+HAnByD;AAoB3DC,IAAAA,MAAM,EAAE,CAACT,KAAK,CAACE,SAAN,CAAgBQ,GAAhB,CAAoBD,MAArB,EAA6B,sBAA7B,CApBmD;AAqB3DE,IAAAA,QAAQ,EACN;AAtByD,GAAhC,CAA7B;AAwBAX,EAAAA,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CAA6B,YAA7B,EAA2C,UAA3C,EAAuD;AACrD,sBAAkB;AAChB;AACAP,MAAAA,OAAO,EAAE,uBAFO;AAGhBC,MAAAA,UAAU,EAAE,IAHI;AAIhBO,MAAAA,KAAK,EAAE;AAJS;AADmC,GAAvD;AAQAb,EAAAA,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CAA6B,YAA7B,EAA2C,QAA3C,EAAqD;AACnD,4BAAwB;AACtBP,MAAAA,OAAO,EACL,sFAFoB;AAGtBC,MAAAA,UAAU,EAAE,IAHU;AAItBC,MAAAA,MAAM,EAAE,IAJc;AAKtBO,MAAAA,MAAM,EAAE;AACNC,QAAAA,aAAa,EAAE;AACbV,UAAAA,OAAO,EACL,mEAFW;AAGbC,UAAAA,UAAU,EAAE,IAHC;AAIbQ,UAAAA,MAAM,EAAE;AACN,wCAA4B;AAC1BT,cAAAA,OAAO,EAAE,uBADiB;AAE1BC,cAAAA,UAAU,EAAE,IAFc;AAG1BQ,cAAAA,MAAM,EAAEd,KAAK,CAACE,SAAN,CAAgBL;AAHE,aADtB;AAMN,yCAA6B;AAC3BQ,cAAAA,OAAO,EAAE,WADkB;AAE3BQ,cAAAA,KAAK,EAAE;AAFoB;AANvB;AAJK,SADT;AAiBNT,QAAAA,MAAM,EAAE;AAjBF;AALc;AAD2B,GAArD;AA2BD","sourcesContent":["// @ts-nocheck\nimport refractorClike from './clike.js'\nimport refractorCpp from './cpp.js'\nchaiscript.displayName = 'chaiscript'\nchaiscript.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function chaiscript(Prism) {\n  Prism.register(refractorClike)\n  Prism.register(refractorCpp)\n  Prism.languages.chaiscript = Prism.languages.extend('clike', {\n    string: {\n      pattern: /(^|[^\\\\])'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      lookbehind: true,\n      greedy: true\n    },\n    'class-name': [\n      {\n        // e.g. class Rectangle { ... }\n        pattern: /(\\bclass\\s+)\\w+/,\n        lookbehind: true\n      },\n      {\n        // e.g. attr Rectangle::height, def Rectangle::area() { ... }\n        pattern: /(\\b(?:attr|def)\\s+)\\w+(?=\\s*::)/,\n        lookbehind: true\n      }\n    ],\n    keyword:\n      /\\b(?:attr|auto|break|case|catch|class|continue|def|default|else|finally|for|fun|global|if|return|switch|this|try|var|while)\\b/,\n    number: [Prism.languages.cpp.number, /\\b(?:Infinity|NaN)\\b/],\n    operator:\n      />>=?|<<=?|\\|\\||&&|:[:=]?|--|\\+\\+|[=!<>+\\-*/%|&^]=?|[?~]|`[^`\\r\\n]{1,4}`/\n  })\n  Prism.languages.insertBefore('chaiscript', 'operator', {\n    'parameter-type': {\n      // e.g. def foo(int x, Vector y) {...}\n      pattern: /([,(]\\s*)\\w+(?=\\s+\\w)/,\n      lookbehind: true,\n      alias: 'class-name'\n    }\n  })\n  Prism.languages.insertBefore('chaiscript', 'string', {\n    'string-interpolation': {\n      pattern:\n        /(^|[^\\\\])\"(?:[^\"$\\\\]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})*\"/,\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern:\n            /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}/,\n          lookbehind: true,\n          inside: {\n            'interpolation-expression': {\n              pattern: /(^\\$\\{)[\\s\\S]+(?=\\}$)/,\n              lookbehind: true,\n              inside: Prism.languages.chaiscript\n            },\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{|\\}$/,\n              alias: 'punctuation'\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}