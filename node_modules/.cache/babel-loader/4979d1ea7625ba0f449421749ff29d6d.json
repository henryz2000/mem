{"ast":null,"code":"/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Content} Content\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\nimport { html, svg } from 'property-information';\nimport { htmlVoidElements } from 'html-void-elements';\nimport { handle } from './handle/index.js';\n/**\n * Serialize hast as HTML.\n *\n * @param {Node | Array<Content>} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Serialized HTML.\n */\n// eslint-disable-next-line complexity\n\nexport function toHtml(tree, options) {\n  var options_ = options || {};\n  var quote = options_.quote || '\"';\n  var alternative = quote === '\"' ? \"'\" : '\"';\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`');\n  }\n  /** @type {State} */\n\n\n  var state = {\n    one: one,\n    all: all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences: options_.characterReferences || options_.entities || {},\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html,\n    quote: quote,\n    alternative: alternative\n  };\n  return state.one(Array.isArray(tree) ? {\n    type: 'root',\n    children: tree\n  } : tree, undefined, undefined);\n}\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Node} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\n\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this);\n}\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\n\n\nexport function all(parent) {\n  /** @type {Array<string>} */\n  var results = [];\n  var children = parent && parent.children || [];\n  var index = -1;\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent);\n  }\n\n  return results.join('');\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/hast-util-to-html/lib/index.js"],"names":["html","svg","htmlVoidElements","handle","toHtml","tree","options","options_","quote","alternative","Error","state","one","all","settings","omitOptionalTags","allowParseErrors","allowDangerousCharacters","quoteSmart","preferUnquoted","tightAttributes","upperDoctype","tightDoctype","bogusComments","tightCommaSeparatedLists","tightSelfClosing","collapseEmptyAttributes","allowDangerousHtml","voids","characterReferences","entities","closeSelfClosing","closeEmptyElements","schema","space","Array","isArray","type","children","undefined","node","index","parent","results","length","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,IAAR,EAAcC,GAAd,QAAwB,sBAAxB;AACA,SAAQC,gBAAR,QAA+B,oBAA/B;AACA,SAAQC,MAAR,QAAqB,mBAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,OAAtB,EAA+B;AACpC,MAAMC,QAAQ,GAAGD,OAAO,IAAI,EAA5B;AACA,MAAME,KAAK,GAAGD,QAAQ,CAACC,KAAT,IAAkB,GAAhC;AACA,MAAMC,WAAW,GAAGD,KAAK,KAAK,GAAV,GAAgB,GAAhB,GAAsB,GAA1C;;AAEA,MAAIA,KAAK,KAAK,GAAV,IAAiBA,KAAK,KAAK,GAA/B,EAAoC;AAClC,UAAM,IAAIE,KAAJ,CAAU,oBAAoBF,KAApB,GAA4B,yBAAtC,CAAN;AACD;AAED;;;AACA,MAAMG,KAAK,GAAG;AACZC,IAAAA,GAAG,EAAHA,GADY;AAEZC,IAAAA,GAAG,EAAHA,GAFY;AAGZC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,gBAAgB,EAAER,QAAQ,CAACQ,gBAAT,IAA6B,KADvC;AAERC,MAAAA,gBAAgB,EAAET,QAAQ,CAACS,gBAAT,IAA6B,KAFvC;AAGRC,MAAAA,wBAAwB,EAAEV,QAAQ,CAACU,wBAAT,IAAqC,KAHvD;AAIRC,MAAAA,UAAU,EAAEX,QAAQ,CAACW,UAAT,IAAuB,KAJ3B;AAKRC,MAAAA,cAAc,EAAEZ,QAAQ,CAACY,cAAT,IAA2B,KALnC;AAMRC,MAAAA,eAAe,EAAEb,QAAQ,CAACa,eAAT,IAA4B,KANrC;AAORC,MAAAA,YAAY,EAAEd,QAAQ,CAACc,YAAT,IAAyB,KAP/B;AAQRC,MAAAA,YAAY,EAAEf,QAAQ,CAACe,YAAT,IAAyB,KAR/B;AASRC,MAAAA,aAAa,EAAEhB,QAAQ,CAACgB,aAAT,IAA0B,KATjC;AAURC,MAAAA,wBAAwB,EAAEjB,QAAQ,CAACiB,wBAAT,IAAqC,KAVvD;AAWRC,MAAAA,gBAAgB,EAAElB,QAAQ,CAACkB,gBAAT,IAA6B,KAXvC;AAYRC,MAAAA,uBAAuB,EAAEnB,QAAQ,CAACmB,uBAAT,IAAoC,KAZrD;AAaRC,MAAAA,kBAAkB,EAAEpB,QAAQ,CAACoB,kBAAT,IAA+B,KAb3C;AAcRC,MAAAA,KAAK,EAAErB,QAAQ,CAACqB,KAAT,IAAkB1B,gBAdjB;AAeR2B,MAAAA,mBAAmB,EACjBtB,QAAQ,CAACsB,mBAAT,IAAgCtB,QAAQ,CAACuB,QAAzC,IAAqD,EAhB/C;AAiBRC,MAAAA,gBAAgB,EAAExB,QAAQ,CAACwB,gBAAT,IAA6B,KAjBvC;AAkBRC,MAAAA,kBAAkB,EAAEzB,QAAQ,CAACyB,kBAAT,IAA+B;AAlB3C,KAHE;AAuBZC,IAAAA,MAAM,EAAE1B,QAAQ,CAAC2B,KAAT,KAAmB,KAAnB,GAA2BjC,GAA3B,GAAiCD,IAvB7B;AAwBZQ,IAAAA,KAAK,EAALA,KAxBY;AAyBZC,IAAAA,WAAW,EAAXA;AAzBY,GAAd;AA4BA,SAAOE,KAAK,CAACC,GAAN,CACLuB,KAAK,CAACC,OAAN,CAAc/B,IAAd,IAAsB;AAACgC,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,QAAQ,EAAEjC;AAAzB,GAAtB,GAAuDA,IADlD,EAELkC,SAFK,EAGLA,SAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS3B,GAAT,CAAa4B,IAAb,EAAmBC,KAAnB,EAA0BC,MAA1B,EAAkC;AAChC,SAAOvC,MAAM,CAACqC,IAAD,EAAOC,KAAP,EAAcC,MAAd,EAAsB,IAAtB,CAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAAS7B,GAAT,CAAa6B,MAAb,EAAqB;AAC1B;AACA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAML,QAAQ,GAAII,MAAM,IAAIA,MAAM,CAACJ,QAAlB,IAA+B,EAAhD;AACA,MAAIG,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,EAAEA,KAAF,GAAUH,QAAQ,CAACM,MAA1B,EAAkC;AAChCD,IAAAA,OAAO,CAACF,KAAD,CAAP,GAAiB,KAAK7B,GAAL,CAAS0B,QAAQ,CAACG,KAAD,CAAjB,EAA0BA,KAA1B,EAAiCC,MAAjC,CAAjB;AACD;;AAED,SAAOC,OAAO,CAACE,IAAR,CAAa,EAAb,CAAP;AACD","sourcesContent":["/**\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').Parent} Parent\n * @typedef {import('./types.js').Content} Content\n * @typedef {import('./types.js').Options} Options\n * @typedef {import('./types.js').State} State\n */\n\nimport {html, svg} from 'property-information'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {handle} from './handle/index.js'\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Node | Array<Content>} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {string}\n *   Serialized HTML.\n */\n// eslint-disable-next-line complexity\nexport function toHtml(tree, options) {\n  const options_ = options || {}\n  const quote = options_.quote || '\"'\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || options_.entities || {},\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html,\n    quote,\n    alternative\n  }\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Node} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parent | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nexport function all(parent) {\n  /** @type {Array<string>} */\n  const results = []\n  const children = (parent && parent.children) || []\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent)\n  }\n\n  return results.join('')\n}\n"]},"metadata":{},"sourceType":"module"}