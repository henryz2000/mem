{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject;\n\nimport React, { useContext, useEffect } from 'react';\nimport { rehype } from 'rehype';\nimport rehypePrism from 'rehype-prism-plus';\nimport { EditorContext } from '../../Context';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction html2Escape(sHtml) {\n  return sHtml // .replace(/```(\\w+)?([\\s\\S]*?)(\\s.+)?```/g, (str: string) => {\n  //   return str.replace(\n  //     /[<&\"]/g,\n  //     (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n  //   );\n  // })\n  .replace(/[<&\"]/g, function (c) {\n    return {\n      '<': '&lt;',\n      '>': '&gt;',\n      '&': '&amp;',\n      '\"': '&quot;'\n    }[c];\n  });\n}\n\nexport default function Markdown(props) {\n  var prefixCls = props.prefixCls;\n\n  var _useContext = useContext(EditorContext),\n      _useContext$markdown = _useContext.markdown,\n      markdown = _useContext$markdown === void 0 ? '' : _useContext$markdown,\n      highlightEnable = _useContext.highlightEnable,\n      dispatch = _useContext.dispatch;\n\n  var preRef = /*#__PURE__*/React.createRef();\n  useEffect(function () {\n    if (preRef.current && dispatch) {\n      dispatch({\n        textareaPre: preRef.current\n      });\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  if (!markdown) {\n    return /*#__PURE__*/_jsx(\"pre\", {\n      ref: preRef,\n      className: prefixCls + \"-text-pre wmde-markdown-color\"\n    });\n  }\n\n  var mdStr = \"<pre class=\\\"language-markdown \" + prefixCls + \"-text-pre wmde-markdown-color\\\"><code class=\\\"language-markdown\\\">\" + html2Escape(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\", \"\"])), markdown)) + \"\\n</code></pre>\";\n\n  if (highlightEnable) {\n    try {\n      mdStr = rehype().data('settings', {\n        fragment: true\n      }).use(rehypePrism, {\n        ignoreMissing: true\n      }).processSync(mdStr).toString();\n    } catch (error) {}\n  }\n\n  return /*#__PURE__*/React.createElement('div', {\n    className: 'wmde-markdown-color',\n    dangerouslySetInnerHTML: {\n      __html: mdStr || ''\n    }\n  });\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@uiw/react-md-editor/esm/components/TextArea/Markdown.js"],"names":["_taggedTemplateLiteralLoose","_templateObject","React","useContext","useEffect","rehype","rehypePrism","EditorContext","jsx","_jsx","html2Escape","sHtml","replace","c","Markdown","props","prefixCls","markdown","highlightEnable","dispatch","preRef","createRef","current","textareaPre","ref","className","mdStr","String","raw","data","fragment","use","ignoreMissing","processSync","toString","error","createElement","dangerouslySetInnerHTML","__html"],"mappings":"AAAA,OAAOA,2BAAP,MAAwC,mDAAxC;;AACA,IAAIC,eAAJ;;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AACA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,SAAOA,KAAK,CACZ;AACA;AACA;AACA;AACA;AACA;AANY,GAOXC,OAPM,CAOE,QAPF,EAOY,UAAAC,CAAC;AAAA,WAAK;AACvB,WAAK,MADkB;AAEvB,WAAK,MAFkB;AAGvB,WAAK,OAHkB;AAIvB,WAAK;AAJkB,KAAD,CAKrBA,CALqB,CAAJ;AAAA,GAPb,CAAP;AAaD;;AACD,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACtC,MACEC,SADF,GAEID,KAFJ,CACEC,SADF;;AAGA,oBAIIb,UAAU,CAACI,aAAD,CAJd;AAAA,yCACEU,QADF;AAAA,MACEA,QADF,qCACa,EADb;AAAA,MAEEC,eAFF,eAEEA,eAFF;AAAA,MAGEC,QAHF,eAGEA,QAHF;;AAKA,MAAIC,MAAM,GAAG,aAAalB,KAAK,CAACmB,SAAN,EAA1B;AACAjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIgB,MAAM,CAACE,OAAP,IAAkBH,QAAtB,EAAgC;AAC9BA,MAAAA,QAAQ,CAAC;AACPI,QAAAA,WAAW,EAAEH,MAAM,CAACE;AADb,OAAD,CAAR;AAGD,KALa,CAMd;;AACD,GAPQ,EAON,EAPM,CAAT;;AAQA,MAAI,CAACL,QAAL,EAAe;AACb,WAAO,aAAaR,IAAI,CAAC,KAAD,EAAQ;AAC9Be,MAAAA,GAAG,EAAEJ,MADyB;AAE9BK,MAAAA,SAAS,EAAET,SAAS,GAAG;AAFO,KAAR,CAAxB;AAID;;AACD,MAAIU,KAAK,GAAG,oCAAoCV,SAApC,GAAgD,oEAAhD,GAAuHN,WAAW,CAACiB,MAAM,CAACC,GAAP,CAAW3B,eAAe,KAAKA,eAAe,GAAGD,2BAA2B,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,CAAlD,CAA1B,EAAyFiB,QAAzF,CAAD,CAAlI,GAAyO,iBAArP;;AACA,MAAIC,eAAJ,EAAqB;AACnB,QAAI;AACFQ,MAAAA,KAAK,GAAGrB,MAAM,GAAGwB,IAAT,CAAc,UAAd,EAA0B;AAChCC,QAAAA,QAAQ,EAAE;AADsB,OAA1B,EAELC,GAFK,CAEDzB,WAFC,EAEY;AAClB0B,QAAAA,aAAa,EAAE;AADG,OAFZ,EAILC,WAJK,CAIOP,KAJP,EAIcQ,QAJd,EAAR;AAKD,KAND,CAME,OAAOC,KAAP,EAAc,CAAE;AACnB;;AACD,SAAO,aAAajC,KAAK,CAACkC,aAAN,CAAoB,KAApB,EAA2B;AAC7CX,IAAAA,SAAS,EAAE,qBADkC;AAE7CY,IAAAA,uBAAuB,EAAE;AACvBC,MAAAA,MAAM,EAAEZ,KAAK,IAAI;AADM;AAFoB,GAA3B,CAApB;AAMD","sourcesContent":["import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _templateObject;\nimport React, { useContext, useEffect } from 'react';\nimport { rehype } from 'rehype';\nimport rehypePrism from 'rehype-prism-plus';\nimport { EditorContext } from '../../Context';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction html2Escape(sHtml) {\n  return sHtml\n  // .replace(/```(\\w+)?([\\s\\S]*?)(\\s.+)?```/g, (str: string) => {\n  //   return str.replace(\n  //     /[<&\"]/g,\n  //     (c: string) => (({ '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' } as Record<string, string>)[c]),\n  //   );\n  // })\n  .replace(/[<&\"]/g, c => ({\n    '<': '&lt;',\n    '>': '&gt;',\n    '&': '&amp;',\n    '\"': '&quot;'\n  })[c]);\n}\nexport default function Markdown(props) {\n  var {\n    prefixCls\n  } = props;\n  var {\n    markdown = '',\n    highlightEnable,\n    dispatch\n  } = useContext(EditorContext);\n  var preRef = /*#__PURE__*/React.createRef();\n  useEffect(() => {\n    if (preRef.current && dispatch) {\n      dispatch({\n        textareaPre: preRef.current\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  if (!markdown) {\n    return /*#__PURE__*/_jsx(\"pre\", {\n      ref: preRef,\n      className: prefixCls + \"-text-pre wmde-markdown-color\"\n    });\n  }\n  var mdStr = \"<pre class=\\\"language-markdown \" + prefixCls + \"-text-pre wmde-markdown-color\\\"><code class=\\\"language-markdown\\\">\" + html2Escape(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\", \"\"])), markdown)) + \"\\n</code></pre>\";\n  if (highlightEnable) {\n    try {\n      mdStr = rehype().data('settings', {\n        fragment: true\n      }).use(rehypePrism, {\n        ignoreMissing: true\n      }).processSync(mdStr).toString();\n    } catch (error) {}\n  }\n  return /*#__PURE__*/React.createElement('div', {\n    className: 'wmde-markdown-color',\n    dangerouslySetInnerHTML: {\n      __html: mdStr || ''\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}