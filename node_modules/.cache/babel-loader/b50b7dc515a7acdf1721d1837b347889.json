{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MemClient = void 0;\n\nvar graphql_request_1 = require(\"graphql-request\");\n\nvar graphql_1 = require(\"../services/mock-server/graphql\");\n\nvar base_1 = require(\"../utils/errors/base\");\n\nvar runtime_1 = require(\"../utils/errors/runtime\");\n\nvar logger_1 = require(\"../utils/logger\");\n\nvar constants_1 = require(\"./constants\");\n\nvar batchCreateMems_1 = require(\"./methods/batchCreateMems\");\n\nvar createMem_1 = require(\"./methods/createMem\");\n\nvar healthCheck_1 = require(\"./methods/healthCheck\");\n\nvar MemClient = /*#__PURE__*/function () {\n  function MemClient(_ref) {\n    var _ref$apiEndpoint = _ref.apiEndpoint,\n        apiEndpoint = _ref$apiEndpoint === void 0 ? constants_1.defaultMemApiEndpoint : _ref$apiEndpoint,\n        apiAccessToken = _ref.apiAccessToken,\n        logLevel = _ref.logLevel;\n\n    _classCallCheck(this, MemClient);\n\n    this.healthCheck = healthCheck_1.memClientHealthCheck({\n      memClient: this\n    });\n    this.createMem = createMem_1.memClientCreateMem({\n      memClient: this\n    });\n    this.batchCreateMems = batchCreateMems_1.memClientBatchCreateMems({\n      memClient: this\n    });\n    this.logger = new logger_1.Logger({\n      level: logLevel\n    });\n\n    if (!apiAccessToken) {\n      throw new base_1.ClientInitializationError({\n        message: \"An `apiAccessToken` must be provided when initializing the MemClient.\"\n      });\n    }\n\n    var defaultHeaders = {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"\".concat(constants_1.defaultMemAuthorizationScheme, \" \").concat(apiAccessToken)\n    };\n    this.apiClient = new graphql_request_1.GraphQLClient(apiEndpoint, {\n      headers: defaultHeaders\n    });\n    this.logger.debug(\"[constructor()] MemClient Initialized.\");\n  }\n\n  _createClass(MemClient, [{\n    key: \"graphqlRequest\",\n    value: function graphqlRequest(document, variables) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.logger.debug(\"[graphqlRequest()] Started.\", document, variables);\n                _context.prev = 1;\n                _context.next = 4;\n                return this.apiClient.request(document, variables);\n\n              case 4:\n                data = _context.sent;\n                this.logger.debug(\"[graphqlRequest()] Completed.\");\n                return _context.abrupt(\"return\", data);\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](1);\n                this.logger.debug(\"[graphqlRequest()] An error ocurred.\", _context.t0);\n                graphql_1.graphqlService.handleRequestErrors({\n                  err: _context.t0\n                });\n\n              case 13:\n                throw new runtime_1.RuntimeError();\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 9]]);\n      }));\n    }\n  }]);\n\n  return MemClient;\n}();\n\nexports.MemClient = MemClient;","map":{"version":3,"sources":["../../src/mem-client/MemClient.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAGA,IAAA,SAAA,GAAA,OAAA,CAAA,iCAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;IAGa,S;AAIX,2BAA8F;AAAA,gCAAhF,WAAgF;AAAA,QAAhF,WAAgF,iCAAlE,WAAA,CAAA,qBAAkE;AAAA,QAA3C,cAA2C,QAA3C,cAA2C;AAAA,QAA3B,QAA2B,QAA3B,QAA2B;;AAAA;;AA+C9F,SAAA,WAAA,GAAc,aAAA,CAAA,oBAAA,CAAqB;AAAE,MAAA,SAAS,EAAE;AAAb,KAArB,CAAd;AAEA,SAAA,SAAA,GAAY,WAAA,CAAA,kBAAA,CAAmB;AAAE,MAAA,SAAS,EAAE;AAAb,KAAnB,CAAZ;AAEA,SAAA,eAAA,GAAkB,iBAAA,CAAA,wBAAA,CAAyB;AAAE,MAAA,SAAS,EAAE;AAAb,KAAzB,CAAlB;AAlDE,SAAK,MAAL,GAAc,IAAI,QAAA,CAAA,MAAJ,CAAW;AACvB,MAAA,KAAK,EAAE;AADgB,KAAX,CAAd;;AAIA,QAAI,CAAC,cAAL,EAAqB;AACnB,YAAM,IAAI,MAAA,CAAA,yBAAJ,CAA8B;AAClC,QAAA,OAAO,EAAE;AADyB,OAA9B,CAAN;AAGD;;AAED,QAAM,cAAc,GAAG;AACrB,sBAAgB,kBADK;AAErB,MAAA,aAAa,YAAK,WAAA,CAAA,6BAAL,cAAsC,cAAtC;AAFQ,KAAvB;AAKA,SAAK,SAAL,GAAiB,IAAI,iBAAA,CAAA,aAAJ,CAAkB,WAAlB,EAA+B;AAC9C,MAAA,OAAO,EAAE;AADqC,KAA/B,CAAjB;AAIA,SAAK,MAAL,CAAY,KAAZ;AACD;;;;WAEK,wBACJ,QADI,EAEJ,SAFI,EAEkB;;;;;;;AAEtB,qBAAK,MAAL,CAAY,KAAZ,gCAAiD,QAAjD,EAA2D,SAA3D;;;AAGe,uBAAM,KAAK,SAAL,CAAe,OAAf,CAA4C,QAA5C,EAAsD,SAAtD,CAAN;;;AAAP,gBAAA,I;AAEN,qBAAK,MAAL,CAAY,KAAZ;iDAEO,I;;;;;AAEP,qBAAK,MAAL,CAAY,KAAZ;AAEA,gBAAA,SAAA,CAAA,cAAA,CAAe,mBAAf,CAAmC;AACjC,kBAAA,GAAG;AAD8B,iBAAnC;;;sBAMI,IAAI,SAAA,CAAA,YAAJ,E;;;;;;;;;AACP;;;;;;AAjDH,OAAA,CAAA,SAAA,GAAA,SAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MemClient = void 0;\nconst graphql_request_1 = require(\"graphql-request\");\nconst graphql_1 = require(\"../services/mock-server/graphql\");\nconst base_1 = require(\"../utils/errors/base\");\nconst runtime_1 = require(\"../utils/errors/runtime\");\nconst logger_1 = require(\"../utils/logger\");\nconst constants_1 = require(\"./constants\");\nconst batchCreateMems_1 = require(\"./methods/batchCreateMems\");\nconst createMem_1 = require(\"./methods/createMem\");\nconst healthCheck_1 = require(\"./methods/healthCheck\");\nclass MemClient {\n    constructor({ apiEndpoint = constants_1.defaultMemApiEndpoint, apiAccessToken, logLevel }) {\n        this.healthCheck = healthCheck_1.memClientHealthCheck({ memClient: this });\n        this.createMem = createMem_1.memClientCreateMem({ memClient: this });\n        this.batchCreateMems = batchCreateMems_1.memClientBatchCreateMems({ memClient: this });\n        this.logger = new logger_1.Logger({\n            level: logLevel,\n        });\n        if (!apiAccessToken) {\n            throw new base_1.ClientInitializationError({\n                message: \"An `apiAccessToken` must be provided when initializing the MemClient.\",\n            });\n        }\n        const defaultHeaders = {\n            \"Content-Type\": \"application/json\",\n            Authorization: `${constants_1.defaultMemAuthorizationScheme} ${apiAccessToken}`,\n        };\n        this.apiClient = new graphql_request_1.GraphQLClient(apiEndpoint, {\n            headers: defaultHeaders,\n        });\n        this.logger.debug(`[constructor()] MemClient Initialized.`);\n    }\n    graphqlRequest(document, variables) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.logger.debug(`[graphqlRequest()] Started.`, document, variables);\n            try {\n                const data = yield this.apiClient.request(document, variables);\n                this.logger.debug(`[graphqlRequest()] Completed.`);\n                return data;\n            }\n            catch (err) {\n                this.logger.debug(`[graphqlRequest()] An error ocurred.`, err);\n                graphql_1.graphqlService.handleRequestErrors({\n                    err,\n                });\n            }\n            /** This should never be hit - adding it for TS purposes. */\n            throw new runtime_1.RuntimeError();\n        });\n    }\n}\nexports.MemClient = MemClient;\n//# sourceMappingURL=MemClient.js.map"]},"metadata":{},"sourceType":"script"}