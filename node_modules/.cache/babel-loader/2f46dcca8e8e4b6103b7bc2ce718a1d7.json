{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.memClientBatchCreateMems = void 0;\n\nconst types_1 = require(\"../../api/__codegen__/types\");\n\nconst memClientBatchCreateMems = ({\n  memClient\n}) =>\n/**\n * Creates a new mem for each set of inputs, then returns the some details about the created mems.\n */\nbatchArgs => __awaiter(void 0, void 0, void 0, function* () {\n  const inputs = batchArgs.map(({\n    memId,\n    content,\n    isRead,\n    isArchived,\n    scheduledFor,\n    createdAt\n  }) => {\n    const input = {\n      memId: memId !== null && memId !== void 0 ? memId : null,\n      content,\n      format: null,\n      isRead: isRead !== null && isRead !== void 0 ? isRead : null,\n      isArchived: isArchived !== null && isArchived !== void 0 ? isArchived : null,\n      scheduledFor: scheduledFor !== null && scheduledFor !== void 0 ? scheduledFor : null,\n      createdAt: createdAt !== null && createdAt !== void 0 ? createdAt : null,\n      richTextDocument: null,\n      source: null,\n      clientId: null\n    };\n    return input;\n  });\n  const result = yield memClient.graphqlRequest(types_1.BatchCreateMemsDocument, {\n    inputs\n  });\n  const batchMemsData = result.batchCreateMems.map(data => data.mem);\n  return batchMemsData;\n});\n\nexports.memClientBatchCreateMems = memClientBatchCreateMems;","map":{"version":3,"sources":["../../../src/mem-client/methods/batchCreateMems.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAOO,MAAM,wBAAwB,GACnC,CAAC;AAAE,EAAA;AAAF,CAAD;AACA;;AAEG;AACI,SAAP,IAAkD,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAChD,QAAM,MAAM,GAAG,SAAS,CAAC,GAAV,CACb,CAAC;AAAE,IAAA,KAAF;AAAS,IAAA,OAAT;AAAkB,IAAA,MAAlB;AAA0B,IAAA,UAA1B;AAAsC,IAAA,YAAtC;AAAoD,IAAA;AAApD,GAAD,KAAoE;AAClE,UAAM,KAAK,GAAG;AACZ,MAAA,KAAK,EAAE,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAA,KAAA,GAAS,IADJ;AAEZ,MAAA,OAFY;AAGZ,MAAA,MAAM,EAAE,IAHI;AAIZ,MAAA,MAAM,EAAE,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GAAU,IAJN;AAKZ,MAAA,UAAU,EAAE,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAA,UAAA,GAAc,IALd;AAMZ,MAAA,YAAY,EAAE,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAA,YAAA,GAAgB,IANlB;AAOZ,MAAA,SAAS,EAAE,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAA,SAAA,GAAa,IAPZ;AAQZ,MAAA,gBAAgB,EAAE,IARN;AASZ,MAAA,MAAM,EAAE,IATI;AAUZ,MAAA,QAAQ,EAAE;AAVE,KAAd;AAaA,WAAO,KAAP;AACD,GAhBY,CAAf;AAmBA,QAAM,MAAM,GAAG,MAAM,SAAS,CAAC,cAAV,CAAyB,OAAA,CAAA,uBAAzB,EAAkD;AACrE,IAAA;AADqE,GAAlD,CAArB;AAIA,QAAM,aAAa,GAAG,MAAM,CAAC,eAAP,CAAuB,GAAvB,CAA2B,IAAI,IAAI,IAAI,CAAC,GAAxC,CAAtB;AAEA,SAAO,aAAP;AACD,CA3BiD,CAL7C;;AAAM,OAAA,CAAA,wBAAA,GAAwB,wBAAxB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.memClientBatchCreateMems = void 0;\nconst types_1 = require(\"../../api/__codegen__/types\");\nconst memClientBatchCreateMems = ({ memClient }) => \n/**\n * Creates a new mem for each set of inputs, then returns the some details about the created mems.\n */\n(batchArgs) => __awaiter(void 0, void 0, void 0, function* () {\n    const inputs = batchArgs.map(({ memId, content, isRead, isArchived, scheduledFor, createdAt }) => {\n        const input = {\n            memId: memId !== null && memId !== void 0 ? memId : null,\n            content,\n            format: null,\n            isRead: isRead !== null && isRead !== void 0 ? isRead : null,\n            isArchived: isArchived !== null && isArchived !== void 0 ? isArchived : null,\n            scheduledFor: scheduledFor !== null && scheduledFor !== void 0 ? scheduledFor : null,\n            createdAt: createdAt !== null && createdAt !== void 0 ? createdAt : null,\n            richTextDocument: null,\n            source: null,\n            clientId: null,\n        };\n        return input;\n    });\n    const result = yield memClient.graphqlRequest(types_1.BatchCreateMemsDocument, {\n        inputs,\n    });\n    const batchMemsData = result.batchCreateMems.map(data => data.mem);\n    return batchMemsData;\n});\nexports.memClientBatchCreateMems = memClientBatchCreateMems;\n//# sourceMappingURL=batchCreateMems.js.map"]},"metadata":{},"sourceType":"script"}