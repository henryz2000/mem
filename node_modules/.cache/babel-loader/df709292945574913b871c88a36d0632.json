{"ast":null,"code":"// @ts-nocheck\nimport refractorScheme from './scheme.js';\nracket.displayName = 'racket';\nracket.aliases = ['rkt'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function racket(Prism) {\n  Prism.register(refractorScheme);\n  Prism.languages.racket = Prism.languages.extend('scheme', {\n    'lambda-parameter': {\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n      // this will just prevent false positives of the `function` pattern\n      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('racket', 'string', {\n    lang: {\n      pattern: /^#lang.+/m,\n      greedy: true,\n      alias: 'keyword'\n    }\n  });\n  Prism.languages.rkt = Prism.languages.racket;\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/racket.js"],"names":["refractorScheme","racket","displayName","aliases","Prism","register","languages","extend","pattern","lookbehind","insertBefore","lang","greedy","alias","rkt"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,aAA5B;AACAC,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,CAAC,KAAD,CAAjB;AAEA;;AACA,eAAe,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACpCA,EAAAA,KAAK,CAACC,QAAN,CAAeL,eAAf;AACAI,EAAAA,KAAK,CAACE,SAAN,CAAgBL,MAAhB,GAAyBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,QAAvB,EAAiC;AACxD,wBAAoB;AAClB;AACA;AACAC,MAAAA,OAAO,EAAE,oCAHS;AAIlBC,MAAAA,UAAU,EAAE;AAJM;AADoC,GAAjC,CAAzB;AAQAL,EAAAA,KAAK,CAACE,SAAN,CAAgBI,YAAhB,CAA6B,QAA7B,EAAuC,QAAvC,EAAiD;AAC/CC,IAAAA,IAAI,EAAE;AACJH,MAAAA,OAAO,EAAE,WADL;AAEJI,MAAAA,MAAM,EAAE,IAFJ;AAGJC,MAAAA,KAAK,EAAE;AAHH;AADyC,GAAjD;AAOAT,EAAAA,KAAK,CAACE,SAAN,CAAgBQ,GAAhB,GAAsBV,KAAK,CAACE,SAAN,CAAgBL,MAAtC;AACD","sourcesContent":["// @ts-nocheck\nimport refractorScheme from './scheme.js'\nracket.displayName = 'racket'\nracket.aliases = ['rkt']\n\n/** @type {import('../core.js').Syntax} */\nexport default function racket(Prism) {\n  Prism.register(refractorScheme)\n  Prism.languages.racket = Prism.languages.extend('scheme', {\n    'lambda-parameter': {\n      // the racket lambda syntax is a lot more complex, so we won't even attempt to capture it.\n      // this will just prevent false positives of the `function` pattern\n      pattern: /([(\\[]lambda\\s+[(\\[])[^()\\[\\]'\\s]+/,\n      lookbehind: true\n    }\n  })\n  Prism.languages.insertBefore('racket', 'string', {\n    lang: {\n      pattern: /^#lang.+/m,\n      greedy: true,\n      alias: 'keyword'\n    }\n  })\n  Prism.languages.rkt = Prism.languages.racket\n}\n"]},"metadata":{},"sourceType":"module"}