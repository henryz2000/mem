{"ast":null,"code":"import _toConsumableArray from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Element} Element\n * @typedef {Element['children'][number]} ElementChild\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast-util-is-element').Test} Test\n *\n * @typedef {'prepend'|'append'|'wrap'|'before'|'after'} Behavior\n *\n * @callback Build\n * @param {Element} node\n * @returns {ElementChild|ElementChild[]}\n *\n * @typedef Options\n *   Configuration.\n * @property {Behavior} [behavior='prepend']\n *   How to create links.\n * @property {Behavior} [behaviour]\n *   Please use `behavior` instead\n * @property {Properties} [properties]\n *   Extra properties to set on the link when injecting.\n *   Defaults to `{ariaHidden: true, tabIndex: -1}` when `'prepend'` or\n *   `'append'`.\n * @property {ElementChild|ElementChild[]|Build} [content={type: 'element', tagName: 'span', properties: {className: ['icon', 'icon-link']}, children: []}]\n *   hast nodes to insert in the link.\n * @property {ElementChild|ElementChild[]|Build} [group]\n *   hast node to wrap the heading and link with, if `behavior` is `'before'` or\n *   `'after'`.\n *   There is no default.\n * @property {Test} [test]\n *   Test to define which heading elements are linked.\n *   Any test that can be given to `hast-util-is-element` is supported.\n *   The default (no test) is to link all headings.\n *   Can be used to link only h1-h3, or for example all except h1.\n */\nimport extend from 'extend';\nimport { hasProperty } from 'hast-util-has-property';\nimport { headingRank } from 'hast-util-heading-rank';\nimport { convertElement } from 'hast-util-is-element';\nimport { visit, SKIP } from 'unist-util-visit';\n/** @type {Element} */\n\nvar contentDefaults = {\n  type: 'element',\n  tagName: 'span',\n  properties: {\n    className: ['icon', 'icon-link']\n  },\n  children: []\n};\n/**\n * Plugin to automatically add links to headings (h1-h6).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\n\nexport default function rehypeAutolinkHeadings() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var props = options.properties;\n  var behavior = options.behaviour || options.behavior || 'prepend';\n  var content = options.content || contentDefaults;\n  var group = options.group;\n  var is = convertElement(options.test);\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n\n  var method;\n\n  if (behavior === 'wrap') {\n    method = wrap;\n  } else if (behavior === 'before' || behavior === 'after') {\n    method = around;\n  } else {\n    if (!props) {\n      props = {\n        ariaHidden: 'true',\n        tabIndex: -1\n      };\n    }\n\n    method = inject;\n  }\n\n  return function (tree) {\n    visit(tree, 'element', function (node, index, parent) {\n      if (headingRank(node) && hasProperty(node, 'id') && is(node, index, parent)) {\n        return method(node, index, parent);\n      }\n    });\n  };\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n\n  function inject(node) {\n    node.children[behavior === 'prepend' ? 'unshift' : 'push'](create(node, extend(true, {}, props), toChildren(content, node)));\n    return [SKIP];\n  }\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n\n\n  function around(node, index, parent) {\n    var _parent$children;\n\n    // Uncommon.\n\n    /* c8 ignore next */\n    if (typeof index !== 'number' || !parent) return;\n    var link = create(node, extend(true, {}, props), toChildren(content, node));\n    var nodes = behavior === 'before' ? [link, node] : [node, link];\n\n    if (group) {\n      var grouping = toNode(group, node);\n\n      if (grouping && !Array.isArray(grouping) && grouping.type === 'element') {\n        grouping.children = nodes;\n        nodes = [grouping];\n      }\n    }\n\n    (_parent$children = parent.children).splice.apply(_parent$children, [index, 1].concat(_toConsumableArray(nodes)));\n\n    return [SKIP, index + nodes.length];\n  }\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n\n\n  function wrap(node) {\n    node.children = [create(node, extend(true, {}, props), node.children)];\n    return [SKIP];\n  }\n  /**\n   * @param {ElementChild|ElementChild[]|Build} value\n   * @param {Element} node\n   * @returns {ElementChild[]}\n   */\n\n\n  function toChildren(value, node) {\n    var result = toNode(value, node);\n    return Array.isArray(result) ? result : [result];\n  }\n  /**\n   * @param {ElementChild|ElementChild[]|Build} value\n   * @param {Element} node\n   * @returns {ElementChild|ElementChild[]}\n   */\n\n\n  function toNode(value, node) {\n    if (typeof value === 'function') return value(node);\n    return extend(true, Array.isArray(value) ? [] : {}, value);\n  }\n  /**\n   * @param {Element} node\n   * @param {Properties} props\n   * @param {ElementChild[]} children\n   * @returns {Element}\n   */\n\n\n  function create(node, props, children) {\n    return {\n      type: 'element',\n      tagName: 'a',\n      properties: Object.assign({}, props, {\n        // Fix hast types and make them required.\n\n        /* c8 ignore next */\n        href: '#' + (node.properties || {}).id\n      }),\n      children: children\n    };\n  }\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/rehype-autolink-headings/lib/index.js"],"names":["extend","hasProperty","headingRank","convertElement","visit","SKIP","contentDefaults","type","tagName","properties","className","children","rehypeAutolinkHeadings","options","props","behavior","behaviour","content","group","is","test","method","wrap","around","ariaHidden","tabIndex","inject","tree","node","index","parent","create","toChildren","link","nodes","grouping","toNode","Array","isArray","splice","length","value","result","Object","assign","href","id"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').Parent} Parent\n * @typedef {import('hast').Element} Element\n * @typedef {Element['children'][number]} ElementChild\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('hast-util-is-element').Test} Test\n *\n * @typedef {'prepend'|'append'|'wrap'|'before'|'after'} Behavior\n *\n * @callback Build\n * @param {Element} node\n * @returns {ElementChild|ElementChild[]}\n *\n * @typedef Options\n *   Configuration.\n * @property {Behavior} [behavior='prepend']\n *   How to create links.\n * @property {Behavior} [behaviour]\n *   Please use `behavior` instead\n * @property {Properties} [properties]\n *   Extra properties to set on the link when injecting.\n *   Defaults to `{ariaHidden: true, tabIndex: -1}` when `'prepend'` or\n *   `'append'`.\n * @property {ElementChild|ElementChild[]|Build} [content={type: 'element', tagName: 'span', properties: {className: ['icon', 'icon-link']}, children: []}]\n *   hast nodes to insert in the link.\n * @property {ElementChild|ElementChild[]|Build} [group]\n *   hast node to wrap the heading and link with, if `behavior` is `'before'` or\n *   `'after'`.\n *   There is no default.\n * @property {Test} [test]\n *   Test to define which heading elements are linked.\n *   Any test that can be given to `hast-util-is-element` is supported.\n *   The default (no test) is to link all headings.\n *   Can be used to link only h1-h3, or for example all except h1.\n */\n\nimport extend from 'extend'\nimport {hasProperty} from 'hast-util-has-property'\nimport {headingRank} from 'hast-util-heading-rank'\nimport {convertElement} from 'hast-util-is-element'\nimport {visit, SKIP} from 'unist-util-visit'\n\n/** @type {Element} */\nconst contentDefaults = {\n  type: 'element',\n  tagName: 'span',\n  properties: {className: ['icon', 'icon-link']},\n  children: []\n}\n\n/**\n * Plugin to automatically add links to headings (h1-h6).\n *\n * @type {import('unified').Plugin<[Options?]|void[], Root>}\n */\nexport default function rehypeAutolinkHeadings(options = {}) {\n  let props = options.properties\n  const behavior = options.behaviour || options.behavior || 'prepend'\n  const content = options.content || contentDefaults\n  const group = options.group\n  const is = convertElement(options.test)\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  let method\n\n  if (behavior === 'wrap') {\n    method = wrap\n  } else if (behavior === 'before' || behavior === 'after') {\n    method = around\n  } else {\n    if (!props) {\n      props = {ariaHidden: 'true', tabIndex: -1}\n    }\n\n    method = inject\n  }\n\n  return (tree) => {\n    visit(tree, 'element', (node, index, parent) => {\n      if (\n        headingRank(node) &&\n        hasProperty(node, 'id') &&\n        is(node, index, parent)\n      ) {\n        return method(node, index, parent)\n      }\n    })\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function inject(node) {\n    node.children[behavior === 'prepend' ? 'unshift' : 'push'](\n      create(node, extend(true, {}, props), toChildren(content, node))\n    )\n\n    return [SKIP]\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function around(node, index, parent) {\n    // Uncommon.\n    /* c8 ignore next */\n    if (typeof index !== 'number' || !parent) return\n\n    const link = create(\n      node,\n      extend(true, {}, props),\n      toChildren(content, node)\n    )\n    let nodes = behavior === 'before' ? [link, node] : [node, link]\n\n    if (group) {\n      const grouping = toNode(group, node)\n\n      if (grouping && !Array.isArray(grouping) && grouping.type === 'element') {\n        grouping.children = nodes\n        nodes = [grouping]\n      }\n    }\n\n    parent.children.splice(index, 1, ...nodes)\n\n    return [SKIP, index + nodes.length]\n  }\n\n  /** @type {import('unist-util-visit/complex-types').Visitor<Element>} */\n  function wrap(node) {\n    node.children = [create(node, extend(true, {}, props), node.children)]\n    return [SKIP]\n  }\n\n  /**\n   * @param {ElementChild|ElementChild[]|Build} value\n   * @param {Element} node\n   * @returns {ElementChild[]}\n   */\n  function toChildren(value, node) {\n    const result = toNode(value, node)\n    return Array.isArray(result) ? result : [result]\n  }\n\n  /**\n   * @param {ElementChild|ElementChild[]|Build} value\n   * @param {Element} node\n   * @returns {ElementChild|ElementChild[]}\n   */\n  function toNode(value, node) {\n    if (typeof value === 'function') return value(node)\n    return extend(true, Array.isArray(value) ? [] : {}, value)\n  }\n\n  /**\n   * @param {Element} node\n   * @param {Properties} props\n   * @param {ElementChild[]} children\n   * @returns {Element}\n   */\n  function create(node, props, children) {\n    return {\n      type: 'element',\n      tagName: 'a',\n      properties: Object.assign({}, props, {\n        // Fix hast types and make them required.\n        /* c8 ignore next */\n        href: '#' + (node.properties || {}).id\n      }),\n      children\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}