{"ast":null,"code":"/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').PropertyValue} PropertyValue\n */\nimport { ccount } from 'ccount';\nimport { stringify as commas } from 'comma-separated-tokens';\nimport { svg, find } from 'property-information';\nimport { stringify as spaces } from 'space-separated-tokens';\nimport { stringifyEntities } from 'stringify-entities';\nimport { opening } from '../omission/opening.js';\nimport { closing } from '../omission/closing.js';\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'name' | 'unquoted' | 'single' | 'double', Array<[Array<string>, Array<string>]>>}\n */\n\nvar constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')], ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')], ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [[\"&'\".split(''), '\"&\\'`'.split('')], [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [['\"&'.split(''), '\"&\\'`'.split('')], ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]]\n};\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\n// eslint-disable-next-line complexity\n\nexport function element(node, index, parent, state) {\n  var schema = state.schema;\n  var omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;\n  var selfClosing = schema.space === 'svg' ? state.settings.closeEmptyElements : state.settings.voids.includes(node.tagName.toLowerCase());\n  /** @type {Array<string>} */\n\n  var parts = [];\n  /** @type {string} */\n\n  var last;\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg;\n  }\n\n  var attrs = serializeAttributes(state, node.properties);\n  var content = state.all(schema.space === 'html' && node.tagName === 'template' ? node.content : node);\n  state.schema = schema; // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n\n  if (content) selfClosing = false;\n\n  if (attrs || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '');\n\n    if (selfClosing && (schema.space === 'svg' || state.settings.closeSelfClosing)) {\n      last = attrs.charAt(attrs.length - 1);\n\n      if (!state.settings.tightSelfClosing || last === '/' || last && last !== '\"' && last !== \"'\") {\n        parts.push(' ');\n      }\n\n      parts.push('/');\n    }\n\n    parts.push('>');\n  }\n\n  parts.push(content);\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>');\n  }\n\n  return parts.join('');\n}\n/**\n * @param {State} state\n * @param {Properties | null | undefined} props\n * @returns {string}\n */\n\nfunction serializeAttributes(state, props) {\n  /** @type {Array<string>} */\n  var values = [];\n  var index = -1;\n  /** @type {string} */\n\n  var key;\n\n  if (props) {\n    for (key in props) {\n      if (props[key] !== undefined && props[key] !== null) {\n        var value = serializeAttribute(state, key, props[key]);\n        if (value) values.push(value);\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    var last = state.settings.tightAttributes ? values[index].charAt(values[index].length - 1) : null; // In tight mode, don’t add a space after quoted attributes.\n\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' ';\n    }\n  }\n\n  return values.join('');\n}\n/**\n * @param {State} state\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\n\n\nfunction serializeAttribute(state, key, value) {\n  var info = find(state.schema, key);\n  var x = state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;\n  var y = state.settings.allowDangerousCharacters ? 0 : 1;\n  var quote = state.quote;\n  /** @type {string | undefined} */\n\n  var result;\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true;\n  } else if (info.boolean || info.overloadedBoolean && typeof value !== 'string') {\n    value = Boolean(value);\n  }\n\n  if (value === undefined || value === null || value === false || typeof value === 'number' && Number.isNaN(value)) {\n    return '';\n  }\n\n  var name = stringifyEntities(info.attribute, Object.assign({}, state.settings.characterReferences, {\n    // Always encode without parse errors in non-HTML.\n    subset: constants.name[x][y]\n  })); // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n\n  if (value === true) return name; // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n\n  value = Array.isArray(value) ? (info.commaSeparated ? commas : spaces)(value, {\n    padLeft: !state.settings.tightCommaSeparatedLists\n  }) : String(value);\n  if (state.settings.collapseEmptyAttributes && !value) return name; // Check unquoted value.\n\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(value, Object.assign({}, state.settings.characterReferences, {\n      subset: constants.unquoted[x][y],\n      attribute: true\n    }));\n  } // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n\n\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (state.settings.quoteSmart && ccount(value, quote) > ccount(value, state.alternative)) {\n      quote = state.alternative;\n    }\n\n    result = quote + stringifyEntities(value, Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n      attribute: true\n    })) + quote;\n  } // Don’t add a `=` for unquoted empties.\n\n\n  return name + (result ? '=' + result : result);\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/hast-util-to-html/lib/handle/element.js"],"names":["ccount","stringify","commas","svg","find","spaces","stringifyEntities","opening","closing","constants","name","split","unquoted","single","double","element","node","index","parent","state","schema","omit","space","settings","omitOptionalTags","selfClosing","closeEmptyElements","voids","includes","tagName","toLowerCase","parts","last","attrs","serializeAttributes","properties","content","all","push","closeSelfClosing","charAt","length","tightSelfClosing","join","props","values","key","undefined","value","serializeAttribute","tightAttributes","info","x","allowParseErrors","y","allowDangerousCharacters","quote","result","overloadedBoolean","attribute","boolean","Boolean","Number","isNaN","Object","assign","characterReferences","subset","Array","isArray","commaSeparated","padLeft","tightCommaSeparatedLists","String","collapseEmptyAttributes","preferUnquoted","quoteSmart","alternative"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Element} Element\n * @typedef {import('../types.js').Properties} Properties\n * @typedef {import('../types.js').PropertyValue} PropertyValue\n */\n\nimport {ccount} from 'ccount'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {svg, find} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {opening} from '../omission/opening.js'\nimport {closing} from '../omission/closing.js'\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'name' | 'unquoted' | 'single' | 'double', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\n// eslint-disable-next-line complexity\nexport function element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg\n  }\n\n  const attrs = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  if (content) selfClosing = false\n\n  if (attrs || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attrs ? ' ' + attrs : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attrs.charAt(attrs.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} props\n * @returns {string}\n */\nfunction serializeAttributes(state, props) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (props) {\n    for (key in props) {\n      if (props[key] !== undefined && props[key] !== null) {\n        const value = serializeAttribute(state, key, props[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : null\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {PropertyValue} value\n * @returns {string}\n */\n// eslint-disable-next-line complexity\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    info.boolean ||\n    (info.overloadedBoolean && typeof value !== 'string')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === undefined ||\n    value === null ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? commas : spaces)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: constants.unquoted[x][y],\n        attribute: true\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n"]},"metadata":{},"sourceType":"module"}