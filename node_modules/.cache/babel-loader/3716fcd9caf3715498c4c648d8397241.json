{"ast":null,"code":"// @ts-nocheck\nimport refractorC from './c.js';\ncpp.displayName = 'cpp';\ncpp.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function cpp(Prism) {\n  Prism.register(refractorC);\n\n  (function (Prism) {\n    var keyword = /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/;\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(/<keyword>/g, function () {\n      return keyword.source;\n    });\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      'class-name': [{\n        pattern: RegExp(/(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(/<keyword>/g, function () {\n          return keyword.source;\n        })),\n        lookbehind: true\n      }, // This is intended to capture the class name of method implementations like:\n      //   void foo::bar() const {}\n      // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n      // it starts with an uppercase letter. This approximation should give decent results.\n      /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/, // This will capture the class name before destructors like:\n      //   Foo::~Foo() {}\n      /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i, // This also intends to capture the class name of method implementations but here the class has template\n      // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n      /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/],\n      keyword: keyword,\n      number: {\n        pattern: /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n        greedy: true\n      },\n      operator: />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n      boolean: /\\b(?:false|true)\\b/\n    });\n    Prism.languages.insertBefore('cpp', 'string', {\n      module: {\n        // https://en.cppreference.com/w/cpp/language/modules\n        pattern: RegExp(/(\\b(?:import|module)\\s+)/.source + '(?:' + // header-name\n        /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source + '|' + // module name or partition or both\n        /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(/<mod-name>/g, function () {\n          return modName;\n        }) + ')'),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: /^[<\"][\\s\\S]+/,\n          operator: /:/,\n          punctuation: /\\./\n        }\n      },\n      'raw-string': {\n        pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n        alias: 'string',\n        greedy: true\n      }\n    });\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'generic-function': {\n        pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            alias: 'class-name',\n            inside: Prism.languages.cpp\n          }\n        }\n      }\n    });\n    Prism.languages.insertBefore('cpp', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    });\n    Prism.languages.insertBefore('cpp', 'class-name', {\n      // the base clause is an optional list of parent classes\n      // https://en.cppreference.com/w/cpp/language/class\n      'base-clause': {\n        pattern: /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: Prism.languages.extend('cpp', {})\n      }\n    });\n    Prism.languages.insertBefore('inside', 'double-colon', {\n      // All untokenized words that are not namespaces should be class names\n      'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n    }, Prism.languages.cpp['base-clause']);\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/cpp.js"],"names":["refractorC","cpp","displayName","aliases","Prism","register","keyword","modName","source","replace","languages","extend","pattern","RegExp","lookbehind","number","greedy","operator","boolean","insertBefore","module","inside","string","punctuation","alias","function","generic"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport refractorC from './c.js'\ncpp.displayName = 'cpp'\ncpp.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function cpp(Prism) {\n  Prism.register(refractorC)\n  ;(function (Prism) {\n    var keyword =\n      /\\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\\b/\n    var modName = /\\b(?!<keyword>)\\w+(?:\\s*\\.\\s*\\w+)*\\b/.source.replace(\n      /<keyword>/g,\n      function () {\n        return keyword.source\n      }\n    )\n    Prism.languages.cpp = Prism.languages.extend('c', {\n      'class-name': [\n        {\n          pattern: RegExp(\n            /(\\b(?:class|concept|enum|struct|typename)\\s+)(?!<keyword>)\\w+/.source.replace(\n              /<keyword>/g,\n              function () {\n                return keyword.source\n              }\n            )\n          ),\n          lookbehind: true\n        },\n        // This is intended to capture the class name of method implementations like:\n        //   void foo::bar() const {}\n        // However! The `foo` in the above example could also be a namespace, so we only capture the class name if\n        // it starts with an uppercase letter. This approximation should give decent results.\n        /\\b[A-Z]\\w*(?=\\s*::\\s*\\w+\\s*\\()/,\n        // This will capture the class name before destructors like:\n        //   Foo::~Foo() {}\n        /\\b[A-Z_]\\w*(?=\\s*::\\s*~\\w+\\s*\\()/i,\n        // This also intends to capture the class name of method implementations but here the class has template\n        // parameters, so it can't be a namespace (until C++ adds generic namespaces).\n        /\\b\\w+(?=\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\\s*::\\s*\\w+\\s*\\()/\n      ],\n      keyword: keyword,\n      number: {\n        pattern:\n          /(?:\\b0b[01']+|\\b0x(?:[\\da-f']+(?:\\.[\\da-f']*)?|\\.[\\da-f']+)(?:p[+-]?[\\d']+)?|(?:\\b[\\d']+(?:\\.[\\d']*)?|\\B\\.[\\d']+)(?:e[+-]?[\\d']+)?)[ful]{0,4}/i,\n        greedy: true\n      },\n      operator:\n        />>=?|<<=?|->|--|\\+\\+|&&|\\|\\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\\b/,\n      boolean: /\\b(?:false|true)\\b/\n    })\n    Prism.languages.insertBefore('cpp', 'string', {\n      module: {\n        // https://en.cppreference.com/w/cpp/language/modules\n        pattern: RegExp(\n          /(\\b(?:import|module)\\s+)/.source +\n            '(?:' +\n            // header-name\n            /\"(?:\\\\(?:\\r\\n|[\\s\\S])|[^\"\\\\\\r\\n])*\"|<[^<>\\r\\n]*>/.source +\n            '|' +\n            // module name or partition or both\n            /<mod-name>(?:\\s*:\\s*<mod-name>)?|:\\s*<mod-name>/.source.replace(\n              /<mod-name>/g,\n              function () {\n                return modName\n              }\n            ) +\n            ')'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          string: /^[<\"][\\s\\S]+/,\n          operator: /:/,\n          punctuation: /\\./\n        }\n      },\n      'raw-string': {\n        pattern: /R\"([^()\\\\ ]{0,16})\\([\\s\\S]*?\\)\\1\"/,\n        alias: 'string',\n        greedy: true\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'keyword', {\n      'generic-function': {\n        pattern: /\\b(?!operator\\b)[a-z_]\\w*\\s*<(?:[^<>]|<[^<>]*>)*>(?=\\s*\\()/i,\n        inside: {\n          function: /^\\w+/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            alias: 'class-name',\n            inside: Prism.languages.cpp\n          }\n        }\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'operator', {\n      'double-colon': {\n        pattern: /::/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('cpp', 'class-name', {\n      // the base clause is an optional list of parent classes\n      // https://en.cppreference.com/w/cpp/language/class\n      'base-clause': {\n        pattern:\n          /(\\b(?:class|struct)\\s+\\w+\\s*:\\s*)[^;{}\"'\\s]+(?:\\s+[^;{}\"'\\s]+)*(?=\\s*[;{])/,\n        lookbehind: true,\n        greedy: true,\n        inside: Prism.languages.extend('cpp', {})\n      }\n    })\n    Prism.languages.insertBefore(\n      'inside',\n      'double-colon',\n      {\n        // All untokenized words that are not namespaces should be class names\n        'class-name': /\\b[a-z_]\\w*\\b(?!\\s*::)/i\n      },\n      Prism.languages.cpp['base-clause']\n    )\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"module"}