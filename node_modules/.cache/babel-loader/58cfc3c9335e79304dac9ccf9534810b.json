{"ast":null,"code":"/**! \n * @uiw/copy-to-clipboard v1.0.14 \n * Copy to clipboard. \n * \n * Copyright (c) 2023 Kenny Wang \n * https://github.com/uiwjs/copy-to-clipboard.git \n * \n * @website: https://uiwjs.github.io/copy-to-clipboard\n \n * Licensed under the MIT license \n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.copyTextToClipboard = factory());\n})(this, function () {\n  'use strict';\n  /**\n   * *** This styling is an extra step which is likely not required. ***\n   * https://github.com/w3c/clipboard-apis/blob/master/explainer.adoc#writing-to-the-clipboard\n   * \n   * Why is it here? To ensure:\n   * \n   * 1. the element is able to have focus and selection.\n   * 2. if element was to flash render it has minimal visual impact.\n   * 3. less flakyness with selection and copying which **might** occur if\n   *     the textarea element is not visible.\n   *\n   *   The likelihood is the element won't even render, not even a flash,\n   *   so some of these are just precautions. However in IE the element\n   *   is visible whilst the popup box asking the user for permission for\n   *   the web page to copy to the clipboard.\n   *  \n   *   Place in top-left corner of screen regardless of scroll position.\n   *\n   * @typedef CopyTextToClipboard\n   * @property {(text: string, method?: (isCopy: boolean) => void) => void} void\n   * @returns {void}\n   * \n   * @param {string} text \n   * @param {CopyTextToClipboard} cb \n   */\n\n  function copyTextToClipboard(text, cb) {\n    var el = document.createElement('textarea');\n    el.value = text;\n    el.setAttribute('readonly', '');\n    el.style = {\n      position: 'absolute',\n      left: '-9999px'\n    };\n    document.body.appendChild(el);\n    var selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\n    el.select();\n    var isCopy = false;\n\n    try {\n      var successful = document.execCommand('copy');\n      isCopy = !!successful;\n    } catch (err) {\n      isCopy = false;\n    }\n\n    document.body.removeChild(el);\n\n    if (selected && document.getSelection) {\n      document.getSelection().removeAllRanges();\n      document.getSelection().addRange(selected);\n    }\n\n    cb && cb(isCopy);\n  }\n\n  return copyTextToClipboard;\n});","map":{"version":3,"sources":["../src/main.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACe,WAAS,mBAAT,CAA6B,IAA7B,EAAmC,EAAnC,EAAuC;AACpD,QAAM,EAAE,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAX;AACA,IAAA,EAAE,CAAC,KAAH,GAAW,IAAX;AACA,IAAA,EAAE,CAAC,YAAH,CAAgB,UAAhB,EAA4B,EAA5B;AACA,IAAA,EAAE,CAAC,KAAH,GAAW;AACT,MAAA,QAAQ,EAAE,UADD;AAET,MAAA,IAAI,EAAE;AAFG,KAAX;AAIA,IAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,EAA1B;AACA,QAAM,QAAQ,GAAG,QAAQ,CAAC,YAAT,GAAwB,UAAxB,GAAqC,CAArC,GAAyC,QAAQ,CAAC,YAAT,GAAwB,UAAxB,CAAmC,CAAnC,CAAzC,GAAiF,KAAlG;AACA,IAAA,EAAE,CAAC,MAAH;AACA,QAAI,MAAM,GAAG,KAAb;;AACA,QAAI;AACF,UAAM,UAAU,GAAG,QAAQ,CAAC,WAAT,CAAqB,MAArB,CAAnB;AACA,MAAA,MAAM,GAAG,CAAC,CAAC,UAAX;AACD,KAHD,CAGE,OAAO,GAAP,EAAY;AACZ,MAAA,MAAM,GAAG,KAAT;AACD;;AACD,IAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,EAA1B;;AACA,QAAI,QAAQ,IAAI,QAAQ,CAAC,YAAzB,EAAuC;AACrC,MAAA,QAAQ,CAAC,YAAT,GAAwB,eAAxB;AACA,MAAA,QAAQ,CAAC,YAAT,GAAwB,QAAxB,CAAiC,QAAjC;AACD;;AACD,IAAA,EAAE,IAAI,EAAE,CAAC,MAAD,CAAR;AACF","sourcesContent":["/**\n * *** This styling is an extra step which is likely not required. ***\n * https://github.com/w3c/clipboard-apis/blob/master/explainer.adoc#writing-to-the-clipboard\n * \n * Why is it here? To ensure:\n * \n * 1. the element is able to have focus and selection.\n * 2. if element was to flash render it has minimal visual impact.\n * 3. less flakyness with selection and copying which **might** occur if\n *     the textarea element is not visible.\n *\n *   The likelihood is the element won't even render, not even a flash,\n *   so some of these are just precautions. However in IE the element\n *   is visible whilst the popup box asking the user for permission for\n *   the web page to copy to the clipboard.\n *  \n *   Place in top-left corner of screen regardless of scroll position.\n *\n * @typedef CopyTextToClipboard\n * @property {(text: string, method?: (isCopy: boolean) => void) => void} void\n * @returns {void}\n * \n * @param {string} text \n * @param {CopyTextToClipboard} cb \n */\nexport default function copyTextToClipboard(text, cb) {\n  const el = document.createElement('textarea');\n  el.value = text;\n  el.setAttribute('readonly', '');\n  el.style = {\n    position: 'absolute',\n    left: '-9999px',\n  }\n  document.body.appendChild(el);\n  const selected = document.getSelection().rangeCount > 0 ? document.getSelection().getRangeAt(0) : false;\n  el.select();\n  let isCopy = false;\n  try {\n    const successful = document.execCommand('copy');\n    isCopy = !!successful;\n  } catch (err) {\n    isCopy = false;\n  }\n  document.body.removeChild(el);\n  if (selected && document.getSelection) {\n    document.getSelection().removeAllRanges();\n    document.getSelection().addRange(selected);\n  }\n  cb && cb(isCopy);\n};\n"]},"metadata":{},"sourceType":"script"}