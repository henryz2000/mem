{"ast":null,"code":"import _classCallCheck from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport { insertTextAtPosition } from '../utils/InsertTextAtPosition';\nimport { bold } from './bold';\nimport { code, codeBlock } from './code';\nimport { comment } from './comment';\nimport { divider } from './divider';\nimport { fullscreen } from './fullscreen';\nimport { group } from './group';\nimport { hr } from './hr';\nimport { image } from './image';\nimport { italic } from './italic';\nimport { link } from './link';\nimport { checkedListCommand, orderedListCommand, unorderedListCommand } from './list';\nimport { codeEdit, codeLive, codePreview } from './preview';\nimport { quote } from './quote';\nimport { strikethrough } from './strikeThrough';\nimport { title } from './title';\nimport { title1 } from './title1';\nimport { title2 } from './title2';\nimport { title3 } from './title3';\nimport { title4 } from './title4';\nimport { title5 } from './title5';\nimport { title6 } from './title6';\n\nvar getCommands = function getCommands() {\n  return [bold, italic, strikethrough, hr, group([title1, title2, title3, title4, title5, title6], {\n    name: 'title',\n    groupName: 'title',\n    buttonProps: {\n      'aria-label': 'Insert title',\n      title: 'Insert title'\n    }\n  }), divider, link, quote, code, codeBlock, comment, image, divider, unorderedListCommand, orderedListCommand, checkedListCommand];\n};\n\nvar getExtraCommands = function getExtraCommands() {\n  return [codeEdit, codeLive, codePreview, divider, fullscreen];\n};\n\nfunction getStateFromTextArea(textArea) {\n  var _textArea$value;\n\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd\n    },\n    text: textArea.value,\n    selectedText: (_textArea$value = textArea.value) == null ? void 0 : _textArea$value.slice(textArea.selectionStart, textArea.selectionEnd)\n  };\n}\n\nvar TextAreaTextApi = /*#__PURE__*/function () {\n  function TextAreaTextApi(textArea) {\n    _classCallCheck(this, TextAreaTextApi);\n\n    this.textArea = void 0;\n    this.textArea = textArea;\n  }\n  /**\n   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the\n   * selection start and selection end will be the same and will both point to the end\n   * @param text Text that should replace the current selection\n   */\n\n\n  _createClass(TextAreaTextApi, [{\n    key: \"replaceSelection\",\n    value: function replaceSelection(text) {\n      insertTextAtPosition(this.textArea, text);\n      return getStateFromTextArea(this.textArea);\n    }\n    /**\n     * Selects the specified text range\n     * @param selection\n     */\n\n  }, {\n    key: \"setSelectionRange\",\n    value: function setSelectionRange(selection) {\n      this.textArea.focus();\n      this.textArea.selectionStart = selection.start;\n      this.textArea.selectionEnd = selection.end;\n      return getStateFromTextArea(this.textArea);\n    }\n  }]);\n\n  return TextAreaTextApi;\n}();\n\nvar TextAreaCommandOrchestrator = /*#__PURE__*/function () {\n  function TextAreaCommandOrchestrator(textArea) {\n    _classCallCheck(this, TextAreaCommandOrchestrator);\n\n    this.textArea = void 0;\n    this.textApi = void 0;\n    this.textArea = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n  }\n\n  _createClass(TextAreaCommandOrchestrator, [{\n    key: \"getState\",\n    value: function getState() {\n      if (!this.textArea) return false;\n      return getStateFromTextArea(this.textArea);\n    }\n  }, {\n    key: \"executeCommand\",\n    value: function executeCommand(command, dispatch, state, shortcuts) {\n      console.log('state:', state);\n      command.execute && command.execute(_extends({\n        command: command\n      }, getStateFromTextArea(this.textArea)), this.textApi, dispatch, state, shortcuts);\n    }\n  }]);\n\n  return TextAreaCommandOrchestrator;\n}();\n\nexport { title, title1, title2, title3, title4, title5, title6, bold, codeBlock, comment, italic, strikethrough, hr, group, divider, link, quote, code, image, unorderedListCommand, orderedListCommand, checkedListCommand, codeEdit, codeLive, codePreview, fullscreen, // Tool method.\ngetCommands, getExtraCommands, getStateFromTextArea, TextAreaCommandOrchestrator, TextAreaTextApi };","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@uiw/react-md-editor/esm/commands/index.js"],"names":["_extends","insertTextAtPosition","bold","code","codeBlock","comment","divider","fullscreen","group","hr","image","italic","link","checkedListCommand","orderedListCommand","unorderedListCommand","codeEdit","codeLive","codePreview","quote","strikethrough","title","title1","title2","title3","title4","title5","title6","getCommands","name","groupName","buttonProps","getExtraCommands","getStateFromTextArea","textArea","_textArea$value","selection","start","selectionStart","end","selectionEnd","text","value","selectedText","slice","TextAreaTextApi","focus","TextAreaCommandOrchestrator","textApi","command","dispatch","state","shortcuts","console","log","execute"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport { insertTextAtPosition } from '../utils/InsertTextAtPosition';\nimport { bold } from './bold';\nimport { code, codeBlock } from './code';\nimport { comment } from './comment';\nimport { divider } from './divider';\nimport { fullscreen } from './fullscreen';\nimport { group } from './group';\nimport { hr } from './hr';\nimport { image } from './image';\nimport { italic } from './italic';\nimport { link } from './link';\nimport { checkedListCommand, orderedListCommand, unorderedListCommand } from './list';\nimport { codeEdit, codeLive, codePreview } from './preview';\nimport { quote } from './quote';\nimport { strikethrough } from './strikeThrough';\nimport { title } from './title';\nimport { title1 } from './title1';\nimport { title2 } from './title2';\nimport { title3 } from './title3';\nimport { title4 } from './title4';\nimport { title5 } from './title5';\nimport { title6 } from './title6';\nvar getCommands = () => [bold, italic, strikethrough, hr, group([title1, title2, title3, title4, title5, title6], {\n  name: 'title',\n  groupName: 'title',\n  buttonProps: {\n    'aria-label': 'Insert title',\n    title: 'Insert title'\n  }\n}), divider, link, quote, code, codeBlock, comment, image, divider, unorderedListCommand, orderedListCommand, checkedListCommand];\nvar getExtraCommands = () => [codeEdit, codeLive, codePreview, divider, fullscreen];\nfunction getStateFromTextArea(textArea) {\n  var _textArea$value;\n  return {\n    selection: {\n      start: textArea.selectionStart,\n      end: textArea.selectionEnd\n    },\n    text: textArea.value,\n    selectedText: (_textArea$value = textArea.value) == null ? void 0 : _textArea$value.slice(textArea.selectionStart, textArea.selectionEnd)\n  };\n}\nclass TextAreaTextApi {\n  constructor(textArea) {\n    this.textArea = void 0;\n    this.textArea = textArea;\n  }\n\n  /**\n   * Replaces the current selection with the new text. This will make the new selectedText to be empty, the\n   * selection start and selection end will be the same and will both point to the end\n   * @param text Text that should replace the current selection\n   */\n  replaceSelection(text) {\n    insertTextAtPosition(this.textArea, text);\n    return getStateFromTextArea(this.textArea);\n  }\n\n  /**\n   * Selects the specified text range\n   * @param selection\n   */\n  setSelectionRange(selection) {\n    this.textArea.focus();\n    this.textArea.selectionStart = selection.start;\n    this.textArea.selectionEnd = selection.end;\n    return getStateFromTextArea(this.textArea);\n  }\n}\nclass TextAreaCommandOrchestrator {\n  constructor(textArea) {\n    this.textArea = void 0;\n    this.textApi = void 0;\n    this.textArea = textArea;\n    this.textApi = new TextAreaTextApi(textArea);\n  }\n  getState() {\n    if (!this.textArea) return false;\n    return getStateFromTextArea(this.textArea);\n  }\n  executeCommand(command, dispatch, state, shortcuts) {\n    console.log('state:', state);\n    command.execute && command.execute(_extends({\n      command\n    }, getStateFromTextArea(this.textArea)), this.textApi, dispatch, state, shortcuts);\n  }\n}\nexport { title, title1, title2, title3, title4, title5, title6, bold, codeBlock, comment, italic, strikethrough, hr, group, divider, link, quote, code, image, unorderedListCommand, orderedListCommand, checkedListCommand, codeEdit, codeLive, codePreview, fullscreen,\n// Tool method.\ngetCommands, getExtraCommands, getStateFromTextArea, TextAreaCommandOrchestrator, TextAreaTextApi };"]},"metadata":{},"sourceType":"module"}