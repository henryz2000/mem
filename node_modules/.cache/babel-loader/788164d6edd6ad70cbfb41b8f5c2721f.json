{"ast":null,"code":"// @ts-nocheck\nswift.displayName = 'swift';\nswift.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function swift(Prism) {\n  Prism.languages.swift = {\n    comment: {\n      // Nested comments are supported up to 2 levels\n      pattern: /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string-literal': [// https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n    {\n      pattern: RegExp(/(^|[^\"#])/.source + '(?:' + // single-line string\n      /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/.source + '|' + // multi-line string\n      /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/.source + ')' + /(?![\"#])/.source),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n          lookbehind: true,\n          inside: null // see below\n\n        },\n        'interpolation-punctuation': {\n          pattern: /^\\)|\\\\\\($/,\n          alias: 'punctuation'\n        },\n        punctuation: /\\\\(?=[\\r\\n])/,\n        string: /[\\s\\S]+/\n      }\n    }, {\n      pattern: RegExp(/(^|[^\"#])(#+)/.source + '(?:' + // single-line string\n      /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/.source + '|' + // multi-line string\n      /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source + ')' + '\\\\2'),\n      lookbehind: true,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n          lookbehind: true,\n          inside: null // see below\n\n        },\n        'interpolation-punctuation': {\n          pattern: /^\\)|\\\\#+\\($/,\n          alias: 'punctuation'\n        },\n        string: /[\\s\\S]+/\n      }\n    }],\n    directive: {\n      // directives with conditions\n      pattern: RegExp(/#/.source + '(?:' + (/(?:elseif|if)\\b/.source + '(?:[ \\t]*' + // This regex is a little complex. It's equivalent to this:\n      //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n      // where <round> is a general parentheses expression.\n      /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/.source + ')+') + '|' + /(?:else|endif)\\b/.source + ')'),\n      alias: 'property',\n      inside: {\n        'directive-name': /^#\\w+/,\n        boolean: /\\b(?:false|true)\\b/,\n        number: /\\b\\d+(?:\\.\\d+)*\\b/,\n        operator: /!|&&|\\|\\||[<>]=?/,\n        punctuation: /[(),]/\n      }\n    },\n    literal: {\n      pattern: /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n      alias: 'constant'\n    },\n    'other-directive': {\n      pattern: /#\\w+\\b/,\n      alias: 'property'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'atrule'\n    },\n    'function-definition': {\n      pattern: /(\\bfunc\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    label: {\n      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n      pattern: /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n      lookbehind: true,\n      alias: 'important'\n    },\n    keyword: /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    nil: {\n      pattern: /\\bnil\\b/,\n      alias: 'constant'\n    },\n    'short-argument': /\\$\\d+\\b/,\n    omit: {\n      pattern: /\\b_\\b/,\n      alias: 'keyword'\n    },\n    number: /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n    'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n    // This regex only supports ASCII operators.\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    punctuation: /[{}[\\]();,.:\\\\]/\n  };\n  Prism.languages.swift['string-literal'].forEach(function (rule) {\n    rule.inside['interpolation'].inside = Prism.languages.swift;\n  });\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/swift.js"],"names":["swift","displayName","aliases","Prism","languages","comment","pattern","lookbehind","greedy","RegExp","source","inside","interpolation","alias","punctuation","string","directive","boolean","number","operator","literal","attribute","label","keyword","nil","omit","function","constant","forEach","rule"],"mappings":"AAAA;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;AAEA;;AACA,eAAe,SAASF,KAAT,CAAeG,KAAf,EAAsB;AACnCA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,GAAwB;AACtBK,IAAAA,OAAO,EAAE;AACP;AACAC,MAAAA,OAAO,EACL,sFAHK;AAIPC,MAAAA,UAAU,EAAE,IAJL;AAKPC,MAAAA,MAAM,EAAE;AALD,KADa;AAQtB,sBAAkB,CAChB;AACA;AACEF,MAAAA,OAAO,EAAEG,MAAM,CACb,YAAYC,MAAZ,GACE,KADF,GAEE;AACA,oEACGA,MAJL,GAKE,GALF,GAME;AACA,uEACGA,MARL,GASE,GATF,GAUE,WAAWA,MAXA,CADjB;AAcEH,MAAAA,UAAU,EAAE,IAdd;AAeEC,MAAAA,MAAM,EAAE,IAfV;AAgBEG,MAAAA,MAAM,EAAE;AACNC,QAAAA,aAAa,EAAE;AACbN,UAAAA,OAAO,EAAE,mCADI;AAEbC,UAAAA,UAAU,EAAE,IAFC;AAGbI,UAAAA,MAAM,EAAE,IAHK,CAGA;;AAHA,SADT;AAON,qCAA6B;AAC3BL,UAAAA,OAAO,EAAE,WADkB;AAE3BO,UAAAA,KAAK,EAAE;AAFoB,SAPvB;AAWNC,QAAAA,WAAW,EAAE,cAXP;AAYNC,QAAAA,MAAM,EAAE;AAZF;AAhBV,KAFgB,EAiChB;AACET,MAAAA,OAAO,EAAEG,MAAM,CACb,gBAAgBC,MAAhB,GACE,KADF,GAEE;AACA,sEACGA,MAJL,GAKE,GALF,GAME;AACA,iEAA2DA,MAP7D,GAQE,GARF,GASE,KAVW,CADjB;AAaEH,MAAAA,UAAU,EAAE,IAbd;AAcEC,MAAAA,MAAM,EAAE,IAdV;AAeEG,MAAAA,MAAM,EAAE;AACNC,QAAAA,aAAa,EAAE;AACbN,UAAAA,OAAO,EAAE,qCADI;AAEbC,UAAAA,UAAU,EAAE,IAFC;AAGbI,UAAAA,MAAM,EAAE,IAHK,CAGA;;AAHA,SADT;AAON,qCAA6B;AAC3BL,UAAAA,OAAO,EAAE,aADkB;AAE3BO,UAAAA,KAAK,EAAE;AAFoB,SAPvB;AAWNE,QAAAA,MAAM,EAAE;AAXF;AAfV,KAjCgB,CARI;AAuEtBC,IAAAA,SAAS,EAAE;AACT;AACAV,MAAAA,OAAO,EAAEG,MAAM,CACb,IAAIC,MAAJ,GACE,KADF,IAEG,kBAAkBA,MAAlB,GACC,WADD,GAEC;AACA;AACA;AACA,oHACGA,MANJ,GAOC,IATJ,IAUE,GAVF,GAWE,mBAAmBA,MAXrB,GAYE,GAbW,CAFN;AAiBTG,MAAAA,KAAK,EAAE,UAjBE;AAkBTF,MAAAA,MAAM,EAAE;AACN,0BAAkB,OADZ;AAENM,QAAAA,OAAO,EAAE,oBAFH;AAGNC,QAAAA,MAAM,EAAE,mBAHF;AAINC,QAAAA,QAAQ,EAAE,kBAJJ;AAKNL,QAAAA,WAAW,EAAE;AALP;AAlBC,KAvEW;AAiGtBM,IAAAA,OAAO,EAAE;AACPd,MAAAA,OAAO,EACL,0FAFK;AAGPO,MAAAA,KAAK,EAAE;AAHA,KAjGa;AAsGtB,uBAAmB;AACjBP,MAAAA,OAAO,EAAE,QADQ;AAEjBO,MAAAA,KAAK,EAAE;AAFU,KAtGG;AA0GtBQ,IAAAA,SAAS,EAAE;AACTf,MAAAA,OAAO,EAAE,MADA;AAETO,MAAAA,KAAK,EAAE;AAFE,KA1GW;AA8GtB,2BAAuB;AACrBP,MAAAA,OAAO,EAAE,gBADY;AAErBC,MAAAA,UAAU,EAAE,IAFS;AAGrBM,MAAAA,KAAK,EAAE;AAHc,KA9GD;AAmHtBS,IAAAA,KAAK,EAAE;AACL;AACAhB,MAAAA,OAAO,EACL,0EAHG;AAILC,MAAAA,UAAU,EAAE,IAJP;AAKLM,MAAAA,KAAK,EAAE;AALF,KAnHe;AA0HtBU,IAAAA,OAAO,EACL,snBA3HoB;AA4HtBN,IAAAA,OAAO,EAAE,oBA5Ha;AA6HtBO,IAAAA,GAAG,EAAE;AACHlB,MAAAA,OAAO,EAAE,SADN;AAEHO,MAAAA,KAAK,EAAE;AAFJ,KA7HiB;AAiItB,sBAAkB,SAjII;AAkItBY,IAAAA,IAAI,EAAE;AACJnB,MAAAA,OAAO,EAAE,OADL;AAEJO,MAAAA,KAAK,EAAE;AAFH,KAlIgB;AAsItBK,IAAAA,MAAM,EACJ,iFAvIoB;AAwItB;AACA,kBAAc,iCAzIQ;AA0ItBQ,IAAAA,QAAQ,EAAE,uBA1IY;AA2ItBC,IAAAA,QAAQ,EAAE,qCA3IY;AA4ItB;AACA;AACA;AACAR,IAAAA,QAAQ,EAAE,yCA/IY;AAgJtBL,IAAAA,WAAW,EAAE;AAhJS,GAAxB;AAkJAX,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,CAAsB,gBAAtB,EAAwC4B,OAAxC,CAAgD,UAAUC,IAAV,EAAgB;AAC9DA,IAAAA,IAAI,CAAClB,MAAL,CAAY,eAAZ,EAA6BA,MAA7B,GAAsCR,KAAK,CAACC,SAAN,CAAgBJ,KAAtD;AACD,GAFD;AAGD","sourcesContent":["// @ts-nocheck\nswift.displayName = 'swift'\nswift.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function swift(Prism) {\n  Prism.languages.swift = {\n    comment: {\n      // Nested comments are supported up to 2 levels\n      pattern:\n        /(^|[^\\\\:])(?:\\/\\/.*|\\/\\*(?:[^/*]|\\/(?!\\*)|\\*(?!\\/)|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*\\*\\/)/,\n      lookbehind: true,\n      greedy: true\n    },\n    'string-literal': [\n      // https://docs.swift.org/swift-book/LanguageGuide/StringsAndCharacters.html\n      {\n        pattern: RegExp(\n          /(^|[^\"#])/.source +\n            '(?:' +\n            // single-line string\n            /\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^(])|[^\\\\\\r\\n\"])*\"/\n              .source +\n            '|' +\n            // multi-line string\n            /\"\"\"(?:\\\\(?:\\((?:[^()]|\\([^()]*\\))*\\)|[^(])|[^\\\\\"]|\"(?!\"\"))*\"\"\"/\n              .source +\n            ')' +\n            /(?![\"#])/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /(\\\\\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n\n          'interpolation-punctuation': {\n            pattern: /^\\)|\\\\\\($/,\n            alias: 'punctuation'\n          },\n          punctuation: /\\\\(?=[\\r\\n])/,\n          string: /[\\s\\S]+/\n        }\n      },\n      {\n        pattern: RegExp(\n          /(^|[^\"#])(#+)/.source +\n            '(?:' +\n            // single-line string\n            /\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|\\r\\n|[^#])|[^\\\\\\r\\n])*?\"/\n              .source +\n            '|' +\n            // multi-line string\n            /\"\"\"(?:\\\\(?:#+\\((?:[^()]|\\([^()]*\\))*\\)|[^#])|[^\\\\])*?\"\"\"/.source +\n            ')' +\n            '\\\\2'\n        ),\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          interpolation: {\n            pattern: /(\\\\#+\\()(?:[^()]|\\([^()]*\\))*(?=\\))/,\n            lookbehind: true,\n            inside: null // see below\n          },\n\n          'interpolation-punctuation': {\n            pattern: /^\\)|\\\\#+\\($/,\n            alias: 'punctuation'\n          },\n          string: /[\\s\\S]+/\n        }\n      }\n    ],\n    directive: {\n      // directives with conditions\n      pattern: RegExp(\n        /#/.source +\n          '(?:' +\n          (/(?:elseif|if)\\b/.source +\n            '(?:[ \\t]*' +\n            // This regex is a little complex. It's equivalent to this:\n            //   (?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*<round>)?|<round>)(?:[ \\t]*(?:&&|\\|\\|))?\n            // where <round> is a general parentheses expression.\n            /(?:![ \\t]*)?(?:\\b\\w+\\b(?:[ \\t]*\\((?:[^()]|\\([^()]*\\))*\\))?|\\((?:[^()]|\\([^()]*\\))*\\))(?:[ \\t]*(?:&&|\\|\\|))?/\n              .source +\n            ')+') +\n          '|' +\n          /(?:else|endif)\\b/.source +\n          ')'\n      ),\n      alias: 'property',\n      inside: {\n        'directive-name': /^#\\w+/,\n        boolean: /\\b(?:false|true)\\b/,\n        number: /\\b\\d+(?:\\.\\d+)*\\b/,\n        operator: /!|&&|\\|\\||[<>]=?/,\n        punctuation: /[(),]/\n      }\n    },\n    literal: {\n      pattern:\n        /#(?:colorLiteral|column|dsohandle|file(?:ID|Literal|Path)?|function|imageLiteral|line)\\b/,\n      alias: 'constant'\n    },\n    'other-directive': {\n      pattern: /#\\w+\\b/,\n      alias: 'property'\n    },\n    attribute: {\n      pattern: /@\\w+/,\n      alias: 'atrule'\n    },\n    'function-definition': {\n      pattern: /(\\bfunc\\s+)\\w+/,\n      lookbehind: true,\n      alias: 'function'\n    },\n    label: {\n      // https://docs.swift.org/swift-book/LanguageGuide/ControlFlow.html#ID141\n      pattern:\n        /\\b(break|continue)\\s+\\w+|\\b[a-zA-Z_]\\w*(?=\\s*:\\s*(?:for|repeat|while)\\b)/,\n      lookbehind: true,\n      alias: 'important'\n    },\n    keyword:\n      /\\b(?:Any|Protocol|Self|Type|actor|as|assignment|associatedtype|associativity|async|await|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic|else|enum|extension|fallthrough|fileprivate|final|for|func|get|guard|higherThan|if|import|in|indirect|infix|init|inout|internal|is|isolated|lazy|left|let|lowerThan|mutating|none|nonisolated|nonmutating|open|operator|optional|override|postfix|precedencegroup|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|set|some|static|struct|subscript|super|switch|throw|throws|try|typealias|unowned|unsafe|var|weak|where|while|willSet)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    nil: {\n      pattern: /\\bnil\\b/,\n      alias: 'constant'\n    },\n    'short-argument': /\\$\\d+\\b/,\n    omit: {\n      pattern: /\\b_\\b/,\n      alias: 'keyword'\n    },\n    number:\n      /\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,\n    // A class name must start with an upper-case letter and be either 1 letter long or contain a lower-case letter.\n    'class-name': /\\b[A-Z](?:[A-Z_\\d]*[a-z]\\w*)?\\b/,\n    function: /\\b[a-z_]\\w*(?=\\s*\\()/i,\n    constant: /\\b(?:[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,\n    // Operators are generic in Swift. Developers can even create new operators (e.g. +++).\n    // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html#ID481\n    // This regex only supports ASCII operators.\n    operator: /[-+*/%=!<>&|^~?]+|\\.[.\\-+*/%=!<>&|^~?]+/,\n    punctuation: /[{}[\\]();,.:\\\\]/\n  }\n  Prism.languages.swift['string-literal'].forEach(function (rule) {\n    rule.inside['interpolation'].inside = Prism.languages.swift\n  })\n}\n"]},"metadata":{},"sourceType":"module"}