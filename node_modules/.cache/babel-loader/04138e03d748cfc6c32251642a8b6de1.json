{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/**\n * @callback BackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   * `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   * `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   * `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent them from\n *   *clobbering*.\n *\n *   The default is `'user-content-'`.\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {string} [label='Footnotes']\n *   Textual label to use for the footnotes section.\n *\n *   The default value is `'Footnotes'`.\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {string} [labelAttributes='class=\"sr-only\"']\n *   Attributes to use on the footnote label.\n *\n *   Change it to show the label and add other attributes.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different attributes.\n *\n *   > üëâ **Note**: `id=\"footnote-label\"` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string} [labelTagName='h2']\n *   HTML tag name to use for the footnote label element.\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {BackLabelTemplate | string} [backLabel]\n *   Textual label to describe the backreference back to references.\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *  }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `aria-label` attribute on each backreference\n *   (the `‚Ü©` links).\n *   It affects users of assistive technology.\n */\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nvar own = {}.hasOwnProperty;\n/** @type {Options} */\n\nvar emptyOptions = {};\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\n\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return 'Back to reference ' + (referenceIndex + 1) + (rereferenceIndex > 1 ? '-' + rereferenceIndex : '');\n}\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\n\nexport function gfmFootnoteHtml(options) {\n  var config = options || emptyOptions;\n  var label = config.label || 'Footnotes';\n  var labelTagName = config.labelTagName || 'h2';\n  var labelAttributes = config.labelAttributes === null || config.labelAttributes === undefined ? 'class=\"sr-only\"' : config.labelAttributes;\n  var backLabel = config.backLabel || defaultBackLabel;\n  var clobberPrefix = config.clobberPrefix === null || config.clobberPrefix === undefined ? 'user-content-' : config.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition: function gfmFootnoteDefinition() {\n        var stack =\n        /** @type {Array<boolean>} */\n        this.getData('tightStack');\n        stack.push(false);\n      },\n      gfmFootnoteDefinitionLabelString: function gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n      gfmFootnoteCallString: function gfmFootnoteCallString() {\n        this.buffer();\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition: function gfmFootnoteDefinition() {\n        var definitions =\n        /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions');\n        var footnoteStack =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n        var tightStack =\n        /** @type {Array<boolean>} */\n        this.getData('tightStack');\n        var current = footnoteStack.pop();\n        var value = this.resume();\n\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true); // ‚ÄúHack‚Äù to prevent a line ending from showing up if we‚Äôre in a definition in\n        // an empty list item.\n\n        this.setData('lastWasTag');\n      },\n      gfmFootnoteDefinitionLabelString: function gfmFootnoteDefinitionLabelString(token) {\n        var footnoteStack =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteDefinitionStack');\n\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n\n        this.buffer(); // Get ready for a value.\n      },\n      gfmFootnoteCallString: function gfmFootnoteCallString(token) {\n        var calls =\n        /** @type {Array<string>|undefined} */\n        this.getData('gfmFootnoteCallOrder');\n        var counts =\n        /** @type {Record<string, number>|undefined} */\n        this.getData('gfmFootnoteCallCounts');\n        var id = normalizeIdentifier(this.sliceSerialize(token));\n        /** @type {number} */\n\n        var counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        var index = calls.indexOf(id);\n        var safeId = sanitizeUri(id.toLowerCase());\n\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n\n        var reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n      null: function _null() {\n        var _this = this;\n\n        var calls =\n        /** @type {Array<string>} */\n        this.getData('gfmFootnoteCallOrder') || [];\n        var counts =\n        /** @type {Record<string, number>} */\n        this.getData('gfmFootnoteCallCounts') || {};\n        var definitions =\n        /** @type {Record<string, string>} */\n        this.getData('gfmFootnoteDefinitions') || {};\n        var index = -1;\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><' + labelTagName + ' id=\"footnote-label\"' + (labelAttributes ? ' ' + labelAttributes : '') + '>');\n          this.raw(this.encode(label));\n          this.tag('</' + labelTagName + '>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n\n        var _loop = function _loop() {\n          // Called definitions are always defined.\n          var id = calls[index];\n          var safeId = sanitizeUri(id.toLowerCase());\n          var referenceIndex = 0;\n          /** @type {Array<string>} */\n\n          var references = [];\n\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" aria-label=\"' + _this.encode(typeof backLabel === 'string' ? backLabel : backLabel(index, referenceIndex)) + '\" class=\"data-footnote-backref\">‚Ü©' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n\n          var reference = references.join(' ');\n          var injected = false;\n\n          _this.lineEndingIfNeeded();\n\n          _this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n\n          _this.lineEndingIfNeeded();\n\n          _this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, function (\n          /** @type {string} */\n          $0) {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n\n          if (!injected) {\n            _this.lineEndingIfNeeded();\n\n            _this.tag(reference);\n          }\n\n          _this.lineEndingIfNeeded();\n\n          _this.tag('</li>');\n        };\n\n        while (++index < calls.length) {\n          _loop();\n        }\n\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/micromark-extension-gfm-footnote/lib/html.js"],"names":["normalizeIdentifier","sanitizeUri","own","hasOwnProperty","emptyOptions","defaultBackLabel","referenceIndex","rereferenceIndex","gfmFootnoteHtml","options","config","label","labelTagName","labelAttributes","undefined","backLabel","clobberPrefix","enter","gfmFootnoteDefinition","stack","getData","push","gfmFootnoteDefinitionLabelString","buffer","gfmFootnoteCallString","exit","definitions","footnoteStack","tightStack","current","pop","value","resume","setData","call","token","sliceSerialize","calls","counts","id","counter","index","indexOf","safeId","toLowerCase","length","reuseCounter","tag","String","null","lineEndingIfNeeded","raw","encode","references","reference","join","injected","replace","$0"],"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","sourcesContent":["/**\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\n/**\n * @callback BackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   * `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   * `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   * `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {string} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` attribute on footnotes to prevent them from\n *   *clobbering*.\n *\n *   The default is `'user-content-'`.\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {string} [label='Footnotes']\n *   Textual label to use for the footnotes section.\n *\n *   The default value is `'Footnotes'`.\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {string} [labelAttributes='class=\"sr-only\"']\n *   Attributes to use on the footnote label.\n *\n *   Change it to show the label and add other attributes.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different attributes.\n *\n *   > üëâ **Note**: `id=\"footnote-label\"` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string} [labelTagName='h2']\n *   HTML tag name to use for the footnote label element.\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different attributes with the `labelAttributes` option.\n * @property {BackLabelTemplate | string} [backLabel]\n *   Textual label to describe the backreference back to references.\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *  }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `aria-label` attribute on each backreference\n *   (the `‚Ü©` links).\n *   It affects users of assistive technology.\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\nexport function gfmFootnoteHtml(options) {\n  const config = options || emptyOptions\n  const label = config.label || 'Footnotes'\n  const labelTagName = config.labelTagName || 'h2'\n  const labelAttributes =\n    config.labelAttributes === null || config.labelAttributes === undefined\n      ? 'class=\"sr-only\"'\n      : config.labelAttributes\n  const backLabel = config.backLabel || defaultBackLabel\n  const clobberPrefix =\n    config.clobberPrefix === null || config.clobberPrefix === undefined\n      ? 'user-content-'\n      : config.clobberPrefix\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = /** @type {Array<boolean>} */ this.getData('tightStack')\n        stack.push(false)\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer()\n      },\n      gfmFootnoteCallString() {\n        this.buffer()\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions')\n        const footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n        const tightStack =\n          /** @type {Array<boolean>} */\n          this.getData('tightStack')\n        const current = footnoteStack.pop()\n        const value = this.resume()\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', (definitions = {}))\n        }\n        if (!own.call(definitions, current)) definitions[current] = value\n        tightStack.pop()\n        this.setData('slurpOneLineEnding', true)\n        // ‚ÄúHack‚Äù to prevent a line ending from showing up if we‚Äôre in a definition in\n        // an empty list item.\n        this.setData('lastWasTag')\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteDefinitionStack')\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', (footnoteStack = []))\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)))\n        this.resume() // Drop the label.\n        this.buffer() // Get ready for a value.\n      },\n\n      gfmFootnoteCallString(token) {\n        let calls =\n          /** @type {Array<string>|undefined} */\n          this.getData('gfmFootnoteCallOrder')\n        let counts =\n          /** @type {Record<string, number>|undefined} */\n          this.getData('gfmFootnoteCallCounts')\n        const id = normalizeIdentifier(this.sliceSerialize(token))\n        /** @type {number} */\n        let counter\n        this.resume()\n        if (!calls) this.setData('gfmFootnoteCallOrder', (calls = []))\n        if (!counts) this.setData('gfmFootnoteCallCounts', (counts = {}))\n        const index = calls.indexOf(id)\n        const safeId = sanitizeUri(id.toLowerCase())\n        if (index === -1) {\n          calls.push(id)\n          counts[id] = 1\n          counter = calls.length\n        } else {\n          counts[id]++\n          counter = index + 1\n        }\n        const reuseCounter = counts[id]\n        this.tag(\n          '<sup><a href=\"#' +\n            clobberPrefix +\n            'fn-' +\n            safeId +\n            '\" id=\"' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (reuseCounter > 1 ? '-' + reuseCounter : '') +\n            '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' +\n            String(counter) +\n            '</a></sup>'\n        )\n      },\n      null() {\n        const calls =\n          /** @type {Array<string>} */\n          this.getData('gfmFootnoteCallOrder') || []\n        const counts =\n          /** @type {Record<string, number>} */\n          this.getData('gfmFootnoteCallCounts') || {}\n        const definitions =\n          /** @type {Record<string, string>} */\n          this.getData('gfmFootnoteDefinitions') || {}\n        let index = -1\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag(\n            '<section data-footnotes=\"\" class=\"footnotes\"><' +\n              labelTagName +\n              ' id=\"footnote-label\"' +\n              (labelAttributes ? ' ' + labelAttributes : '') +\n              '>'\n          )\n          this.raw(this.encode(label))\n          this.tag('</' + labelTagName + '>')\n          this.lineEndingIfNeeded()\n          this.tag('<ol>')\n        }\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index]\n          const safeId = sanitizeUri(id.toLowerCase())\n          let referenceIndex = 0\n          /** @type {Array<string>} */\n          const references = []\n          while (++referenceIndex <= counts[id]) {\n            references.push(\n              '<a href=\"#' +\n                clobberPrefix +\n                'fnref-' +\n                safeId +\n                (referenceIndex > 1 ? '-' + referenceIndex : '') +\n                '\" data-footnote-backref=\"\" aria-label=\"' +\n                this.encode(\n                  typeof backLabel === 'string'\n                    ? backLabel\n                    : backLabel(index, referenceIndex)\n                ) +\n                '\" class=\"data-footnote-backref\">‚Ü©' +\n                (referenceIndex > 1\n                  ? '<sup>' + referenceIndex + '</sup>'\n                  : '') +\n                '</a>'\n            )\n          }\n          const reference = references.join(' ')\n          let injected = false\n          this.lineEndingIfNeeded()\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">')\n          this.lineEndingIfNeeded()\n          this.tag(\n            definitions[id].replace(\n              /<\\/p>(?:\\r?\\n|\\r)?$/,\n              (/** @type {string} */ $0) => {\n                injected = true\n                return ' ' + reference + $0\n              }\n            )\n          )\n          if (!injected) {\n            this.lineEndingIfNeeded()\n            this.tag(reference)\n          }\n          this.lineEndingIfNeeded()\n          this.tag('</li>')\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded()\n          this.tag('</ol>')\n          this.lineEndingIfNeeded()\n          this.tag('</section>')\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}