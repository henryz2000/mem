{"ast":null,"code":"/**\n * @typedef {import('./types.js').SelectState} SelectState\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').ElementChild} ElementChild\n * @typedef {import('./types.js').Direction} Direction\n * @typedef {import('unist-util-visit/complex-types.js').Visitor<ElementChild>} Visitor\n */\nimport { direction } from 'direction';\nimport { toString } from 'hast-util-to-string';\nimport { svg } from 'property-information';\nimport { visit, EXIT, SKIP } from 'unist-util-visit';\n/**\n * Enter a node.\n *\n * The caller is responsible for calling the return value `exit`.\n *\n * @param {SelectState} state\n *   Current state.\n *\n *   Will be mutated: `exit` undos the changes.\n * @param {Node} node\n *   Node to enter.\n * @returns {() => void}\n *   Call to exit.\n */\n// eslint-disable-next-line complexity\n\nexport function enterState(state, node) {\n  var schema = state.schema;\n  var language = state.language;\n  var currentDirection = state.direction;\n  var editableOrEditingHost = state.editableOrEditingHost;\n  /** @type {Direction | undefined} */\n\n  var dirInferred;\n\n  if (node.type === 'element' && node.properties) {\n    var lang = node.properties.xmlLang || node.properties.lang;\n    var type = node.properties.type || 'text';\n    var dir = dirProperty(node);\n\n    if (lang !== undefined && lang !== null) {\n      state.language = String(lang);\n    }\n\n    if (schema && schema.space === 'html') {\n      if (node.properties.contentEditable === 'true') {\n        state.editableOrEditingHost = true;\n      }\n\n      if (node.tagName === 'svg') {\n        state.schema = svg;\n      } // See: <https://html.spec.whatwg.org/#the-directionality>.\n      // Explicit `[dir=rtl]`.\n\n\n      if (dir === 'rtl') {\n        dirInferred = dir;\n      } else if ( // Explicit `[dir=ltr]`.\n      dir === 'ltr' || dir !== 'auto' && node.tagName === 'html' || dir !== 'auto' && node.tagName === 'input' && type === 'tel') {\n        dirInferred = 'ltr'; // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.\n      } else if (dir === 'auto' || node.tagName === 'bdi') {\n        if (node.tagName === 'textarea') {\n          // Check contents of `<textarea>`.\n          dirInferred = dirBidi(toString(node));\n        } else if (node.tagName === 'input' && (type === 'email' || type === 'search' || type === 'tel' || type === 'text')) {\n          // Check value of `<input>`.\n          dirInferred = node.properties.value ? // @ts-expect-error Assume string\n          dirBidi(node.properties.value) : 'ltr';\n        } else {\n          // Check text nodes in `node`.\n          visit(node, inferDirectionality);\n        }\n      }\n\n      if (dirInferred) {\n        state.direction = dirInferred;\n      }\n    } // Turn off editing mode in non-HTML spaces.\n    else if (state.editableOrEditingHost) {\n      state.editableOrEditingHost = false;\n    }\n  }\n\n  return reset;\n\n  function reset() {\n    state.schema = schema;\n    state.language = language;\n    state.direction = currentDirection;\n    state.editableOrEditingHost = editableOrEditingHost;\n  }\n  /** @type {Visitor} */\n\n\n  function inferDirectionality(child) {\n    if (child.type === 'text') {\n      dirInferred = dirBidi(child.value);\n      return dirInferred ? EXIT : undefined;\n    }\n\n    if (child !== node && child.type === 'element' && (child.tagName === 'bdi' || child.tagName === 'script' || child.tagName === 'style' || child.tagName === 'textare' || dirProperty(child))) {\n      return SKIP;\n    }\n  }\n}\n/**\n * @param {string} value\n * @returns {Direction | undefined}\n */\n\nfunction dirBidi(value) {\n  var result = direction(value);\n  return result === 'neutral' ? undefined : result;\n}\n/**\n * @param {ElementChild} node\n * @returns {Direction | undefined}\n */\n\n\nfunction dirProperty(node) {\n  var value = node.type === 'element' && node.properties && typeof node.properties.dir === 'string' ? node.properties.dir.toLowerCase() : undefined;\n  return value === 'auto' || value === 'ltr' || value === 'rtl' ? value : undefined;\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/hast-util-select/lib/enter-state.js"],"names":["direction","toString","svg","visit","EXIT","SKIP","enterState","state","node","schema","language","currentDirection","editableOrEditingHost","dirInferred","type","properties","lang","xmlLang","dir","dirProperty","undefined","String","space","contentEditable","tagName","dirBidi","value","inferDirectionality","reset","child","result","toLowerCase"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('./types.js').SelectState} SelectState\n * @typedef {import('./types.js').Node} Node\n * @typedef {import('./types.js').ElementChild} ElementChild\n * @typedef {import('./types.js').Direction} Direction\n * @typedef {import('unist-util-visit/complex-types.js').Visitor<ElementChild>} Visitor\n */\n\nimport {direction} from 'direction'\nimport {toString} from 'hast-util-to-string'\nimport {svg} from 'property-information'\nimport {visit, EXIT, SKIP} from 'unist-util-visit'\n\n/**\n * Enter a node.\n *\n * The caller is responsible for calling the return value `exit`.\n *\n * @param {SelectState} state\n *   Current state.\n *\n *   Will be mutated: `exit` undos the changes.\n * @param {Node} node\n *   Node to enter.\n * @returns {() => void}\n *   Call to exit.\n */\n// eslint-disable-next-line complexity\nexport function enterState(state, node) {\n  const schema = state.schema\n  const language = state.language\n  const currentDirection = state.direction\n  const editableOrEditingHost = state.editableOrEditingHost\n  /** @type {Direction | undefined} */\n  let dirInferred\n\n  if (node.type === 'element' && node.properties) {\n    const lang = node.properties.xmlLang || node.properties.lang\n    const type = node.properties.type || 'text'\n    const dir = dirProperty(node)\n\n    if (lang !== undefined && lang !== null) {\n      state.language = String(lang)\n    }\n\n    if (schema && schema.space === 'html') {\n      if (node.properties.contentEditable === 'true') {\n        state.editableOrEditingHost = true\n      }\n\n      if (node.tagName === 'svg') {\n        state.schema = svg\n      }\n\n      // See: <https://html.spec.whatwg.org/#the-directionality>.\n      // Explicit `[dir=rtl]`.\n      if (dir === 'rtl') {\n        dirInferred = dir\n      } else if (\n        // Explicit `[dir=ltr]`.\n        dir === 'ltr' ||\n        // HTML with an invalid or no `[dir]`.\n        (dir !== 'auto' && node.tagName === 'html') ||\n        // `input[type=tel]` with an invalid or no `[dir]`.\n        (dir !== 'auto' && node.tagName === 'input' && type === 'tel')\n      ) {\n        dirInferred = 'ltr'\n        // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.\n      } else if (dir === 'auto' || node.tagName === 'bdi') {\n        if (node.tagName === 'textarea') {\n          // Check contents of `<textarea>`.\n          dirInferred = dirBidi(toString(node))\n        } else if (\n          node.tagName === 'input' &&\n          (type === 'email' ||\n            type === 'search' ||\n            type === 'tel' ||\n            type === 'text')\n        ) {\n          // Check value of `<input>`.\n          dirInferred = node.properties.value\n            ? // @ts-expect-error Assume string\n              dirBidi(node.properties.value)\n            : 'ltr'\n        } else {\n          // Check text nodes in `node`.\n          visit(node, inferDirectionality)\n        }\n      }\n\n      if (dirInferred) {\n        state.direction = dirInferred\n      }\n    }\n    // Turn off editing mode in non-HTML spaces.\n    else if (state.editableOrEditingHost) {\n      state.editableOrEditingHost = false\n    }\n  }\n\n  return reset\n\n  function reset() {\n    state.schema = schema\n    state.language = language\n    state.direction = currentDirection\n    state.editableOrEditingHost = editableOrEditingHost\n  }\n\n  /** @type {Visitor} */\n  function inferDirectionality(child) {\n    if (child.type === 'text') {\n      dirInferred = dirBidi(child.value)\n      return dirInferred ? EXIT : undefined\n    }\n\n    if (\n      child !== node &&\n      child.type === 'element' &&\n      (child.tagName === 'bdi' ||\n        child.tagName === 'script' ||\n        child.tagName === 'style' ||\n        child.tagName === 'textare' ||\n        dirProperty(child))\n    ) {\n      return SKIP\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @returns {Direction | undefined}\n */\nfunction dirBidi(value) {\n  const result = direction(value)\n  return result === 'neutral' ? undefined : result\n}\n\n/**\n * @param {ElementChild} node\n * @returns {Direction | undefined}\n */\nfunction dirProperty(node) {\n  const value =\n    node.type === 'element' &&\n    node.properties &&\n    typeof node.properties.dir === 'string'\n      ? node.properties.dir.toLowerCase()\n      : undefined\n\n  return value === 'auto' || value === 'ltr' || value === 'rtl'\n    ? value\n    : undefined\n}\n"]},"metadata":{},"sourceType":"module"}