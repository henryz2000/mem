{"ast":null,"code":"// @ts-nocheck\ncooklang.displayName = 'cooklang';\ncooklang.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function cooklang(Prism) {\n  ;\n\n  (function (Prism) {\n    // see https://github.com/cooklang/spec/blob/main/EBNF.md\n    var single_token_suffix = /(?:(?!\\s)[\\d$+<=a-zA-Z\\x80-\\uFFFF])+/.source;\n    var multi_token_infix = /[^{}@#]+/.source;\n    var multi_token_suffix = /\\{[^}#@]*\\}/.source;\n    var multi_token = multi_token_infix + multi_token_suffix;\n    var timer_units = /(?:h|hours|hrs|m|min|minutes)/.source;\n    var amount_group_impl = {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        amount: {\n          pattern: /([\\{|])[^{}|*%]+/,\n          lookbehind: true,\n          alias: 'number'\n        },\n        unit: {\n          pattern: /(%)[^}]+/,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        'servings-scaler': {\n          pattern: /\\*/,\n          alias: 'operator'\n        },\n        'servings-alternative-separator': {\n          pattern: /\\|/,\n          alias: 'operator'\n        },\n        'unit-separator': {\n          pattern: /(?:%|(\\*)%)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        punctuation: /[{}]/\n      }\n    };\n    Prism.languages.cooklang = {\n      comment: {\n        // [- comment -]\n        // -- comment\n        pattern: /\\[-[\\s\\S]*?-\\]|--.*/,\n        greedy: true\n      },\n      meta: {\n        // >> key: value\n        pattern: />>.*:.*/,\n        inside: {\n          property: {\n            // key:\n            pattern: /(>>\\s*)[^\\s:](?:[^:]*[^\\s:])?/,\n            lookbehind: true\n          }\n        }\n      },\n      'cookware-group': {\n        // #...{...}, #...\n        pattern: new RegExp('#(?:' + multi_token + '|' + single_token_suffix + ')'),\n        inside: {\n          cookware: {\n            pattern: new RegExp('(^#)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'cookware-keyword': {\n            pattern: /^#/,\n            alias: 'keyword'\n          },\n          'quantity-group': {\n            pattern: new RegExp(/\\{[^{}@#]*\\}/),\n            inside: {\n              quantity: {\n                pattern: new RegExp(/(^\\{)/.source + multi_token_infix),\n                lookbehind: true,\n                alias: 'number'\n              },\n              punctuation: /[{}]/\n            }\n          }\n        }\n      },\n      'ingredient-group': {\n        // @...{...}, @...\n        pattern: new RegExp('@(?:' + multi_token + '|' + single_token_suffix + ')'),\n        inside: {\n          ingredient: {\n            pattern: new RegExp('(^@)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'ingredient-keyword': {\n            pattern: /^@/,\n            alias: 'keyword'\n          },\n          'amount-group': amount_group_impl\n        }\n      },\n      'timer-group': {\n        // ~timer{...}\n        // eslint-disable-next-line regexp/sort-alternatives\n        pattern: /~(?!\\s)[^@#~{}]*\\{[^{}]*\\}/,\n        inside: {\n          timer: {\n            pattern: /(^~)[^{]+/,\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'duration-group': {\n            // {...}\n            pattern: /\\{[^{}]*\\}/,\n            inside: {\n              punctuation: /[{}]/,\n              unit: {\n                pattern: new RegExp(/(%\\s*)/.source + timer_units + /\\b/.source),\n                lookbehind: true,\n                alias: 'symbol'\n              },\n              operator: /%/,\n              duration: {\n                pattern: /\\d+/,\n                alias: 'number'\n              }\n            }\n          },\n          'timer-keyword': {\n            pattern: /^~/,\n            alias: 'keyword'\n          }\n        }\n      }\n    };\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/cooklang.js"],"names":["cooklang","displayName","aliases","Prism","single_token_suffix","source","multi_token_infix","multi_token_suffix","multi_token","timer_units","amount_group_impl","pattern","inside","amount","lookbehind","alias","unit","punctuation","languages","comment","greedy","meta","property","RegExp","cookware","quantity","ingredient","timer","operator","duration"],"mappings":"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","sourcesContent":["// @ts-nocheck\ncooklang.displayName = 'cooklang'\ncooklang.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function cooklang(Prism) {\n  ;(function (Prism) {\n    // see https://github.com/cooklang/spec/blob/main/EBNF.md\n\n    var single_token_suffix = /(?:(?!\\s)[\\d$+<=a-zA-Z\\x80-\\uFFFF])+/.source\n    var multi_token_infix = /[^{}@#]+/.source\n    var multi_token_suffix = /\\{[^}#@]*\\}/.source\n    var multi_token = multi_token_infix + multi_token_suffix\n    var timer_units = /(?:h|hours|hrs|m|min|minutes)/.source\n    var amount_group_impl = {\n      pattern: /\\{[^{}]*\\}/,\n      inside: {\n        amount: {\n          pattern: /([\\{|])[^{}|*%]+/,\n          lookbehind: true,\n          alias: 'number'\n        },\n        unit: {\n          pattern: /(%)[^}]+/,\n          lookbehind: true,\n          alias: 'symbol'\n        },\n        'servings-scaler': {\n          pattern: /\\*/,\n          alias: 'operator'\n        },\n        'servings-alternative-separator': {\n          pattern: /\\|/,\n          alias: 'operator'\n        },\n        'unit-separator': {\n          pattern: /(?:%|(\\*)%)/,\n          lookbehind: true,\n          alias: 'operator'\n        },\n        punctuation: /[{}]/\n      }\n    }\n    Prism.languages.cooklang = {\n      comment: {\n        // [- comment -]\n        // -- comment\n        pattern: /\\[-[\\s\\S]*?-\\]|--.*/,\n        greedy: true\n      },\n      meta: {\n        // >> key: value\n        pattern: />>.*:.*/,\n        inside: {\n          property: {\n            // key:\n            pattern: /(>>\\s*)[^\\s:](?:[^:]*[^\\s:])?/,\n            lookbehind: true\n          }\n        }\n      },\n      'cookware-group': {\n        // #...{...}, #...\n        pattern: new RegExp(\n          '#(?:' + multi_token + '|' + single_token_suffix + ')'\n        ),\n        inside: {\n          cookware: {\n            pattern: new RegExp('(^#)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'cookware-keyword': {\n            pattern: /^#/,\n            alias: 'keyword'\n          },\n          'quantity-group': {\n            pattern: new RegExp(/\\{[^{}@#]*\\}/),\n            inside: {\n              quantity: {\n                pattern: new RegExp(/(^\\{)/.source + multi_token_infix),\n                lookbehind: true,\n                alias: 'number'\n              },\n              punctuation: /[{}]/\n            }\n          }\n        }\n      },\n      'ingredient-group': {\n        // @...{...}, @...\n        pattern: new RegExp(\n          '@(?:' + multi_token + '|' + single_token_suffix + ')'\n        ),\n        inside: {\n          ingredient: {\n            pattern: new RegExp('(^@)(?:' + multi_token_infix + ')'),\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'ingredient-keyword': {\n            pattern: /^@/,\n            alias: 'keyword'\n          },\n          'amount-group': amount_group_impl\n        }\n      },\n      'timer-group': {\n        // ~timer{...}\n        // eslint-disable-next-line regexp/sort-alternatives\n        pattern: /~(?!\\s)[^@#~{}]*\\{[^{}]*\\}/,\n        inside: {\n          timer: {\n            pattern: /(^~)[^{]+/,\n            lookbehind: true,\n            alias: 'variable'\n          },\n          'duration-group': {\n            // {...}\n            pattern: /\\{[^{}]*\\}/,\n            inside: {\n              punctuation: /[{}]/,\n              unit: {\n                pattern: new RegExp(\n                  /(%\\s*)/.source + timer_units + /\\b/.source\n                ),\n                lookbehind: true,\n                alias: 'symbol'\n              },\n              operator: /%/,\n              duration: {\n                pattern: /\\d+/,\n                alias: 'number'\n              }\n            }\n          },\n          'timer-keyword': {\n            pattern: /^~/,\n            alias: 'keyword'\n          }\n        }\n      }\n    }\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"module"}