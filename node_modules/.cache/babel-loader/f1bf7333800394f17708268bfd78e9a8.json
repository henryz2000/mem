{"ast":null,"code":"// @ts-nocheck\nimport refractorMarkupTemplating from './markup-templating.js';\nhandlebars.displayName = 'handlebars';\nhandlebars.aliases = ['hbs', 'mustache'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function handlebars(Prism) {\n  Prism.register(refractorMarkupTemplating);\n\n  (function (Prism) {\n    Prism.languages.handlebars = {\n      comment: /\\{\\{![\\s\\S]*?\\}\\}/,\n      delimiter: {\n        pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n      boolean: /\\b(?:false|true)\\b/,\n      block: {\n        pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      brackets: {\n        pattern: /\\[[^\\]]+\\]/,\n        inside: {\n          punctuation: /\\[|\\]/,\n          variable: /[\\s\\S]+/\n        }\n      },\n      punctuation: /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n      variable: /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n    };\n    Prism.hooks.add('before-tokenize', function (env) {\n      var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g;\n      Prism.languages['markup-templating'].buildPlaceholders(env, 'handlebars', handlebarsPattern);\n    });\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'handlebars');\n    });\n    Prism.languages.hbs = Prism.languages.handlebars;\n    Prism.languages.mustache = Prism.languages.handlebars;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/handlebars.js"],"names":["refractorMarkupTemplating","handlebars","displayName","aliases","Prism","register","languages","comment","delimiter","pattern","alias","string","number","boolean","block","lookbehind","brackets","inside","punctuation","variable","hooks","add","env","handlebarsPattern","buildPlaceholders","tokenizePlaceholders","hbs","mustache"],"mappings":"AAAA;AACA,OAAOA,yBAAP,MAAsC,wBAAtC;AACAC,UAAU,CAACC,WAAX,GAAyB,YAAzB;AACAD,UAAU,CAACE,OAAX,GAAqB,CAAC,KAAD,EAAQ,UAAR,CAArB;AAEA;;AACA,eAAe,SAASF,UAAT,CAAoBG,KAApB,EAA2B;AACxCA,EAAAA,KAAK,CAACC,QAAN,CAAeL,yBAAf;;AACC,GAAC,UAAUI,KAAV,EAAiB;AACjBA,IAAAA,KAAK,CAACE,SAAN,CAAgBL,UAAhB,GAA6B;AAC3BM,MAAAA,OAAO,EAAE,mBADkB;AAE3BC,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAE,mBADA;AAETC,QAAAA,KAAK,EAAE;AAFE,OAFgB;AAM3BC,MAAAA,MAAM,EAAE,kCANmB;AAO3BC,MAAAA,MAAM,EAAE,gEAPmB;AAQ3BC,MAAAA,OAAO,EAAE,oBARkB;AAS3BC,MAAAA,KAAK,EAAE;AACLL,QAAAA,OAAO,EAAE,8CADJ;AAELM,QAAAA,UAAU,EAAE,IAFP;AAGLL,QAAAA,KAAK,EAAE;AAHF,OAToB;AAc3BM,MAAAA,QAAQ,EAAE;AACRP,QAAAA,OAAO,EAAE,YADD;AAERQ,QAAAA,MAAM,EAAE;AACNC,UAAAA,WAAW,EAAE,OADP;AAENC,UAAAA,QAAQ,EAAE;AAFJ;AAFA,OAdiB;AAqB3BD,MAAAA,WAAW,EAAE,oCArBc;AAsB3BC,MAAAA,QAAQ,EAAE;AAtBiB,KAA7B;AAwBAf,IAAAA,KAAK,CAACgB,KAAN,CAAYC,GAAZ,CAAgB,iBAAhB,EAAmC,UAAUC,GAAV,EAAe;AAChD,UAAIC,iBAAiB,GAAG,wCAAxB;AACAnB,MAAAA,KAAK,CAACE,SAAN,CAAgB,mBAAhB,EAAqCkB,iBAArC,CACEF,GADF,EAEE,YAFF,EAGEC,iBAHF;AAKD,KAPD;AAQAnB,IAAAA,KAAK,CAACgB,KAAN,CAAYC,GAAZ,CAAgB,gBAAhB,EAAkC,UAAUC,GAAV,EAAe;AAC/ClB,MAAAA,KAAK,CAACE,SAAN,CAAgB,mBAAhB,EAAqCmB,oBAArC,CACEH,GADF,EAEE,YAFF;AAID,KALD;AAMAlB,IAAAA,KAAK,CAACE,SAAN,CAAgBoB,GAAhB,GAAsBtB,KAAK,CAACE,SAAN,CAAgBL,UAAtC;AACAG,IAAAA,KAAK,CAACE,SAAN,CAAgBqB,QAAhB,GAA2BvB,KAAK,CAACE,SAAN,CAAgBL,UAA3C;AACD,GAzCA,EAyCEG,KAzCF;AA0CF","sourcesContent":["// @ts-nocheck\nimport refractorMarkupTemplating from './markup-templating.js'\nhandlebars.displayName = 'handlebars'\nhandlebars.aliases = ['hbs', 'mustache']\n\n/** @type {import('../core.js').Syntax} */\nexport default function handlebars(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function (Prism) {\n    Prism.languages.handlebars = {\n      comment: /\\{\\{![\\s\\S]*?\\}\\}/,\n      delimiter: {\n        pattern: /^\\{\\{\\{?|\\}\\}\\}?$/,\n        alias: 'punctuation'\n      },\n      string: /([\"'])(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n      number: /\\b0x[\\dA-Fa-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:[Ee][+-]?\\d+)?/,\n      boolean: /\\b(?:false|true)\\b/,\n      block: {\n        pattern: /^(\\s*(?:~\\s*)?)[#\\/]\\S+?(?=\\s*(?:~\\s*)?$|\\s)/,\n        lookbehind: true,\n        alias: 'keyword'\n      },\n      brackets: {\n        pattern: /\\[[^\\]]+\\]/,\n        inside: {\n          punctuation: /\\[|\\]/,\n          variable: /[\\s\\S]+/\n        }\n      },\n      punctuation: /[!\"#%&':()*+,.\\/;<=>@\\[\\\\\\]^`{|}~]/,\n      variable: /[^!\"#%&'()*+,\\/;<=>@\\[\\\\\\]^`{|}~\\s]+/\n    }\n    Prism.hooks.add('before-tokenize', function (env) {\n      var handlebarsPattern = /\\{\\{\\{[\\s\\S]+?\\}\\}\\}|\\{\\{[\\s\\S]+?\\}\\}/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'handlebars',\n        handlebarsPattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function (env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(\n        env,\n        'handlebars'\n      )\n    })\n    Prism.languages.hbs = Prism.languages.handlebars\n    Prism.languages.mustache = Prism.languages.handlebars\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"module"}