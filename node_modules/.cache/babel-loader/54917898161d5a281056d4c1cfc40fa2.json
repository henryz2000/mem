{"ast":null,"code":"import _objectSpread from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  var indexStack = state.indexStack;\n  var children = parent.children || [];\n  var tracker = state.createTracker(info);\n  /** @type {Array<string>} */\n\n  var results = [];\n  var index = -1;\n  indexStack.push(-1);\n\n  while (++index < children.length) {\n    var child = children[index];\n    indexStack[indexStack.length - 1] = index;\n    results.push(tracker.move(state.handle(child, parent, state, _objectSpread({\n      before: '\\n',\n      after: '\\n'\n    }, tracker.current()))));\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined;\n    }\n\n    if (index < children.length - 1) {\n      results.push(tracker.move(between(child, children[index + 1], parent, state)));\n    }\n  }\n\n  indexStack.pop();\n  return results.join('');\n}\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\n\nfunction between(left, right, parent, state) {\n  var index = state.join.length;\n\n  while (index--) {\n    var result = state.join[index](left, right, parent, state);\n\n    if (result === true || result === 1) {\n      break;\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result);\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n';\n    }\n  }\n\n  return '\\n\\n';\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/mdast-util-to-markdown/lib/util/container-flow.js"],"names":["containerFlow","parent","state","info","indexStack","children","tracker","createTracker","results","index","push","length","child","move","handle","before","after","current","type","bulletLastUsed","undefined","between","pop","join","left","right","result","repeat"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,MAAvB,EAA+BC,KAA/B,EAAsCC,IAAtC,EAA4C;AACjD,MAAMC,UAAU,GAAGF,KAAK,CAACE,UAAzB;AACA,MAAMC,QAAQ,GAAGJ,MAAM,CAACI,QAAP,IAAmB,EAApC;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,aAAN,CAAoBJ,IAApB,CAAhB;AACA;;AACA,MAAMK,OAAO,GAAG,EAAhB;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AAEAL,EAAAA,UAAU,CAACM,IAAX,CAAgB,CAAC,CAAjB;;AAEA,SAAO,EAAED,KAAF,GAAUJ,QAAQ,CAACM,MAA1B,EAAkC;AAChC,QAAMC,KAAK,GAAGP,QAAQ,CAACI,KAAD,CAAtB;AAEAL,IAAAA,UAAU,CAACA,UAAU,CAACO,MAAX,GAAoB,CAArB,CAAV,GAAoCF,KAApC;AAEAD,IAAAA,OAAO,CAACE,IAAR,CACEJ,OAAO,CAACO,IAAR,CACEX,KAAK,CAACY,MAAN,CAAaF,KAAb,EAAoBX,MAApB,EAA4BC,KAA5B;AACEa,MAAAA,MAAM,EAAE,IADV;AAEEC,MAAAA,KAAK,EAAE;AAFT,OAGKV,OAAO,CAACW,OAAR,EAHL,EADF,CADF;;AAUA,QAAIL,KAAK,CAACM,IAAN,KAAe,MAAnB,EAA2B;AACzBhB,MAAAA,KAAK,CAACiB,cAAN,GAAuBC,SAAvB;AACD;;AAED,QAAIX,KAAK,GAAGJ,QAAQ,CAACM,MAAT,GAAkB,CAA9B,EAAiC;AAC/BH,MAAAA,OAAO,CAACE,IAAR,CACEJ,OAAO,CAACO,IAAR,CAAaQ,OAAO,CAACT,KAAD,EAAQP,QAAQ,CAACI,KAAK,GAAG,CAAT,CAAhB,EAA6BR,MAA7B,EAAqCC,KAArC,CAApB,CADF;AAGD;AACF;;AAEDE,EAAAA,UAAU,CAACkB,GAAX;AAEA,SAAOd,OAAO,CAACe,IAAR,CAAa,EAAb,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,OAAT,CAAiBG,IAAjB,EAAuBC,KAAvB,EAA8BxB,MAA9B,EAAsCC,KAAtC,EAA6C;AAC3C,MAAIO,KAAK,GAAGP,KAAK,CAACqB,IAAN,CAAWZ,MAAvB;;AAEA,SAAOF,KAAK,EAAZ,EAAgB;AACd,QAAMiB,MAAM,GAAGxB,KAAK,CAACqB,IAAN,CAAWd,KAAX,EAAkBe,IAAlB,EAAwBC,KAAxB,EAA+BxB,MAA/B,EAAuCC,KAAvC,CAAf;;AAEA,QAAIwB,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,CAAlC,EAAqC;AACnC;AACD;;AAED,QAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,aAAO,KAAKC,MAAL,CAAY,IAAID,MAAhB,CAAP;AACD;;AAED,QAAIA,MAAM,KAAK,KAAf,EAAsB;AACpB,aAAO,iBAAP;AACD;AACF;;AAED,SAAO,MAAP;AACD","sourcesContent":["/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n"]},"metadata":{},"sourceType":"module"}