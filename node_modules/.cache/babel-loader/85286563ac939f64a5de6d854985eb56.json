{"ast":null,"code":"/**\n * @typedef {import('./types.js').Selectors} Selectors\n * @typedef {import('./types.js').RuleSet} RuleSet\n */\nimport { CssSelectorParser } from 'css-selector-parser';\nvar parser = new CssSelectorParser();\nparser.registerAttrEqualityMods('~', '|', '^', '$', '*');\nparser.registerSelectorPseudos('any', 'matches', 'not', 'has');\nparser.registerNestingOperators('>', '+', '~');\n/**\n * @param {string} selector\n * @returns {Selectors | RuleSet | null}\n */\n\nexport function parse(selector) {\n  if (typeof selector !== 'string') {\n    throw new TypeError('Expected `string` as selector, not `' + selector + '`');\n  }\n\n  return parser.parse(selector);\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/hast-util-select/lib/parse.js"],"names":["CssSelectorParser","parser","registerAttrEqualityMods","registerSelectorPseudos","registerNestingOperators","parse","selector","TypeError"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAAQA,iBAAR,QAAgC,qBAAhC;AAEA,IAAMC,MAAM,GAAG,IAAID,iBAAJ,EAAf;AAEAC,MAAM,CAACC,wBAAP,CAAgC,GAAhC,EAAqC,GAArC,EAA0C,GAA1C,EAA+C,GAA/C,EAAoD,GAApD;AACAD,MAAM,CAACE,uBAAP,CAA+B,KAA/B,EAAsC,SAAtC,EAAiD,KAAjD,EAAwD,KAAxD;AACAF,MAAM,CAACG,wBAAP,CAAgC,GAAhC,EAAqC,GAArC,EAA0C,GAA1C;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,KAAT,CAAeC,QAAf,EAAyB;AAC9B,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,UAAM,IAAIC,SAAJ,CAAc,yCAAyCD,QAAzC,GAAoD,GAAlE,CAAN;AACD;;AAED,SAAOL,MAAM,CAACI,KAAP,CAAaC,QAAb,CAAP;AACD","sourcesContent":["/**\n * @typedef {import('./types.js').Selectors} Selectors\n * @typedef {import('./types.js').RuleSet} RuleSet\n */\n\nimport {CssSelectorParser} from 'css-selector-parser'\n\nconst parser = new CssSelectorParser()\n\nparser.registerAttrEqualityMods('~', '|', '^', '$', '*')\nparser.registerSelectorPseudos('any', 'matches', 'not', 'has')\nparser.registerNestingOperators('>', '+', '~')\n\n/**\n * @param {string} selector\n * @returns {Selectors | RuleSet | null}\n */\nexport function parse(selector) {\n  if (typeof selector !== 'string') {\n    throw new TypeError('Expected `string` as selector, not `' + selector + '`')\n  }\n\n  return parser.parse(selector)\n}\n"]},"metadata":{},"sourceType":"module"}