{"ast":null,"code":"import _objectSpread from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\nimport { containerPhrasing } from 'mdast-util-to-markdown/lib/util/container-phrasing.js';\nimport { track } from 'mdast-util-to-markdown/lib/util/track.js'; // To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\n\nvar constructsWithoutStrikethrough = ['autolink', 'destinationLiteral', 'destinationRaw', 'reference', 'titleQuote', 'titleApostrophe'];\nhandleDelete.peek = peekDelete;\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\n\nexport var gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {\n    strikethrough: enterStrikethrough\n  },\n  exit: {\n    strikethrough: exitStrikethrough\n  }\n};\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\n\nexport var gfmStrikethroughToMarkdown = {\n  unsafe: [{\n    character: '~',\n    inConstruct: 'phrasing',\n    notInConstruct: constructsWithoutStrikethrough\n  }],\n  handlers: {\n    delete: handleDelete\n  }\n};\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\nfunction enterStrikethrough(token) {\n  this.enter({\n    type: 'delete',\n    children: []\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitStrikethrough(token) {\n  this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\n\n\nfunction handleDelete(node, _, context, safeOptions) {\n  var tracker = track(safeOptions);\n  var exit = context.enter('strikethrough');\n  var value = tracker.move('~~');\n  value += containerPhrasing(node, context, _objectSpread(_objectSpread({}, tracker.current()), {}, {\n    before: value,\n    after: '~'\n  }));\n  value += tracker.move('~~');\n  exit();\n  return value;\n}\n/** @type {ToMarkdownHandle} */\n\n\nfunction peekDelete() {\n  return '~';\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/mdast-util-gfm-strikethrough/lib/index.js"],"names":["containerPhrasing","track","constructsWithoutStrikethrough","handleDelete","peek","peekDelete","gfmStrikethroughFromMarkdown","canContainEols","enter","strikethrough","enterStrikethrough","exit","exitStrikethrough","gfmStrikethroughToMarkdown","unsafe","character","inConstruct","notInConstruct","handlers","delete","token","type","children","node","_","context","safeOptions","tracker","value","move","current","before","after"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,iBAAR,QAAgC,uDAAhC;AACA,SAAQC,KAAR,QAAoB,0CAApB,C,CAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,8BAA8B,GAAG,CACrC,UADqC,EAErC,oBAFqC,EAGrC,gBAHqC,EAIrC,WAJqC,EAKrC,YALqC,EAMrC,iBANqC,CAAvC;AASAC,YAAY,CAACC,IAAb,GAAoBC,UAApB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,4BAA4B,GAAG;AAC1CC,EAAAA,cAAc,EAAE,CAAC,QAAD,CAD0B;AAE1CC,EAAAA,KAAK,EAAE;AAACC,IAAAA,aAAa,EAAEC;AAAhB,GAFmC;AAG1CC,EAAAA,IAAI,EAAE;AAACF,IAAAA,aAAa,EAAEG;AAAhB;AAHoC,CAArC;AAMP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,0BAA0B,GAAG;AACxCC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,SAAS,EAAE,GADb;AAEEC,IAAAA,WAAW,EAAE,UAFf;AAGEC,IAAAA,cAAc,EAAEf;AAHlB,GADM,CADgC;AAQxCgB,EAAAA,QAAQ,EAAE;AAACC,IAAAA,MAAM,EAAEhB;AAAT;AAR8B,CAAnC;AAWP;AACA;AACA;AACA;;AACA,SAASO,kBAAT,CAA4BU,KAA5B,EAAmC;AACjC,OAAKZ,KAAL,CAAW;AAACa,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,QAAQ,EAAE;AAA3B,GAAX,EAA2CF,KAA3C;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASR,iBAAT,CAA2BQ,KAA3B,EAAkC;AAChC,OAAKT,IAAL,CAAUS,KAAV;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASjB,YAAT,CAAsBoB,IAAtB,EAA4BC,CAA5B,EAA+BC,OAA/B,EAAwCC,WAAxC,EAAqD;AACnD,MAAMC,OAAO,GAAG1B,KAAK,CAACyB,WAAD,CAArB;AACA,MAAMf,IAAI,GAAGc,OAAO,CAACjB,KAAR,CAAc,eAAd,CAAb;AACA,MAAIoB,KAAK,GAAGD,OAAO,CAACE,IAAR,CAAa,IAAb,CAAZ;AACAD,EAAAA,KAAK,IAAI5B,iBAAiB,CAACuB,IAAD,EAAOE,OAAP,kCACrBE,OAAO,CAACG,OAAR,EADqB;AAExBC,IAAAA,MAAM,EAAEH,KAFgB;AAGxBI,IAAAA,KAAK,EAAE;AAHiB,KAA1B;AAKAJ,EAAAA,KAAK,IAAID,OAAO,CAACE,IAAR,CAAa,IAAb,CAAT;AACAlB,EAAAA,IAAI;AACJ,SAAOiB,KAAP;AACD;AAED;;;AACA,SAASvB,UAAT,GAAsB;AACpB,SAAO,GAAP;AACD","sourcesContent":["/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {containerPhrasing} from 'mdast-util-to-markdown/lib/util/container-phrasing.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\n// To do: next major: expose functions.\n// To do: next major: use `state`, state utilities.\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n *\n * @type {FromMarkdownExtension}\n */\nexport const gfmStrikethroughFromMarkdown = {\n  canContainEols: ['delete'],\n  enter: {strikethrough: enterStrikethrough},\n  exit: {strikethrough: exitStrikethrough}\n}\n\n/**\n * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n *\n * @type {ToMarkdownExtension}\n */\nexport const gfmStrikethroughToMarkdown = {\n  unsafe: [\n    {\n      character: '~',\n      inConstruct: 'phrasing',\n      notInConstruct: constructsWithoutStrikethrough\n    }\n  ],\n  handlers: {delete: handleDelete}\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  const exit = context.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += containerPhrasing(node, context, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n"]},"metadata":{},"sourceType":"module"}