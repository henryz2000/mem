{"ast":null,"code":"// @ts-nocheck\nocaml.displayName = 'ocaml';\nocaml.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function ocaml(Prism) {\n  // https://ocaml.org/manual/lex.html\n  Prism.languages.ocaml = {\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n      greedy: true\n    },\n    char: {\n      pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n      greedy: true\n    },\n    string: [{\n      pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n      greedy: true\n    }, {\n      pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n      greedy: true\n    }],\n    number: [// binary and octal\n    /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i, // hexadecimal\n    /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i, // decimal\n    /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i],\n    directive: {\n      pattern: /\\B#\\w+/,\n      alias: 'property'\n    },\n    label: {\n      pattern: /\\B~\\w+/,\n      alias: 'property'\n    },\n    'type-variable': {\n      pattern: /\\B'\\w+/,\n      alias: 'function'\n    },\n    variant: {\n      pattern: /`\\w+/,\n      alias: 'symbol'\n    },\n    // For the list of keywords and operators,\n    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n    keyword: /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    'operator-like-punctuation': {\n      pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n      alias: 'punctuation'\n    },\n    // Custom operators are allowed\n    operator: /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    punctuation: /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n  };\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/ocaml.js"],"names":["ocaml","displayName","aliases","Prism","languages","comment","pattern","greedy","char","string","number","directive","alias","label","variant","keyword","boolean","operator","punctuation"],"mappings":"AAAA;AACAA,KAAK,CAACC,WAAN,GAAoB,OAApB;AACAD,KAAK,CAACE,OAAN,GAAgB,EAAhB;AAEA;;AACA,eAAe,SAASF,KAAT,CAAeG,KAAf,EAAsB;AACnC;AAEAA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,KAAhB,GAAwB;AACtBK,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,kBADF;AAEPC,MAAAA,MAAM,EAAE;AAFD,KADa;AAKtBC,IAAAA,IAAI,EAAE;AACJF,MAAAA,OAAO,EAAE,8CADL;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KALgB;AAStBE,IAAAA,MAAM,EAAE,CACN;AACEH,MAAAA,OAAO,EAAE,qCADX;AAEEC,MAAAA,MAAM,EAAE;AAFV,KADM,EAKN;AACED,MAAAA,OAAO,EAAE,6BADX;AAEEC,MAAAA,MAAM,EAAE;AAFV,KALM,CATc;AAmBtBG,IAAAA,MAAM,EAAE,CACN;AACA,0CAFM,EAGN;AACA,uEAJM,EAKN;AACA,uDANM,CAnBc;AA2BtBC,IAAAA,SAAS,EAAE;AACTL,MAAAA,OAAO,EAAE,QADA;AAETM,MAAAA,KAAK,EAAE;AAFE,KA3BW;AA+BtBC,IAAAA,KAAK,EAAE;AACLP,MAAAA,OAAO,EAAE,QADJ;AAELM,MAAAA,KAAK,EAAE;AAFF,KA/Be;AAmCtB,qBAAiB;AACfN,MAAAA,OAAO,EAAE,QADM;AAEfM,MAAAA,KAAK,EAAE;AAFQ,KAnCK;AAuCtBE,IAAAA,OAAO,EAAE;AACPR,MAAAA,OAAO,EAAE,MADF;AAEPM,MAAAA,KAAK,EAAE;AAFA,KAvCa;AA2CtB;AACA;AACAG,IAAAA,OAAO,EACL,+RA9CoB;AA+CtBC,IAAAA,OAAO,EAAE,oBA/Ca;AAgDtB,iCAA6B;AAC3BV,MAAAA,OAAO,EAAE,wBADkB;AAE3BM,MAAAA,KAAK,EAAE;AAFoB,KAhDP;AAoDtB;AACAK,IAAAA,QAAQ,EACN,uGAtDoB;AAuDtBC,IAAAA,WAAW,EAAE;AAvDS,GAAxB;AAyDD","sourcesContent":["// @ts-nocheck\nocaml.displayName = 'ocaml'\nocaml.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function ocaml(Prism) {\n  // https://ocaml.org/manual/lex.html\n\n  Prism.languages.ocaml = {\n    comment: {\n      pattern: /\\(\\*[\\s\\S]*?\\*\\)/,\n      greedy: true\n    },\n    char: {\n      pattern: /'(?:[^\\\\\\r\\n']|\\\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,\n      greedy: true\n    },\n    string: [\n      {\n        pattern: /\"(?:\\\\(?:[\\s\\S]|\\r\\n)|[^\\\\\\r\\n\"])*\"/,\n        greedy: true\n      },\n      {\n        pattern: /\\{([a-z_]*)\\|[\\s\\S]*?\\|\\1\\}/,\n        greedy: true\n      }\n    ],\n    number: [\n      // binary and octal\n      /\\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\\b/i,\n      // hexadecimal\n      /\\b0x[a-f0-9][a-f0-9_]*(?:\\.[a-f0-9_]*)?(?:p[+-]?\\d[\\d_]*)?(?!\\w)/i,\n      // decimal\n      /\\b\\d[\\d_]*(?:\\.[\\d_]*)?(?:e[+-]?\\d[\\d_]*)?(?!\\w)/i\n    ],\n    directive: {\n      pattern: /\\B#\\w+/,\n      alias: 'property'\n    },\n    label: {\n      pattern: /\\B~\\w+/,\n      alias: 'property'\n    },\n    'type-variable': {\n      pattern: /\\B'\\w+/,\n      alias: 'function'\n    },\n    variant: {\n      pattern: /`\\w+/,\n      alias: 'symbol'\n    },\n    // For the list of keywords and operators,\n    // see: http://caml.inria.fr/pub/docs/manual-ocaml/lex.html#sec84\n    keyword:\n      /\\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\\b/,\n    boolean: /\\b(?:false|true)\\b/,\n    'operator-like-punctuation': {\n      pattern: /\\[[<>|]|[>|]\\]|\\{<|>\\}/,\n      alias: 'punctuation'\n    },\n    // Custom operators are allowed\n    operator:\n      /\\.[.~]|:[=>]|[=<>@^|&+\\-*\\/$%!?~][!$%&*+\\-.\\/:<=>?@^|~]*|\\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\\b/,\n    punctuation: /;;|::|[(){}\\[\\].,:;#]|\\b_\\b/\n  }\n}\n"]},"metadata":{},"sourceType":"module"}