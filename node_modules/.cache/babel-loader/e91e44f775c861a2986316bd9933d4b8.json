{"ast":null,"code":"// @ts-nocheck\nautoit.displayName = 'autoit';\nautoit.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function autoit(Prism) {\n  Prism.languages.autoit = {\n    comment: [/;.*/, {\n      // The multi-line comments delimiters can actually be commented out with \";\"\n      pattern: /(^[\\t ]*)#(?:comments-start|cs)[\\s\\S]*?^[ \\t]*#(?:ce|comments-end)/m,\n      lookbehind: true\n    }],\n    url: {\n      pattern: /(^[\\t ]*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n      lookbehind: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        variable: /([%$@])\\w+\\1/\n      }\n    },\n    directive: {\n      pattern: /(^[\\t ]*)#[\\w-]+/m,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    function: /\\b\\w+(?=\\()/,\n    // Variables and macros\n    variable: /[$@]\\w+/,\n    keyword: /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    boolean: /\\b(?:False|True)\\b/i,\n    operator: /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Not|Or)\\b/i,\n    punctuation: /[\\[\\]().,:]/\n  };\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/autoit.js"],"names":["autoit","displayName","aliases","Prism","languages","comment","pattern","lookbehind","url","string","greedy","inside","variable","directive","alias","function","keyword","number","boolean","operator","punctuation"],"mappings":"AAAA;AACAA,MAAM,CAACC,WAAP,GAAqB,QAArB;AACAD,MAAM,CAACE,OAAP,GAAiB,EAAjB;AAEA;;AACA,eAAe,SAASF,MAAT,CAAgBG,KAAhB,EAAuB;AACpCA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,MAAhB,GAAyB;AACvBK,IAAAA,OAAO,EAAE,CACP,KADO,EAEP;AACE;AACAC,MAAAA,OAAO,EACL,qEAHJ;AAIEC,MAAAA,UAAU,EAAE;AAJd,KAFO,CADc;AAUvBC,IAAAA,GAAG,EAAE;AACHF,MAAAA,OAAO,EAAE,kDADN;AAEHC,MAAAA,UAAU,EAAE;AAFT,KAVkB;AAcvBE,IAAAA,MAAM,EAAE;AACNH,MAAAA,OAAO,EAAE,iCADH;AAENI,MAAAA,MAAM,EAAE,IAFF;AAGNC,MAAAA,MAAM,EAAE;AACNC,QAAAA,QAAQ,EAAE;AADJ;AAHF,KAde;AAqBvBC,IAAAA,SAAS,EAAE;AACTP,MAAAA,OAAO,EAAE,mBADA;AAETC,MAAAA,UAAU,EAAE,IAFH;AAGTO,MAAAA,KAAK,EAAE;AAHE,KArBY;AA0BvBC,IAAAA,QAAQ,EAAE,aA1Ba;AA2BvB;AACAH,IAAAA,QAAQ,EAAE,SA5Ba;AA6BvBI,IAAAA,OAAO,EACL,wOA9BqB;AA+BvBC,IAAAA,MAAM,EAAE,iDA/Be;AAgCvBC,IAAAA,OAAO,EAAE,qBAhCc;AAiCvBC,IAAAA,QAAQ,EAAE,8CAjCa;AAkCvBC,IAAAA,WAAW,EAAE;AAlCU,GAAzB;AAoCD","sourcesContent":["// @ts-nocheck\nautoit.displayName = 'autoit'\nautoit.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function autoit(Prism) {\n  Prism.languages.autoit = {\n    comment: [\n      /;.*/,\n      {\n        // The multi-line comments delimiters can actually be commented out with \";\"\n        pattern:\n          /(^[\\t ]*)#(?:comments-start|cs)[\\s\\S]*?^[ \\t]*#(?:ce|comments-end)/m,\n        lookbehind: true\n      }\n    ],\n    url: {\n      pattern: /(^[\\t ]*#include\\s+)(?:<[^\\r\\n>]+>|\"[^\\r\\n\"]+\")/m,\n      lookbehind: true\n    },\n    string: {\n      pattern: /([\"'])(?:\\1\\1|(?!\\1)[^\\r\\n])*\\1/,\n      greedy: true,\n      inside: {\n        variable: /([%$@])\\w+\\1/\n      }\n    },\n    directive: {\n      pattern: /(^[\\t ]*)#[\\w-]+/m,\n      lookbehind: true,\n      alias: 'keyword'\n    },\n    function: /\\b\\w+(?=\\()/,\n    // Variables and macros\n    variable: /[$@]\\w+/,\n    keyword:\n      /\\b(?:Case|Const|Continue(?:Case|Loop)|Default|Dim|Do|Else(?:If)?|End(?:Func|If|Select|Switch|With)|Enum|Exit(?:Loop)?|For|Func|Global|If|In|Local|Next|Null|ReDim|Select|Static|Step|Switch|Then|To|Until|Volatile|WEnd|While|With)\\b/i,\n    number: /\\b(?:0x[\\da-f]+|\\d+(?:\\.\\d+)?(?:e[+-]?\\d+)?)\\b/i,\n    boolean: /\\b(?:False|True)\\b/i,\n    operator: /<[=>]?|[-+*\\/=&>]=?|[?^]|\\b(?:And|Not|Or)\\b/i,\n    punctuation: /[\\[\\]().,:]/\n  }\n}\n"]},"metadata":{},"sourceType":"module"}