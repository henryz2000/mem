{"ast":null,"code":"/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);\n}\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\n\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list];\n  }\n\n  if (!list || list.length === 0) {\n    return none;\n  }\n\n  var index = -1;\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js"],"names":["patternInScope","stack","pattern","listInScope","inConstruct","notInConstruct","list","none","length","index","includes"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAT,CAAwBC,KAAxB,EAA+BC,OAA/B,EAAwC;AAC7C,SACEC,WAAW,CAACF,KAAD,EAAQC,OAAO,CAACE,WAAhB,EAA6B,IAA7B,CAAX,IACA,CAACD,WAAW,CAACF,KAAD,EAAQC,OAAO,CAACG,cAAhB,EAAgC,KAAhC,CAFd;AAID;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,SAASF,WAAT,CAAqBF,KAArB,EAA4BK,IAA5B,EAAkCC,IAAlC,EAAwC;AACtC,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC5BA,IAAAA,IAAI,GAAG,CAACA,IAAD,CAAP;AACD;;AAED,MAAI,CAACA,IAAD,IAASA,IAAI,CAACE,MAAL,KAAgB,CAA7B,EAAgC;AAC9B,WAAOD,IAAP;AACD;;AAED,MAAIE,KAAK,GAAG,CAAC,CAAb;;AAEA,SAAO,EAAEA,KAAF,GAAUH,IAAI,CAACE,MAAtB,EAA8B;AAC5B,QAAIP,KAAK,CAACS,QAAN,CAAeJ,IAAI,CAACG,KAAD,CAAnB,CAAJ,EAAiC;AAC/B,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD","sourcesContent":["/**\n * @typedef {import('../types.js').Unsafe} Unsafe\n * @typedef {import('../types.js').ConstructName} ConstructName\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n"]},"metadata":{},"sourceType":"module"}