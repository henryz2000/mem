{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  var inDelimiterRow = false;\n  /** @type {Array<Align>} */\n\n  var align = [];\n\n  while (index < events.length) {\n    var event = events[index];\n\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      } // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          var alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      } // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n\n    index += 1;\n  }\n\n  return align;\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/micromark-extension-gfm-table/lib/infer.js"],"names":["gfmTableAlign","events","index","inDelimiterRow","align","length","event","type","push","alignIndex"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAT,CAAuBC,MAAvB,EAA+BC,KAA/B,EAAsC;AAC3C,MAAIC,cAAc,GAAG,KAArB;AACA;;AACA,MAAMC,KAAK,GAAG,EAAd;;AACA,SAAOF,KAAK,GAAGD,MAAM,CAACI,MAAtB,EAA8B;AAC5B,QAAMC,KAAK,GAAGL,MAAM,CAACC,KAAD,CAApB;;AACA,QAAIC,cAAJ,EAAoB;AAClB,UAAIG,KAAK,CAAC,CAAD,CAAL,KAAa,OAAjB,EAA0B;AACxB;AACA;AACA,YAAIA,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,KAAkB,cAAtB,EAAsC;AACpCH,UAAAA,KAAK,CAACI,IAAN,CACEP,MAAM,CAACC,KAAK,GAAG,CAAT,CAAN,CAAkB,CAAlB,EAAqBK,IAArB,KAA8B,sBAA9B,GACI,MADJ,GAEI,MAHN;AAKD;AACF,OAVD,CAWA;AACA;AACA;AAbA,WAcK,IAAID,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,KAAkB,cAAtB,EAAsC;AACzC,YAAIN,MAAM,CAACC,KAAK,GAAG,CAAT,CAAN,CAAkB,CAAlB,EAAqBK,IAArB,KAA8B,sBAAlC,EAA0D;AACxD,cAAME,UAAU,GAAGL,KAAK,CAACC,MAAN,GAAe,CAAlC;AACAD,UAAAA,KAAK,CAACK,UAAD,CAAL,GAAoBL,KAAK,CAACK,UAAD,CAAL,KAAsB,MAAtB,GAA+B,QAA/B,GAA0C,OAA9D;AACD;AACF,OALI,CAML;AANK,WAOA,IAAIH,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,KAAkB,mBAAtB,EAA2C;AAC9C;AACD;AACF,KAzBD,MAyBO,IAAID,KAAK,CAAC,CAAD,CAAL,KAAa,OAAb,IAAwBA,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,KAAkB,mBAA9C,EAAmE;AACxEJ,MAAAA,cAAc,GAAG,IAAjB;AACD;;AACDD,IAAAA,KAAK,IAAI,CAAT;AACD;;AACD,SAAOE,KAAP;AACD","sourcesContent":["/**\n * @typedef {import('micromark-util-types').Event} Event\n */\n\n/**\n * @typedef {'left' | 'center' | 'right' | 'none'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Array<Event>} events\n * @param {number} index\n * @returns {Array<Align>}\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false\n  /** @type {Array<Align>} */\n  const align = []\n  while (index < events.length) {\n    const event = events[index]\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(\n            events[index + 1][1].type === 'tableDelimiterMarker'\n              ? 'left'\n              : 'none'\n          )\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true\n    }\n    index += 1\n  }\n  return align\n}\n"]},"metadata":{},"sourceType":"module"}