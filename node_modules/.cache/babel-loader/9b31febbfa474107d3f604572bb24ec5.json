{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Logger = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nconst types_1 = require(\"./types\");\n/**\n * Default logger which logs to stdout and stderr.\n */\n\n\nclass Logger {\n  constructor({\n    level\n  }) {\n    this.level = level !== null && level !== void 0 ? level : types_1.LogLevel.INFO;\n  }\n  /**\n   * Log a debug message.\n   */\n\n\n  debug(...msg) {\n    if (this.shouldLogSeverity(types_1.LogLevel.DEBUG)) {\n      console.debug(`[debug]`, ...msg);\n    }\n  }\n  /**\n   * Log an info message.\n   */\n\n\n  info(...msg) {\n    if (this.shouldLogSeverity(types_1.LogLevel.INFO)) {\n      console.info(`[info]`, ...msg);\n    }\n  }\n  /**\n   * Log a warning message.\n   */\n\n\n  warn(...msg) {\n    if (this.shouldLogSeverity(types_1.LogLevel.WARN)) {\n      console.warn(`[warn]`, ...msg);\n    }\n  }\n  /**\n   * Log an error message\n   */\n\n\n  error(...msg) {\n    if (this.shouldLogSeverity(types_1.LogLevel.ERROR)) {\n      console.error(`[error]`, ...msg);\n    }\n  }\n  /**\n   * Check if the inputLevel is >= the current log level.\n   */\n\n\n  shouldLogSeverity(inputLevel) {\n    const minimumSeverity = constants_1.logLevelSeverities[this.level];\n    const inputSeverity = constants_1.logLevelSeverities[inputLevel];\n    return inputSeverity >= minimumSeverity;\n  }\n\n}\n\nexports.Logger = Logger;","map":{"version":3,"sources":["../../../src/utils/logger/Logger.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,MAAb,CAAmB;AAIjB,EAAA,WAAA,CAAY;AAAE,IAAA;AAAF,GAAZ,EAA2C;AACzC,SAAK,KAAL,GAAa,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAA,KAAA,GAAS,OAAA,CAAA,QAAA,CAAS,IAA/B;AACD;AAED;;AAEG;;;AACI,EAAA,KAAK,CAAC,GAAG,GAAJ,EAAkB;AAC5B,QAAI,KAAK,iBAAL,CAAuB,OAAA,CAAA,QAAA,CAAS,KAAhC,CAAJ,EAA4C;AAC1C,MAAA,OAAO,CAAC,KAAR,CAAc,SAAd,EAAyB,GAAG,GAA5B;AACD;AACF;AAED;;AAEG;;;AACI,EAAA,IAAI,CAAC,GAAG,GAAJ,EAAkB;AAC3B,QAAI,KAAK,iBAAL,CAAuB,OAAA,CAAA,QAAA,CAAS,IAAhC,CAAJ,EAA2C;AACzC,MAAA,OAAO,CAAC,IAAR,CAAa,QAAb,EAAuB,GAAG,GAA1B;AACD;AACF;AACD;;AAEG;;;AACI,EAAA,IAAI,CAAC,GAAG,GAAJ,EAAkB;AAC3B,QAAI,KAAK,iBAAL,CAAuB,OAAA,CAAA,QAAA,CAAS,IAAhC,CAAJ,EAA2C;AACzC,MAAA,OAAO,CAAC,IAAR,CAAa,QAAb,EAAuB,GAAG,GAA1B;AACD;AACF;AACD;;AAEG;;;AACI,EAAA,KAAK,CAAC,GAAG,GAAJ,EAAkB;AAC5B,QAAI,KAAK,iBAAL,CAAuB,OAAA,CAAA,QAAA,CAAS,KAAhC,CAAJ,EAA4C;AAC1C,MAAA,OAAO,CAAC,KAAR,CAAc,SAAd,EAAyB,GAAG,GAA5B;AACD;AACF;AAED;;AAEG;;;AACK,EAAA,iBAAiB,CAAC,UAAD,EAAqB;AAC5C,UAAM,eAAe,GAAG,WAAA,CAAA,kBAAA,CAAmB,KAAK,KAAxB,CAAxB;AACA,UAAM,aAAa,GAAG,WAAA,CAAA,kBAAA,CAAmB,UAAnB,CAAtB;AAEA,WAAO,aAAa,IAAI,eAAxB;AACD;;AAlDgB;;AAAnB,OAAA,CAAA,MAAA,GAAA,MAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Logger = void 0;\nconst constants_1 = require(\"./constants\");\nconst types_1 = require(\"./types\");\n/**\n * Default logger which logs to stdout and stderr.\n */\nclass Logger {\n    constructor({ level }) {\n        this.level = level !== null && level !== void 0 ? level : types_1.LogLevel.INFO;\n    }\n    /**\n     * Log a debug message.\n     */\n    debug(...msg) {\n        if (this.shouldLogSeverity(types_1.LogLevel.DEBUG)) {\n            console.debug(`[debug]`, ...msg);\n        }\n    }\n    /**\n     * Log an info message.\n     */\n    info(...msg) {\n        if (this.shouldLogSeverity(types_1.LogLevel.INFO)) {\n            console.info(`[info]`, ...msg);\n        }\n    }\n    /**\n     * Log a warning message.\n     */\n    warn(...msg) {\n        if (this.shouldLogSeverity(types_1.LogLevel.WARN)) {\n            console.warn(`[warn]`, ...msg);\n        }\n    }\n    /**\n     * Log an error message\n     */\n    error(...msg) {\n        if (this.shouldLogSeverity(types_1.LogLevel.ERROR)) {\n            console.error(`[error]`, ...msg);\n        }\n    }\n    /**\n     * Check if the inputLevel is >= the current log level.\n     */\n    shouldLogSeverity(inputLevel) {\n        const minimumSeverity = constants_1.logLevelSeverities[this.level];\n        const inputSeverity = constants_1.logLevelSeverities[inputLevel];\n        return inputSeverity >= minimumSeverity;\n    }\n}\nexports.Logger = Logger;\n//# sourceMappingURL=Logger.js.map"]},"metadata":{},"sourceType":"script"}