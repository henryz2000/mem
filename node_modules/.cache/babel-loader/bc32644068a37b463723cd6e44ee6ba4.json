{"ast":null,"code":"/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n\n  /* c8 ignore next 5 */\n  var options = config || {};\n  var now = options.now || {};\n  var lineShift = options.lineShift || 0;\n  var line = now.line || 1;\n  var column = now.column || 1;\n  return {\n    move: move,\n    current: current,\n    shift: shift\n  };\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n\n  function current() {\n    return {\n      now: {\n        line: line,\n        column: column\n      },\n      lineShift: lineShift\n    };\n  }\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n\n\n  function shift(value) {\n    lineShift += value;\n  }\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n\n\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    var value = input || '';\n    var chunks = value.split(/\\r?\\n|\\r/g);\n    var tail = chunks[chunks.length - 1];\n    line += chunks.length - 1;\n    column = chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;\n    return value;\n  }\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/mdast-util-to-markdown/lib/util/track.js"],"names":["track","config","options","now","lineShift","line","column","move","current","shift","value","input","chunks","split","tail","length"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,KAAT,CAAeC,MAAf,EAAuB;AAC5B;AACA;;AACA;AACA,MAAMC,OAAO,GAAGD,MAAM,IAAI,EAA1B;AACA,MAAME,GAAG,GAAGD,OAAO,CAACC,GAAR,IAAe,EAA3B;AACA,MAAIC,SAAS,GAAGF,OAAO,CAACE,SAAR,IAAqB,CAArC;AACA,MAAIC,IAAI,GAAGF,GAAG,CAACE,IAAJ,IAAY,CAAvB;AACA,MAAIC,MAAM,GAAGH,GAAG,CAACG,MAAJ,IAAc,CAA3B;AAEA,SAAO;AAACC,IAAAA,IAAI,EAAJA,IAAD;AAAOC,IAAAA,OAAO,EAAPA,OAAP;AAAgBC,IAAAA,KAAK,EAALA;AAAhB,GAAP;AAEA;AACF;AACA;AACA;AACA;;AACE,WAASD,OAAT,GAAmB;AACjB,WAAO;AAACL,MAAAA,GAAG,EAAE;AAACE,QAAAA,IAAI,EAAJA,IAAD;AAAOC,QAAAA,MAAM,EAANA;AAAP,OAAN;AAAsBF,MAAAA,SAAS,EAATA;AAAtB,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASK,KAAT,CAAeC,KAAf,EAAsB;AACpBN,IAAAA,SAAS,IAAIM,KAAb;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASH,IAAT,CAAcI,KAAd,EAAqB;AACnB;AACA,QAAMD,KAAK,GAAGC,KAAK,IAAI,EAAvB;AACA,QAAMC,MAAM,GAAGF,KAAK,CAACG,KAAN,CAAY,WAAZ,CAAf;AACA,QAAMC,IAAI,GAAGF,MAAM,CAACA,MAAM,CAACG,MAAP,GAAgB,CAAjB,CAAnB;AACAV,IAAAA,IAAI,IAAIO,MAAM,CAACG,MAAP,GAAgB,CAAxB;AACAT,IAAAA,MAAM,GACJM,MAAM,CAACG,MAAP,KAAkB,CAAlB,GAAsBT,MAAM,GAAGQ,IAAI,CAACC,MAApC,GAA6C,IAAID,IAAI,CAACC,MAAT,GAAkBX,SADjE;AAEA,WAAOM,KAAP;AACD;AACF","sourcesContent":["/**\n * @typedef {import('../types.js').CreateTracker} CreateTracker\n * @typedef {import('../types.js').TrackCurrent} TrackCurrent\n * @typedef {import('../types.js').TrackMove} TrackMove\n * @typedef {import('../types.js').TrackShift} TrackShift\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n"]},"metadata":{},"sourceType":"module"}