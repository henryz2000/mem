{"ast":null,"code":"var _slicedToArray = require(\"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\n/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  var res = [];\n  var m;\n\n  var _iterator = _createForOfIteratorHelper(string.split(\",\").map(function (str) {\n    return str.trim();\n  })),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var str = _step.value;\n\n      // just a number\n      if (/^-?\\d+$/.test(str)) {\n        res.push(parseInt(str, 10));\n      } else if (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/)) {\n        // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\n        var _m = m,\n            _m2 = _slicedToArray(_m, 4),\n            _ = _m2[0],\n            lhs = _m2[1],\n            sep = _m2[2],\n            rhs = _m2[3];\n\n        if (lhs && rhs) {\n          lhs = parseInt(lhs);\n          rhs = parseInt(rhs);\n          var incr = lhs < rhs ? 1 : -1; // Make it inclusive by moving the right 'stop-point' away by one.\n\n          if (sep === \"-\" || sep === \"..\" || sep === \"\\u2025\") rhs += incr;\n\n          for (var i = lhs; i !== rhs; i += incr) {\n            res.push(i);\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return res;\n}\n\nexports.default = parsePart;\nmodule.exports = parsePart;","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/parse-numeric-range/index.js"],"names":["parsePart","string","res","m","split","map","str","trim","test","push","parseInt","match","_","lhs","sep","rhs","incr","i","exports","default","module"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;AACzB,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,CAAJ;;AAFyB,6CAITF,MAAM,CAACG,KAAP,CAAa,GAAb,EAAkBC,GAAlB,CAAsB,UAACC,GAAD;AAAA,WAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,GAAtB,CAJS;AAAA;;AAAA;AAIzB,wDAA4D;AAAA,UAAnDD,GAAmD;;AAC1D;AACA,UAAI,UAAUE,IAAV,CAAeF,GAAf,CAAJ,EAAyB;AACvBJ,QAAAA,GAAG,CAACO,IAAJ,CAASC,QAAQ,CAACJ,GAAD,EAAM,EAAN,CAAjB;AACD,OAFD,MAEO,IACJH,CAAC,GAAGG,GAAG,CAACK,KAAJ,CAAU,kDAAV,CADA,EAEL;AACA;AACA,iBAAyBR,CAAzB;AAAA;AAAA,YAAKS,CAAL;AAAA,YAAQC,GAAR;AAAA,YAAaC,GAAb;AAAA,YAAkBC,GAAlB;;AAEA,YAAIF,GAAG,IAAIE,GAAX,EAAgB;AACdF,UAAAA,GAAG,GAAGH,QAAQ,CAACG,GAAD,CAAd;AACAE,UAAAA,GAAG,GAAGL,QAAQ,CAACK,GAAD,CAAd;AACA,cAAMC,IAAI,GAAGH,GAAG,GAAGE,GAAN,GAAY,CAAZ,GAAgB,CAAC,CAA9B,CAHc,CAKd;;AACA,cAAID,GAAG,KAAK,GAAR,IAAeA,GAAG,KAAK,IAAvB,IAA+BA,GAAG,KAAK,QAA3C,EAAqDC,GAAG,IAAIC,IAAP;;AAErD,eAAK,IAAIC,CAAC,GAAGJ,GAAb,EAAkBI,CAAC,KAAKF,GAAxB,EAA6BE,CAAC,IAAID,IAAlC;AAAwCd,YAAAA,GAAG,CAACO,IAAJ,CAASQ,CAAT;AAAxC;AACD;AACF;AACF;AAzBwB;AAAA;AAAA;AAAA;AAAA;;AA2BzB,SAAOf,GAAP;AACD;;AAEDgB,OAAO,CAACC,OAAR,GAAkBnB,SAAlB;AACAoB,MAAM,CAACF,OAAP,GAAiBlB,SAAjB","sourcesContent":["/**\n * @param {string} string    The string to parse\n * @returns {Array<number>}  Returns an energetic array.\n */\nfunction parsePart(string) {\n  let res = [];\n  let m;\n\n  for (let str of string.split(\",\").map((str) => str.trim())) {\n    // just a number\n    if (/^-?\\d+$/.test(str)) {\n      res.push(parseInt(str, 10));\n    } else if (\n      (m = str.match(/^(-?\\d+)(-|\\.\\.\\.?|\\u2025|\\u2026|\\u22EF)(-?\\d+)$/))\n    ) {\n      // 1-5 or 1..5 (equivalent) or 1...5 (doesn't include 5)\n      let [_, lhs, sep, rhs] = m;\n\n      if (lhs && rhs) {\n        lhs = parseInt(lhs);\n        rhs = parseInt(rhs);\n        const incr = lhs < rhs ? 1 : -1;\n\n        // Make it inclusive by moving the right 'stop-point' away by one.\n        if (sep === \"-\" || sep === \"..\" || sep === \"\\u2025\") rhs += incr;\n\n        for (let i = lhs; i !== rhs; i += incr) res.push(i);\n      }\n    }\n  }\n\n  return res;\n}\n\nexports.default = parsePart;\nmodule.exports = parsePart;\n"]},"metadata":{},"sourceType":"script"}