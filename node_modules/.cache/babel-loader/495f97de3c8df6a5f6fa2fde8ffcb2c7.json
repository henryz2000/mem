{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.memClientCreateMem = void 0;\n\nconst types_1 = require(\"../../api/__codegen__/types\");\n\nconst memClientCreateMem = ({\n  memClient\n}) =>\n/**\n * Creates a new mem, then returns the some details about the created mem.\n */\n({\n  memId,\n  content,\n  isRead,\n  isArchived,\n  scheduledFor,\n  createdAt\n}) => __awaiter(void 0, void 0, void 0, function* () {\n  const input = {\n    memId: memId !== null && memId !== void 0 ? memId : null,\n    content,\n    format: null,\n    isRead: isRead !== null && isRead !== void 0 ? isRead : null,\n    isArchived: isArchived !== null && isArchived !== void 0 ? isArchived : null,\n    scheduledFor: scheduledFor !== null && scheduledFor !== void 0 ? scheduledFor : null,\n    createdAt: createdAt !== null && createdAt !== void 0 ? createdAt : null,\n    richTextDocument: null,\n    source: null,\n    clientId: null\n  };\n  const result = yield memClient.graphqlRequest(types_1.CreateMemDocument, {\n    input\n  });\n  const memData = result.createMem.mem;\n  return memData;\n});\n\nexports.memClientCreateMem = memClientCreateMem;","map":{"version":3,"sources":["../../../src/mem-client/methods/createMem.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAeO,MAAM,kBAAkB,GAC7B,CAAC;AAAE,EAAA;AAAF,CAAD;AACA;;AAEG;AACH,CAAO;AACL,EAAA,KADK;AAEL,EAAA,OAFK;AAGL,EAAA,MAHK;AAIL,EAAA,UAJK;AAKL,EAAA,YALK;AAML,EAAA;AANK,CAAP,KAO6B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AAC3B,QAAM,KAAK,GAAG;AACZ,IAAA,KAAK,EAAE,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAA,KAAA,GAAS,IADJ;AAEZ,IAAA,OAFY;AAGZ,IAAA,MAAM,EAAE,IAHI;AAIZ,IAAA,MAAM,EAAE,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GAAU,IAJN;AAKZ,IAAA,UAAU,EAAE,UAAU,KAAA,IAAV,IAAA,UAAU,KAAA,KAAA,CAAV,GAAA,UAAA,GAAc,IALd;AAMZ,IAAA,YAAY,EAAE,YAAY,KAAA,IAAZ,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAA,YAAA,GAAgB,IANlB;AAOZ,IAAA,SAAS,EAAE,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAA,SAAA,GAAa,IAPZ;AAQZ,IAAA,gBAAgB,EAAE,IARN;AASZ,IAAA,MAAM,EAAE,IATI;AAUZ,IAAA,QAAQ,EAAE;AAVE,GAAd;AAaA,QAAM,MAAM,GAAG,MAAM,SAAS,CAAC,cAAV,CAAyB,OAAA,CAAA,iBAAzB,EAA4C;AAC/D,IAAA;AAD+D,GAA5C,CAArB;AAIA,QAAM,OAAO,GAAG,MAAM,CAAC,SAAP,CAAiB,GAAjC;AAEA,SAAO,OAAP;AACD,CArB4B,CAZxB;;AAAM,OAAA,CAAA,kBAAA,GAAkB,kBAAlB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.memClientCreateMem = void 0;\nconst types_1 = require(\"../../api/__codegen__/types\");\nconst memClientCreateMem = ({ memClient }) => \n/**\n * Creates a new mem, then returns the some details about the created mem.\n */\n({ memId, content, isRead, isArchived, scheduledFor, createdAt, }) => __awaiter(void 0, void 0, void 0, function* () {\n    const input = {\n        memId: memId !== null && memId !== void 0 ? memId : null,\n        content,\n        format: null,\n        isRead: isRead !== null && isRead !== void 0 ? isRead : null,\n        isArchived: isArchived !== null && isArchived !== void 0 ? isArchived : null,\n        scheduledFor: scheduledFor !== null && scheduledFor !== void 0 ? scheduledFor : null,\n        createdAt: createdAt !== null && createdAt !== void 0 ? createdAt : null,\n        richTextDocument: null,\n        source: null,\n        clientId: null,\n    };\n    const result = yield memClient.graphqlRequest(types_1.CreateMemDocument, {\n        input,\n    });\n    const memData = result.createMem.mem;\n    return memData;\n});\nexports.memClientCreateMem = memClientCreateMem;\n//# sourceMappingURL=createMem.js.map"]},"metadata":{},"sourceType":"script"}