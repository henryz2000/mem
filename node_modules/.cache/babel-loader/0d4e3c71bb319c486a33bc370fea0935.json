{"ast":null,"code":"// @ts-nocheck\npuppet.displayName = 'puppet';\npuppet.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function puppet(Prism) {\n  ;\n\n  (function (Prism) {\n    Prism.languages.puppet = {\n      heredoc: [// Matches the content of a quoted heredoc string (subject to interpolation)\n      {\n        pattern: /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n        lookbehind: true,\n        alias: 'string',\n        inside: {\n          // Matches the end tag\n          punctuation: /(?=\\S).*\\S(?= *$)/ // See interpolation below\n\n        }\n      }, // Matches the content of an unquoted heredoc string (no interpolation)\n      {\n        pattern: /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          // Matches the end tag\n          punctuation: /(?=\\S).*\\S(?= *$)/\n        }\n      }, // Matches the start tag of heredoc strings\n      {\n        pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n        alias: 'string',\n        inside: {\n          punctuation: {\n            pattern: /(\\().+?(?=\\))/,\n            lookbehind: true\n          }\n        }\n      }],\n      'multiline-comment': {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      },\n      regex: {\n        // Must be prefixed with the keyword \"node\" or a non-word char\n        pattern: /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          // Extended regexes must have the x flag. They can contain single-line comments.\n          'extended-regex': {\n            pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n            inside: {\n              comment: /#.*/\n            }\n          }\n        }\n      },\n      comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        greedy: true\n      },\n      string: {\n        // Allow for one nested level of double quotes inside interpolation\n        pattern: /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          'double-quoted': {\n            pattern: /^\"[\\s\\S]*\"$/,\n            inside: {// See interpolation below\n            }\n          }\n        }\n      },\n      variable: {\n        pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      'attr-name': /(?:\\b\\w+|\\*)(?=\\s*=>)/,\n      function: [{\n        pattern: /(\\.)(?!\\d)\\w+/,\n        lookbehind: true\n      }, /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/],\n      number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n      boolean: /\\b(?:false|true)\\b/,\n      // Includes words reserved for future use\n      keyword: /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n      datatype: {\n        pattern: /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n        alias: 'symbol'\n      },\n      operator: /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n      punctuation: /[\\[\\]{}().,;]|:+/\n    };\n    var interpolation = [{\n      // Allow for one nested level of braces inside interpolation\n      pattern: /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n      lookbehind: true,\n      inside: {\n        'short-variable': {\n          // Negative look-ahead prevent wrong highlighting of functions\n          pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n          lookbehind: true,\n          alias: 'variable',\n          inside: {\n            punctuation: /::/\n          }\n        },\n        delimiter: {\n          pattern: /^\\$/,\n          alias: 'variable'\n        },\n        rest: Prism.languages.puppet\n      }\n    }, {\n      pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n      lookbehind: true,\n      alias: 'variable',\n      inside: {\n        punctuation: /::/\n      }\n    }];\n    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation;\n    Prism.languages.puppet['string'].inside['double-quoted'].inside.interpolation = interpolation;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/puppet.js"],"names":["puppet","displayName","aliases","Prism","languages","heredoc","pattern","lookbehind","alias","inside","punctuation","greedy","regex","comment","string","variable","function","number","boolean","keyword","datatype","operator","interpolation","delimiter","rest"],"mappings":"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","sourcesContent":["// @ts-nocheck\npuppet.displayName = 'puppet'\npuppet.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function puppet(Prism) {\n  ;(function (Prism) {\n    Prism.languages.puppet = {\n      heredoc: [\n        // Matches the content of a quoted heredoc string (subject to interpolation)\n        {\n          pattern:\n            /(@\\(\"([^\"\\r\\n\\/):]+)\"(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n          lookbehind: true,\n          alias: 'string',\n          inside: {\n            // Matches the end tag\n            punctuation: /(?=\\S).*\\S(?= *$)/\n            // See interpolation below\n          }\n        },\n        // Matches the content of an unquoted heredoc string (no interpolation)\n        {\n          pattern:\n            /(@\\(([^\"\\r\\n\\/):]+)(?:\\/[nrts$uL]*)?\\).*(?:\\r?\\n|\\r))(?:.*(?:\\r?\\n|\\r(?!\\n)))*?[ \\t]*(?:\\|[ \\t]*)?(?:-[ \\t]*)?\\2/,\n          lookbehind: true,\n          greedy: true,\n          alias: 'string',\n          inside: {\n            // Matches the end tag\n            punctuation: /(?=\\S).*\\S(?= *$)/\n          }\n        },\n        // Matches the start tag of heredoc strings\n        {\n          pattern: /@\\(\"?(?:[^\"\\r\\n\\/):]+)\"?(?:\\/[nrts$uL]*)?\\)/,\n          alias: 'string',\n          inside: {\n            punctuation: {\n              pattern: /(\\().+?(?=\\))/,\n              lookbehind: true\n            }\n          }\n        }\n      ],\n      'multiline-comment': {\n        pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?\\*\\//,\n        lookbehind: true,\n        greedy: true,\n        alias: 'comment'\n      },\n      regex: {\n        // Must be prefixed with the keyword \"node\" or a non-word char\n        pattern:\n          /((?:\\bnode\\s+|[~=\\(\\[\\{,]\\s*|[=+]>\\s*|^\\s*))\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/(?:[imx]+\\b|\\B)/,\n        lookbehind: true,\n        greedy: true,\n        inside: {\n          // Extended regexes must have the x flag. They can contain single-line comments.\n          'extended-regex': {\n            pattern: /^\\/(?:[^\\/\\\\]|\\\\[\\s\\S])+\\/[im]*x[im]*$/,\n            inside: {\n              comment: /#.*/\n            }\n          }\n        }\n      },\n      comment: {\n        pattern: /(^|[^\\\\])#.*/,\n        lookbehind: true,\n        greedy: true\n      },\n      string: {\n        // Allow for one nested level of double quotes inside interpolation\n        pattern:\n          /([\"'])(?:\\$\\{(?:[^'\"}]|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}|\\$(?!\\{)|(?!\\1)[^\\\\$]|\\\\[\\s\\S])*\\1/,\n        greedy: true,\n        inside: {\n          'double-quoted': {\n            pattern: /^\"[\\s\\S]*\"$/,\n            inside: {\n              // See interpolation below\n            }\n          }\n        }\n      },\n      variable: {\n        pattern: /\\$(?:::)?\\w+(?:::\\w+)*/,\n        inside: {\n          punctuation: /::/\n        }\n      },\n      'attr-name': /(?:\\b\\w+|\\*)(?=\\s*=>)/,\n      function: [\n        {\n          pattern: /(\\.)(?!\\d)\\w+/,\n          lookbehind: true\n        },\n        /\\b(?:contain|debug|err|fail|include|info|notice|realize|require|tag|warning)\\b|\\b(?!\\d)\\w+(?=\\()/\n      ],\n      number: /\\b(?:0x[a-f\\d]+|\\d+(?:\\.\\d+)?(?:e-?\\d+)?)\\b/i,\n      boolean: /\\b(?:false|true)\\b/,\n      // Includes words reserved for future use\n      keyword:\n        /\\b(?:application|attr|case|class|consumes|default|define|else|elsif|function|if|import|inherits|node|private|produces|type|undef|unless)\\b/,\n      datatype: {\n        pattern:\n          /\\b(?:Any|Array|Boolean|Callable|Catalogentry|Class|Collection|Data|Default|Enum|Float|Hash|Integer|NotUndef|Numeric|Optional|Pattern|Regexp|Resource|Runtime|Scalar|String|Struct|Tuple|Type|Undef|Variant)\\b/,\n        alias: 'symbol'\n      },\n      operator:\n        /=[=~>]?|![=~]?|<(?:<\\|?|[=~|-])?|>[>=]?|->?|~>|\\|>?>?|[*\\/%+?]|\\b(?:and|in|or)\\b/,\n      punctuation: /[\\[\\]{}().,;]|:+/\n    }\n    var interpolation = [\n      {\n        // Allow for one nested level of braces inside interpolation\n        pattern:\n          /(^|[^\\\\])\\$\\{(?:[^'\"{}]|\\{[^}]*\\}|([\"'])(?:(?!\\2)[^\\\\]|\\\\[\\s\\S])*\\2)+\\}/,\n        lookbehind: true,\n        inside: {\n          'short-variable': {\n            // Negative look-ahead prevent wrong highlighting of functions\n            pattern: /(^\\$\\{)(?!\\w+\\()(?:::)?\\w+(?:::\\w+)*/,\n            lookbehind: true,\n            alias: 'variable',\n            inside: {\n              punctuation: /::/\n            }\n          },\n          delimiter: {\n            pattern: /^\\$/,\n            alias: 'variable'\n          },\n          rest: Prism.languages.puppet\n        }\n      },\n      {\n        pattern: /(^|[^\\\\])\\$(?:::)?\\w+(?:::\\w+)*/,\n        lookbehind: true,\n        alias: 'variable',\n        inside: {\n          punctuation: /::/\n        }\n      }\n    ]\n    Prism.languages.puppet['heredoc'][0].inside.interpolation = interpolation\n    Prism.languages.puppet['string'].inside[\n      'double-quoted'\n    ].inside.interpolation = interpolation\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"module"}