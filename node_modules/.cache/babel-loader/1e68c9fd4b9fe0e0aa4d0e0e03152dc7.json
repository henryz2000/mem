{"ast":null,"code":"import _toConsumableArray from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\nimport bufferLike from 'is-buffer';\nimport { VFileMessage } from 'vfile-message';\nimport { path } from './minpath.js';\nimport { proc } from './minproc.js';\nimport { urlToPath, isUrl } from './minurl.js';\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\n\nvar order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];\nexport var VFile = /*#__PURE__*/function () {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  function VFile(value) {\n    _classCallCheck(this, VFile);\n\n    /** @type {Options | VFile} */\n    var options;\n\n    if (!value) {\n      options = {};\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {\n        value: value\n      };\n    } else if (isUrl(value)) {\n      options = {\n        path: value\n      };\n    } else {\n      options = value;\n    }\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n\n\n    this.data = {};\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n\n    this.messages = [];\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n\n    this.history = [];\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n\n    this.cwd = proc.cwd();\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n\n    this.value; // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n\n    this.stored;\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n\n    this.result;\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n\n    this.map;\n    /* eslint-enable no-unused-expressions */\n    // Set path related properties in the correct order.\n\n    var index = -1;\n\n    while (++index < order.length) {\n      var _prop = order[index]; // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n\n      if (_prop in options && options[_prop] !== undefined && options[_prop] !== null) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[_prop] = _prop === 'history' ? _toConsumableArray(options[_prop]) : options[_prop];\n      }\n    }\n    /** @type {string} */\n\n\n    var prop; // Set non-path related properties.\n\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop];\n      }\n    }\n  }\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n\n\n  _createClass(VFile, [{\n    key: \"path\",\n    get: function get() {\n      return this.history[this.history.length - 1];\n    }\n    /**\n     * Set the full path (example: `'~/index.min.js'`).\n     *\n     * Cannot be nullified.\n     * You can set a file URL (a `URL` object with a `file:` protocol) which will\n     * be turned into a path with `url.fileURLToPath`.\n     *\n     * @param {string | URL} path\n     */\n    ,\n    set: function set(path) {\n      if (isUrl(path)) {\n        path = urlToPath(path);\n      }\n\n      assertNonEmpty(path, 'path');\n\n      if (this.path !== path) {\n        this.history.push(path);\n      }\n    }\n    /**\n     * Get the parent path (example: `'~'`).\n     */\n\n  }, {\n    key: \"dirname\",\n    get: function get() {\n      return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n    }\n    /**\n     * Set the parent path (example: `'~'`).\n     *\n     * Cannot be set if there’s no `path` yet.\n     */\n    ,\n    set: function set(dirname) {\n      assertPath(this.basename, 'dirname');\n      this.path = path.join(dirname || '', this.basename);\n    }\n    /**\n     * Get the basename (including extname) (example: `'index.min.js'`).\n     */\n\n  }, {\n    key: \"basename\",\n    get: function get() {\n      return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n    }\n    /**\n     * Set basename (including extname) (`'index.min.js'`).\n     *\n     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n     * on windows).\n     * Cannot be nullified (use `file.path = file.dirname` instead).\n     */\n    ,\n    set: function set(basename) {\n      assertNonEmpty(basename, 'basename');\n      assertPart(basename, 'basename');\n      this.path = path.join(this.dirname || '', basename);\n    }\n    /**\n     * Get the extname (including dot) (example: `'.js'`).\n     */\n\n  }, {\n    key: \"extname\",\n    get: function get() {\n      return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n    }\n    /**\n     * Set the extname (including dot) (example: `'.js'`).\n     *\n     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n     * on windows).\n     * Cannot be set if there’s no `path` yet.\n     */\n    ,\n    set: function set(extname) {\n      assertPart(extname, 'extname');\n      assertPath(this.dirname, 'extname');\n\n      if (extname) {\n        if (extname.charCodeAt(0) !== 46\n        /* `.` */\n        ) {\n          throw new Error('`extname` must start with `.`');\n        }\n\n        if (extname.includes('.', 1)) {\n          throw new Error('`extname` cannot contain multiple dots');\n        }\n      }\n\n      this.path = path.join(this.dirname, this.stem + (extname || ''));\n    }\n    /**\n     * Get the stem (basename w/o extname) (example: `'index.min'`).\n     */\n\n  }, {\n    key: \"stem\",\n    get: function get() {\n      return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n    }\n    /**\n     * Set the stem (basename w/o extname) (example: `'index.min'`).\n     *\n     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n     * on windows).\n     * Cannot be nullified (use `file.path = file.dirname` instead).\n     */\n    ,\n    set: function set(stem) {\n      assertNonEmpty(stem, 'stem');\n      assertPart(stem, 'stem');\n      this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n    }\n    /**\n     * Serialize the file.\n     *\n     * @param {BufferEncoding | null | undefined} [encoding='utf8']\n     *   Character encoding to understand `value` as when it’s a `Buffer`\n     *   (default: `'utf8'`).\n     * @returns {string}\n     *   Serialized file.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString(encoding) {\n      return (this.value || '').toString(encoding || undefined);\n    }\n    /**\n     * Create a warning message associated with the file.\n     *\n     * Its `fatal` is set to `false` and `file` is set to the current file path.\n     * Its added to `file.messages`.\n     *\n     * @param {string | Error | VFileMessage} reason\n     *   Reason for message, uses the stack and message of the error if given.\n     * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n     *   Place in file where the message occurred.\n     * @param {string | null | undefined} [origin]\n     *   Place in code where the message originates (example:\n     *   `'my-package:my-rule'` or `'my-rule'`).\n     * @returns {VFileMessage}\n     *   Message.\n     */\n\n  }, {\n    key: \"message\",\n    value: function message(reason, place, origin) {\n      var message = new VFileMessage(reason, place, origin);\n\n      if (this.path) {\n        message.name = this.path + ':' + message.name;\n        message.file = this.path;\n      }\n\n      message.fatal = false;\n      this.messages.push(message);\n      return message;\n    }\n    /**\n     * Create an info message associated with the file.\n     *\n     * Its `fatal` is set to `null` and `file` is set to the current file path.\n     * Its added to `file.messages`.\n     *\n     * @param {string | Error | VFileMessage} reason\n     *   Reason for message, uses the stack and message of the error if given.\n     * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n     *   Place in file where the message occurred.\n     * @param {string | null | undefined} [origin]\n     *   Place in code where the message originates (example:\n     *   `'my-package:my-rule'` or `'my-rule'`).\n     * @returns {VFileMessage}\n     *   Message.\n     */\n\n  }, {\n    key: \"info\",\n    value: function info(reason, place, origin) {\n      var message = this.message(reason, place, origin);\n      message.fatal = null;\n      return message;\n    }\n    /**\n     * Create a fatal error associated with the file.\n     *\n     * Its `fatal` is set to `true` and `file` is set to the current file path.\n     * Its added to `file.messages`.\n     *\n     * > 👉 **Note**: a fatal error means that a file is no longer processable.\n     *\n     * @param {string | Error | VFileMessage} reason\n     *   Reason for message, uses the stack and message of the error if given.\n     * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n     *   Place in file where the message occurred.\n     * @param {string | null | undefined} [origin]\n     *   Place in code where the message originates (example:\n     *   `'my-package:my-rule'` or `'my-rule'`).\n     * @returns {never}\n     *   Message.\n     * @throws {VFileMessage}\n     *   Message.\n     */\n\n  }, {\n    key: \"fail\",\n    value: function fail(reason, place, origin) {\n      var message = this.message(reason, place, origin);\n      message.fatal = true;\n      throw message;\n    }\n  }]);\n\n  return VFile;\n}();\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\n\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\n\n\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\n\n\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\n\n\nfunction buffer(value) {\n  return bufferLike(value);\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/vfile/lib/index.js"],"names":["bufferLike","VFileMessage","path","proc","urlToPath","isUrl","order","VFile","value","options","buffer","data","messages","history","cwd","stored","result","map","index","length","prop","undefined","includes","assertNonEmpty","push","dirname","assertPath","basename","join","assertPart","extname","charCodeAt","Error","stem","encoding","toString","reason","place","origin","message","name","file","fatal","part","sep"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,UAAP,MAAuB,WAAvB;AACA,SAAQC,YAAR,QAA2B,eAA3B;AACA,SAAQC,IAAR,QAAmB,cAAnB;AACA,SAAQC,IAAR,QAAmB,cAAnB;AACA,SAAQC,SAAR,EAAmBC,KAAnB,QAA+B,aAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,KAAK,GAAG,CAAC,SAAD,EAAY,MAAZ,EAAoB,UAApB,EAAgC,MAAhC,EAAwC,SAAxC,EAAmD,SAAnD,CAAd;AAEA,WAAaC,KAAb;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,iBAAYC,KAAZ,EAAmB;AAAA;;AACjB;AACA,QAAIC,OAAJ;;AAEA,QAAI,CAACD,KAAL,EAAY;AACVC,MAAAA,OAAO,GAAG,EAAV;AACD,KAFD,MAEO,IAAI,OAAOD,KAAP,KAAiB,QAAjB,IAA6BE,MAAM,CAACF,KAAD,CAAvC,EAAgD;AACrDC,MAAAA,OAAO,GAAG;AAACD,QAAAA,KAAK,EAALA;AAAD,OAAV;AACD,KAFM,MAEA,IAAIH,KAAK,CAACG,KAAD,CAAT,EAAkB;AACvBC,MAAAA,OAAO,GAAG;AAACP,QAAAA,IAAI,EAAEM;AAAP,OAAV;AACD,KAFM,MAEA;AACLC,MAAAA,OAAO,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","sourcesContent":["/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Position} Position\n * @typedef {import('unist').Point} Point\n * @typedef {import('./minurl.shared.js').URL} URL\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Value} Value\n */\n\n/**\n * @typedef {Record<string, unknown> & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef {'ascii' | 'utf8' | 'utf-8' | 'utf16le' | 'ucs2' | 'ucs-2' | 'base64' | 'base64url' | 'latin1' | 'binary' | 'hex'} BufferEncoding\n *   Encodings supported by the buffer class.\n *\n *   This is a copy of the types from Node, copied to prevent Node globals from\n *   being needed.\n *   Copied from: <https://github.com/DefinitelyTyped/DefinitelyTyped/blob/90a4ec8/types/node/buffer.d.ts#L170>\n *\n * @typedef {Options | URL | Value | VFile} Compatible\n *   Things that can be passed to the constructor.\n *\n * @typedef VFileCoreOptions\n *   Set multiple values.\n * @property {Value | null | undefined} [value]\n *   Set `value`.\n * @property {string | null | undefined} [cwd]\n *   Set `cwd`.\n * @property {Array<string> | null | undefined} [history]\n *   Set `history`.\n * @property {URL | string | null | undefined} [path]\n *   Set `path`.\n * @property {string | null | undefined} [basename]\n *   Set `basename`.\n * @property {string | null | undefined} [stem]\n *   Set `stem`.\n * @property {string | null | undefined} [extname]\n *   Set `extname`.\n * @property {string | null | undefined} [dirname]\n *   Set `dirname`.\n * @property {Data | null | undefined} [data]\n *   Set `data`.\n *\n * @typedef Map\n *   Raw source map.\n *\n *   See:\n *   <https://github.com/mozilla/source-map/blob/58819f0/source-map.d.ts#L15-L23>.\n * @property {number} version\n *   Which version of the source map spec this map is following.\n * @property {Array<string>} sources\n *   An array of URLs to the original source files.\n * @property {Array<string>} names\n *   An array of identifiers which can be referenced by individual mappings.\n * @property {string | undefined} [sourceRoot]\n *   The URL root from which all sources are relative.\n * @property {Array<string> | undefined} [sourcesContent]\n *   An array of contents of the original source files.\n * @property {string} mappings\n *   A string of base64 VLQs which contain the actual mappings.\n * @property {string} file\n *   The generated file this source map is associated with.\n *\n * @typedef {{[key: string]: unknown} & VFileCoreOptions} Options\n *   Configuration.\n *\n *   A bunch of keys that will be shallow copied over to the new file.\n *\n * @typedef {Record<string, unknown>} ReporterSettings\n *   Configuration for reporters.\n */\n\n/**\n * @template {ReporterSettings} Settings\n *   Options type.\n * @callback Reporter\n *   Type for a reporter.\n * @param {Array<VFile>} files\n *   Files to report.\n * @param {Settings} options\n *   Configuration.\n * @returns {string}\n *   Report.\n */\n\nimport bufferLike from 'is-buffer'\nimport {VFileMessage} from 'vfile-message'\nimport {path} from './minpath.js'\nimport {proc} from './minproc.js'\nimport {urlToPath, isUrl} from './minurl.js'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n *\n * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}\n */\nconst order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname']\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Buffer` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (typeof value === 'string' || buffer(value)) {\n      options = {value}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else {\n      options = value\n    }\n\n    /**\n     * Place to store custom information (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * List of filepaths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    this.cwd = proc.cwd()\n\n    /* eslint-disable no-unused-expressions */\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const prop = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        prop in options &&\n        options[prop] !== undefined &&\n        options[prop] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[prop] = prop === 'history' ? [...options[prop]] : options[prop]\n      }\n    }\n\n    /** @type {string} */\n    let prop\n\n    // Set non-path related properties.\n    for (prop in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(prop)) {\n        // @ts-expect-error: fine to set other things.\n        this[prop] = options[prop]\n      }\n    }\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {string | URL} path\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   */\n  get dirname() {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = path.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   */\n  get basename() {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = path.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   */\n  get extname() {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.charCodeAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = path.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? path.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * @param {BufferEncoding | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Buffer`\n   *   (default: `'utf8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    return (this.value || '').toString(encoding || undefined)\n  }\n\n  /**\n   * Create a warning message associated with the file.\n   *\n   * Its `fatal` is set to `false` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(reason, place, origin) {\n    const message = new VFileMessage(reason, place, origin)\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Create an info message associated with the file.\n   *\n   * Its `fatal` is set to `null` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = null\n\n    return message\n  }\n\n  /**\n   * Create a fatal error associated with the file.\n   *\n   * Its `fatal` is set to `true` and `file` is set to the current file path.\n   * Its added to `file.messages`.\n   *\n   * > 👉 **Note**: a fatal error means that a file is no longer processable.\n   *\n   * @param {string | Error | VFileMessage} reason\n   *   Reason for message, uses the stack and message of the error if given.\n   * @param {Node | NodeLike | Position | Point | null | undefined} [place]\n   *   Place in file where the message occurred.\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Message.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(reason, place, origin) {\n    const message = this.message(reason, place, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {void}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(path.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is a buffer.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Buffer}\n *   Whether `value` is a Node.js buffer.\n */\nfunction buffer(value) {\n  return bufferLike(value)\n}\n"]},"metadata":{},"sourceType":"module"}