{"ast":null,"code":"// @ts-nocheck\nebnf.displayName = 'ebnf';\nebnf.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function ebnf(Prism) {\n  Prism.languages.ebnf = {\n    comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n      greedy: true\n    },\n    special: {\n      pattern: /\\?[^?\\r\\n]*\\?/,\n      greedy: true,\n      alias: 'class-name'\n    },\n    definition: {\n      pattern: /^([\\t ]*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,\n      lookbehind: true,\n      alias: ['rule', 'keyword']\n    },\n    rule: /\\b[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*\\b/i,\n    punctuation: /\\([:/]|[:/]\\)|[.,;()[\\]{}]/,\n    operator: /[-=|*/!]/\n  };\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/ebnf.js"],"names":["ebnf","displayName","aliases","Prism","languages","comment","string","pattern","greedy","special","alias","definition","lookbehind","rule","punctuation","operator"],"mappings":"AAAA;AACAA,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;AAEA;;AACA,eAAe,SAASF,IAAT,CAAcG,KAAd,EAAqB;AAClCA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,IAAhB,GAAuB;AACrBK,IAAAA,OAAO,EAAE,kBADY;AAErBC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,yBADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAFa;AAMrBC,IAAAA,OAAO,EAAE;AACPF,MAAAA,OAAO,EAAE,eADF;AAEPC,MAAAA,MAAM,EAAE,IAFD;AAGPE,MAAAA,KAAK,EAAE;AAHA,KANY;AAWrBC,IAAAA,UAAU,EAAE;AACVJ,MAAAA,OAAO,EAAE,gDADC;AAEVK,MAAAA,UAAU,EAAE,IAFF;AAGVF,MAAAA,KAAK,EAAE,CAAC,MAAD,EAAS,SAAT;AAHG,KAXS;AAgBrBG,IAAAA,IAAI,EAAE,kCAhBe;AAiBrBC,IAAAA,WAAW,EAAE,4BAjBQ;AAkBrBC,IAAAA,QAAQ,EAAE;AAlBW,GAAvB;AAoBD","sourcesContent":["// @ts-nocheck\nebnf.displayName = 'ebnf'\nebnf.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function ebnf(Prism) {\n  Prism.languages.ebnf = {\n    comment: /\\(\\*[\\s\\S]*?\\*\\)/,\n    string: {\n      pattern: /\"[^\"\\r\\n]*\"|'[^'\\r\\n]*'/,\n      greedy: true\n    },\n    special: {\n      pattern: /\\?[^?\\r\\n]*\\?/,\n      greedy: true,\n      alias: 'class-name'\n    },\n    definition: {\n      pattern: /^([\\t ]*)[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*(?=\\s*=)/im,\n      lookbehind: true,\n      alias: ['rule', 'keyword']\n    },\n    rule: /\\b[a-z]\\w*(?:[ \\t]+[a-z]\\w*)*\\b/i,\n    punctuation: /\\([:/]|[:/]\\)|[.,;()[\\]{}]/,\n    operator: /[-=|*/!]/\n  }\n}\n"]},"metadata":{},"sourceType":"module"}