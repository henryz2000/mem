{"ast":null,"code":"// @ts-nocheck\nimport refractorClike from './clike.js';\nhaxe.displayName = 'haxe';\nhaxe.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function haxe(Prism) {\n  Prism.register(refractorClike);\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    string: {\n      // Strings can be multi-line\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    'class-name': [{\n      pattern: /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n      lookbehind: true\n    }, // based on naming convention\n    /\\b[A-Z]\\w*/],\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword: /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n    function: {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\n      greedy: true\n    },\n    operator: /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\n  });\n  Prism.languages.insertBefore('haxe', 'string', {\n    'string-interpolation': {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{?|\\}$/,\n              alias: 'punctuation'\n            },\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.haxe\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  });\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\n      greedy: true,\n      inside: {\n        'regex-flags': /\\b[a-z]+$/,\n        'regex-source': {\n          pattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^~\\/|\\/$/\n      }\n    }\n  });\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#(?:else|elseif|end|if)\\b.*/,\n      alias: 'property'\n    },\n    metadata: {\n      pattern: /@:?[\\w.]+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'important'\n    }\n  });\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/haxe.js"],"names":["refractorClike","haxe","displayName","aliases","Prism","register","languages","extend","string","pattern","greedy","lookbehind","keyword","function","operator","insertBefore","inside","interpolation","alias","expression","regex","preprocessor","metadata","reification"],"mappings":"AAAA;AACA,OAAOA,cAAP,MAA2B,YAA3B;AACAC,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;AAEA;;AACA,eAAe,SAASF,IAAT,CAAcG,KAAd,EAAqB;AAClCA,EAAAA,KAAK,CAACC,QAAN,CAAeL,cAAf;AACAI,EAAAA,KAAK,CAACE,SAAN,CAAgBL,IAAhB,GAAuBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,OAAvB,EAAgC;AACrDC,IAAAA,MAAM,EAAE;AACN;AACAC,MAAAA,OAAO,EAAE,wBAFH;AAGNC,MAAAA,MAAM,EAAE;AAHF,KAD6C;AAMrD,kBAAc,CACZ;AACED,MAAAA,OAAO,EACL,kFAFJ;AAGEE,MAAAA,UAAU,EAAE;AAHd,KADY,EAMZ;AACA,gBAPY,CANuC;AAerD;AACAC,IAAAA,OAAO,EACL,+TAjBmD;AAkBrDC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,OAAO,EAAE,uCADD;AAERC,MAAAA,MAAM,EAAE;AAFA,KAlB2C;AAsBrDI,IAAAA,QAAQ,EAAE;AAtB2C,GAAhC,CAAvB;AAwBAV,EAAAA,KAAK,CAACE,SAAN,CAAgBS,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC7C,4BAAwB;AACtBN,MAAAA,OAAO,EAAE,wBADa;AAEtBC,MAAAA,MAAM,EAAE,IAFc;AAGtBM,MAAAA,MAAM,EAAE;AACNC,QAAAA,aAAa,EAAE;AACbR,UAAAA,OAAO,EAAE,+BADI;AAEbE,UAAAA,UAAU,EAAE,IAFC;AAGbK,UAAAA,MAAM,EAAE;AACN,yCAA6B;AAC3BP,cAAAA,OAAO,EAAE,YADkB;AAE3BS,cAAAA,KAAK,EAAE;AAFoB,aADvB;AAKNC,YAAAA,UAAU,EAAE;AACVV,cAAAA,OAAO,EAAE,SADC;AAEVO,cAAAA,MAAM,EAAEZ,KAAK,CAACE,SAAN,CAAgBL;AAFd;AALN;AAHK,SADT;AAeNO,QAAAA,MAAM,EAAE;AAfF;AAHc;AADqB,GAA/C;AAuBAJ,EAAAA,KAAK,CAACE,SAAN,CAAgBS,YAAhB,CAA6B,MAA7B,EAAqC,YAArC,EAAmD;AACjDK,IAAAA,KAAK,EAAE;AACLX,MAAAA,OAAO,EAAE,iCADJ;AAELC,MAAAA,MAAM,EAAE,IAFH;AAGLM,MAAAA,MAAM,EAAE;AACN,uBAAe,WADT;AAEN,wBAAgB;AACdP,UAAAA,OAAO,EAAE,sBADK;AAEdE,UAAAA,UAAU,EAAE,IAFE;AAGdO,UAAAA,KAAK,EAAE,gBAHO;AAIdF,UAAAA,MAAM,EAAEZ,KAAK,CAACE,SAAN,CAAgBc;AAJV,SAFV;AAQN,2BAAmB;AARb;AAHH;AAD0C,GAAnD;AAgBAhB,EAAAA,KAAK,CAACE,SAAN,CAAgBS,YAAhB,CAA6B,MAA7B,EAAqC,SAArC,EAAgD;AAC9CM,IAAAA,YAAY,EAAE;AACZZ,MAAAA,OAAO,EAAE,6BADG;AAEZS,MAAAA,KAAK,EAAE;AAFK,KADgC;AAK9CI,IAAAA,QAAQ,EAAE;AACRb,MAAAA,OAAO,EAAE,WADD;AAERS,MAAAA,KAAK,EAAE;AAFC,KALoC;AAS9CK,IAAAA,WAAW,EAAE;AACXd,MAAAA,OAAO,EAAE,kBADE;AAEXS,MAAAA,KAAK,EAAE;AAFI;AATiC,GAAhD;AAcD","sourcesContent":["// @ts-nocheck\nimport refractorClike from './clike.js'\nhaxe.displayName = 'haxe'\nhaxe.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function haxe(Prism) {\n  Prism.register(refractorClike)\n  Prism.languages.haxe = Prism.languages.extend('clike', {\n    string: {\n      // Strings can be multi-line\n      pattern: /\"(?:[^\"\\\\]|\\\\[\\s\\S])*\"/,\n      greedy: true\n    },\n    'class-name': [\n      {\n        pattern:\n          /(\\b(?:abstract|class|enum|extends|implements|interface|new|typedef)\\s+)[A-Z_]\\w*/,\n        lookbehind: true\n      },\n      // based on naming convention\n      /\\b[A-Z]\\w*/\n    ],\n    // The final look-ahead prevents highlighting of keywords if expressions such as \"haxe.macro.Expr\"\n    keyword:\n      /\\bthis\\b|\\b(?:abstract|as|break|case|cast|catch|class|continue|default|do|dynamic|else|enum|extends|extern|final|for|from|function|if|implements|import|in|inline|interface|macro|new|null|operator|overload|override|package|private|public|return|static|super|switch|throw|to|try|typedef|untyped|using|var|while)(?!\\.)\\b/,\n    function: {\n      pattern: /\\b[a-z_]\\w*(?=\\s*(?:<[^<>]*>\\s*)?\\()/i,\n      greedy: true\n    },\n    operator: /\\.{3}|\\+\\+|--|&&|\\|\\||->|=>|(?:<<?|>{1,3}|[-+*/%!=&|^])=?|[?:~]/\n  })\n  Prism.languages.insertBefore('haxe', 'string', {\n    'string-interpolation': {\n      pattern: /'(?:[^'\\\\]|\\\\[\\s\\S])*'/,\n      greedy: true,\n      inside: {\n        interpolation: {\n          pattern: /(^|[^\\\\])\\$(?:\\w+|\\{[^{}]+\\})/,\n          lookbehind: true,\n          inside: {\n            'interpolation-punctuation': {\n              pattern: /^\\$\\{?|\\}$/,\n              alias: 'punctuation'\n            },\n            expression: {\n              pattern: /[\\s\\S]+/,\n              inside: Prism.languages.haxe\n            }\n          }\n        },\n        string: /[\\s\\S]+/\n      }\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'class-name', {\n    regex: {\n      pattern: /~\\/(?:[^\\/\\\\\\r\\n]|\\\\.)+\\/[a-z]*/,\n      greedy: true,\n      inside: {\n        'regex-flags': /\\b[a-z]+$/,\n        'regex-source': {\n          pattern: /^(~\\/)[\\s\\S]+(?=\\/$)/,\n          lookbehind: true,\n          alias: 'language-regex',\n          inside: Prism.languages.regex\n        },\n        'regex-delimiter': /^~\\/|\\/$/\n      }\n    }\n  })\n  Prism.languages.insertBefore('haxe', 'keyword', {\n    preprocessor: {\n      pattern: /#(?:else|elseif|end|if)\\b.*/,\n      alias: 'property'\n    },\n    metadata: {\n      pattern: /@:?[\\w.]+/,\n      alias: 'symbol'\n    },\n    reification: {\n      pattern: /\\$(?:\\w+|(?=\\{))/,\n      alias: 'important'\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}