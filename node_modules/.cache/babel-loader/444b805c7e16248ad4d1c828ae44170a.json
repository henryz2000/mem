{"ast":null,"code":"// @ts-nocheck\npeoplecode.displayName = 'peoplecode';\npeoplecode.aliases = ['pcode'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function peoplecode(Prism) {\n  Prism.languages.peoplecode = {\n    comment: RegExp([// C-style multiline comments\n    /\\/\\*[\\s\\S]*?\\*\\//.source, // REM comments\n    /\\bREM[^;]*;/.source, // Nested <* *> comments\n    /<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source, // /+ +/ comments\n    /\\/\\+[\\s\\S]*?\\+\\//.source].join('|')),\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n      greedy: true\n    },\n    variable: /%\\w+/,\n    'function-definition': {\n      pattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'class-name': {\n      pattern: /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,\n      lookbehind: true,\n      inside: {\n        punctuation: /:/\n      }\n    },\n    keyword: /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n    'operator-keyword': {\n      pattern: /\\b(?:and|not|or)\\b/i,\n      alias: 'operator'\n    },\n    function: /[_a-z]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,\n    punctuation: /[:.;,()[\\]]/\n  };\n  Prism.languages.pcode = Prism.languages.peoplecode;\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/peoplecode.js"],"names":["peoplecode","displayName","aliases","Prism","languages","comment","RegExp","source","join","string","pattern","greedy","variable","lookbehind","alias","inside","punctuation","keyword","function","boolean","number","operator","pcode"],"mappings":"AAAA;AACAA,UAAU,CAACC,WAAX,GAAyB,YAAzB;AACAD,UAAU,CAACE,OAAX,GAAqB,CAAC,OAAD,CAArB;AAEA;;AACA,eAAe,SAASF,UAAT,CAAoBG,KAApB,EAA2B;AACxCA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,UAAhB,GAA6B;AAC3BK,IAAAA,OAAO,EAAEC,MAAM,CACb,CACE;AACA,uBAAmBC,MAFrB,EAGE;AACA,kBAAcA,MAJhB,EAKE;AACA,gEAA4DA,MAN9D,EAOE;AACA,uBAAmBA,MARrB,EASEC,IATF,CASO,GATP,CADa,CADY;AAa3BC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,iDADH;AAENC,MAAAA,MAAM,EAAE;AAFF,KAbmB;AAiB3BC,IAAAA,QAAQ,EAAE,MAjBiB;AAkB3B,2BAAuB;AACrBF,MAAAA,OAAO,EAAE,0CADY;AAErBG,MAAAA,UAAU,EAAE,IAFS;AAGrBC,MAAAA,KAAK,EAAE;AAHc,KAlBI;AAuB3B,kBAAc;AACZJ,MAAAA,OAAO,EACL,gIAFU;AAGZG,MAAAA,UAAU,EAAE,IAHA;AAIZE,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAJI,KAvBa;AA+B3BC,IAAAA,OAAO,EACL,+XAhCyB;AAiC3B,wBAAoB;AAClBP,MAAAA,OAAO,EAAE,qBADS;AAElBI,MAAAA,KAAK,EAAE;AAFW,KAjCO;AAqC3BI,IAAAA,QAAQ,EAAE,qBArCiB;AAsC3BC,IAAAA,OAAO,EAAE,qBAtCkB;AAuC3BC,IAAAA,MAAM,EAAE,mBAvCmB;AAwC3BC,IAAAA,QAAQ,EAAE,6BAxCiB;AAyC3BL,IAAAA,WAAW,EAAE;AAzCc,GAA7B;AA2CAb,EAAAA,KAAK,CAACC,SAAN,CAAgBkB,KAAhB,GAAwBnB,KAAK,CAACC,SAAN,CAAgBJ,UAAxC;AACD","sourcesContent":["// @ts-nocheck\npeoplecode.displayName = 'peoplecode'\npeoplecode.aliases = ['pcode']\n\n/** @type {import('../core.js').Syntax} */\nexport default function peoplecode(Prism) {\n  Prism.languages.peoplecode = {\n    comment: RegExp(\n      [\n        // C-style multiline comments\n        /\\/\\*[\\s\\S]*?\\*\\//.source,\n        // REM comments\n        /\\bREM[^;]*;/.source,\n        // Nested <* *> comments\n        /<\\*(?:[^<*]|\\*(?!>)|<(?!\\*)|<\\*(?:(?!\\*>)[\\s\\S])*\\*>)*\\*>/.source,\n        // /+ +/ comments\n        /\\/\\+[\\s\\S]*?\\+\\//.source\n      ].join('|')\n    ),\n    string: {\n      pattern: /'(?:''|[^'\\r\\n])*'(?!')|\"(?:\"\"|[^\"\\r\\n])*\"(?!\")/,\n      greedy: true\n    },\n    variable: /%\\w+/,\n    'function-definition': {\n      pattern: /((?:^|[^\\w-])(?:function|method)\\s+)\\w+/i,\n      lookbehind: true,\n      alias: 'function'\n    },\n    'class-name': {\n      pattern:\n        /((?:^|[^-\\w])(?:as|catch|class|component|create|extends|global|implements|instance|local|of|property|returns)\\s+)\\w+(?::\\w+)*/i,\n      lookbehind: true,\n      inside: {\n        punctuation: /:/\n      }\n    },\n    keyword:\n      /\\b(?:abstract|alias|as|catch|class|component|constant|create|declare|else|end-(?:class|evaluate|for|function|get|if|method|set|try|while)|evaluate|extends|for|function|get|global|if|implements|import|instance|library|local|method|null|of|out|peopleCode|private|program|property|protected|readonly|ref|repeat|returns?|set|step|then|throw|to|try|until|value|when(?:-other)?|while)\\b/i,\n    'operator-keyword': {\n      pattern: /\\b(?:and|not|or)\\b/i,\n      alias: 'operator'\n    },\n    function: /[_a-z]\\w*(?=\\s*\\()/i,\n    boolean: /\\b(?:false|true)\\b/i,\n    number: /\\b\\d+(?:\\.\\d+)?\\b/,\n    operator: /<>|[<>]=?|!=|\\*\\*|[-+*/|=@]/,\n    punctuation: /[:.;,()[\\]]/\n  }\n  Prism.languages.pcode = Prism.languages.peoplecode\n}\n"]},"metadata":{},"sourceType":"module"}