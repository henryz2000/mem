{"ast":null,"code":"import _slicedToArray from\"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import\"./App.css\";import{MemClient}from\"@mem-labs/mem-node\";import MDEditor from\"@uiw/react-md-editor\";import Button from\"react-bootstrap/Button\";// \"5436519d-2a67-44ac-a1e0-f2952a2c2953\"\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _React$useState=React.useState(\"\"),_React$useState2=_slicedToArray(_React$useState,2),content=_React$useState2[0],setContent=_React$useState2[1];var _React$useState3=React.useState(\"\"),_React$useState4=_slicedToArray(_React$useState3,2),url=_React$useState4[0],setUrl=_React$useState4[1];var _React$useState5=React.useState([]),_React$useState6=_slicedToArray(_React$useState5,2),tags=_React$useState6[0],setTags=_React$useState6[1];var _React$useState7=React.useState(localStorage.getItem(\"apiKey\")||\"\"),_React$useState8=_slicedToArray(_React$useState7,2),apiKey=_React$useState8[0],setApiKey=_React$useState8[1];var memClient=new MemClient({apiAccessToken:apiKey});var createMem=function createMem(){memClient.createMem({content:content||\"\"});localStorage.setItem(url,JSON.stringify(content));};React.useEffect(function(){/**\n     * We can't use \"chrome.runtime.sendMessage\" for sending messages from React.\n     * For sending messages from React we need to specify which tab to send it to.\n     */chrome.tabs&&chrome.tabs.query({active:true,currentWindow:true},function(tabs){/**\n           * Sends a single message to the content script(s) in the specified tab,\n           * with an optional callback to run when a response is sent back.\n           *\n           * The runtime.onMessage event is fired in each content script running\n           * in the specified tab for the current extension.\n           */chrome.tabs.sendMessage(tabs[0].id||0,{type:\"GET_DOM\"},function(response){var _localStorage$getItem;setUrl(response.url);setContent(((_localStorage$getItem=localStorage.getItem(response.url))===null||_localStorage$getItem===void 0?void 0:_localStorage$getItem.slice(1,-1))||response.content);});});},[]);var tagRegex=/\\B(?<!#)(#[a-zA-Z0-9_]+\\b)/g;return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Mem Chrome Extension\"}),/*#__PURE__*/_jsx(Button,{variant:\"danger\",onClick:createMem,children:\"Add to Mem\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"container\",children:/*#__PURE__*/_jsx(MDEditor,{value:content,onChange:function onChange(val){var match=Array.from(val.matchAll(tagRegex));setContent(val);setTags(match);},className:\"markdown\"})}),/*#__PURE__*/_jsx(\"div\",{children:tags===null||tags===void 0?void 0:tags.map(function(val){var hashtag=val[0];var tag=val[0].slice(1);return/*#__PURE__*/_jsx(Button,{size:\"sm\",href:\"https://mem.ai/s?filter=%7B%22type%22%3A%22HasTag%22%2C%22tag%22%3A%22\".concat(tag.toLowerCase(),\"%22%2C%22displayName%22%3A%22\").concat(tag,\"%22%7D\"),target:\"_blank\",className:\"tag\",children:hashtag});})})]});}export default App;","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/src/App.tsx"],"names":["React","MemClient","MDEditor","Button","App","useState","content","setContent","url","setUrl","tags","setTags","localStorage","getItem","apiKey","setApiKey","memClient","apiAccessToken","createMem","setItem","JSON","stringify","useEffect","chrome","tabs","query","active","currentWindow","sendMessage","id","type","response","slice","tagRegex","val","match","Array","from","matchAll","map","hashtag","tag","toLowerCase"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { DOMMessage, DOMMessageResponse } from \"./types\";\nimport { MemClient } from \"@mem-labs/mem-node\";\nimport MDEditor from \"@uiw/react-md-editor\";\nimport Button from \"react-bootstrap/Button\";\n\n// \"5436519d-2a67-44ac-a1e0-f2952a2c2953\"\n\nfunction App() {\n  const [content, setContent] = React.useState<string | undefined>(\"\");\n  const [url, setUrl] = React.useState(\"\");\n  const [tags, setTags] = React.useState<RegExpMatchArray[]>([]);\n  const [apiKey, setApiKey] = React.useState(\n    localStorage.getItem(\"apiKey\") || \"\"\n  );\n\n  const memClient = new MemClient({\n    apiAccessToken: apiKey,\n  });\n\n  const createMem = () => {\n    memClient.createMem({\n      content: content || \"\",\n    });\n    localStorage.setItem(url, JSON.stringify(content));\n  };\n\n  React.useEffect(() => {\n    /**\n     * We can't use \"chrome.runtime.sendMessage\" for sending messages from React.\n     * For sending messages from React we need to specify which tab to send it to.\n     */\n    chrome.tabs &&\n      chrome.tabs.query(\n        {\n          active: true,\n          currentWindow: true,\n        },\n        (tabs) => {\n          /**\n           * Sends a single message to the content script(s) in the specified tab,\n           * with an optional callback to run when a response is sent back.\n           *\n           * The runtime.onMessage event is fired in each content script running\n           * in the specified tab for the current extension.\n           */\n          chrome.tabs.sendMessage(\n            tabs[0].id || 0,\n            { type: \"GET_DOM\" } as DOMMessage,\n            (response: DOMMessageResponse) => {\n              setUrl(response.url);\n              setContent(\n                localStorage.getItem(response.url)?.slice(1, -1) ||\n                  response.content\n              );\n            }\n          );\n        }\n      );\n  }, []);\n\n  const tagRegex = /\\B(?<!#)(#[a-zA-Z0-9_]+\\b)/g;\n\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>Mem Chrome Extension</h1>\n        <Button variant=\"danger\" onClick={createMem}>\n          Add to Mem\n        </Button>\n      </div>\n\n      <div className=\"container\">\n        <MDEditor\n          value={content}\n          onChange={(val) => {\n            const match = Array.from(val!.matchAll(tagRegex));\n            setContent(val);\n            setTags(match);\n          }}\n          className=\"markdown\"\n        />\n      </div>\n\n      <div>\n        {tags?.map((val) => {\n          const hashtag = val[0];\n          const tag = val[0].slice(1);\n          return (\n            <Button\n              size=\"sm\"\n              href={`https://mem.ai/s?filter=%7B%22type%22%3A%22HasTag%22%2C%22tag%22%3A%22${tag.toLowerCase()}%22%2C%22displayName%22%3A%22${tag}%22%7D`}\n              target=\"_blank\"\n              className=\"tag\"\n            >\n              {hashtag}\n            </Button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}