{"ast":null,"code":"// @ts-nocheck\nbqn.displayName = 'bqn';\nbqn.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function bqn(Prism) {\n  Prism.languages.bqn = {\n    shebang: {\n      pattern: /^#![ \\t]*\\/.*/,\n      alias: 'important',\n      greedy: true\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    'string-literal': {\n      pattern: /\"(?:[^\"]|\"\")*\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    'character-literal': {\n      pattern: /'(?:[\\s\\S]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])'/,\n      greedy: true,\n      alias: 'char'\n    },\n    function: /•[\\w¯.∞π]+[\\w¯.∞π]*/,\n    'dot-notation-on-brackets': {\n      pattern: /\\{(?=.*\\}\\.)|\\}\\./,\n      alias: 'namespace'\n    },\n    'special-name': {\n      pattern: /(?:𝕨|𝕩|𝕗|𝕘|𝕤|𝕣|𝕎|𝕏|𝔽|𝔾|𝕊|_𝕣_|_𝕣)/,\n      alias: 'keyword'\n    },\n    'dot-notation-on-name': {\n      pattern: /[A-Za-z_][\\w¯∞π]*\\./,\n      alias: 'namespace'\n    },\n    'word-number-scientific': {\n      pattern: /\\d+(?:\\.\\d+)?[eE]¯?\\d+/,\n      alias: 'number'\n    },\n    'word-name': {\n      pattern: /[A-Za-z_][\\w¯∞π]*/,\n      alias: 'symbol'\n    },\n    'word-number': {\n      pattern: /[¯∞π]?(?:\\d*\\.?\\b\\d+(?:e[+¯]?\\d+|E[+¯]?\\d+)?|¯|∞|π)(?:j¯?(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+¯]?\\d+|E[+¯]?\\d+)?|¯|∞|π))?/,\n      alias: 'number'\n    },\n    'null-literal': {\n      pattern: /@/,\n      alias: 'char'\n    },\n    'primitive-functions': {\n      pattern: /[-+×÷⋆√⌊⌈|¬∧∨<>≠=≤≥≡≢⊣⊢⥊∾≍⋈↑↓↕«»⌽⍉/⍋⍒⊏⊑⊐⊒∊⍷⊔!]/,\n      alias: 'operator'\n    },\n    'primitive-1-operators': {\n      pattern: /[`˜˘¨⁼⌜´˝˙]/,\n      alias: 'operator'\n    },\n    'primitive-2-operators': {\n      pattern: /[∘⊸⟜○⌾⎉⚇⍟⊘◶⎊]/,\n      alias: 'operator'\n    },\n    punctuation: /[←⇐↩(){}⟨⟩[\\]‿·⋄,.;:?]/\n  };\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/bqn.js"],"names":["bqn","displayName","aliases","Prism","languages","shebang","pattern","alias","greedy","comment","function","punctuation"],"mappings":"AAAA;AACAA,GAAG,CAACC,WAAJ,GAAkB,KAAlB;AACAD,GAAG,CAACE,OAAJ,GAAc,EAAd;AAEA;;AACA,eAAe,SAASF,GAAT,CAAaG,KAAb,EAAoB;AACjCA,EAAAA,KAAK,CAACC,SAAN,CAAgBJ,GAAhB,GAAsB;AACpBK,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE,eADF;AAEPC,MAAAA,KAAK,EAAE,WAFA;AAGPC,MAAAA,MAAM,EAAE;AAHD,KADW;AAMpBC,IAAAA,OAAO,EAAE;AACPH,MAAAA,OAAO,EAAE,KADF;AAEPE,MAAAA,MAAM,EAAE;AAFD,KANW;AAUpB,sBAAkB;AAChBF,MAAAA,OAAO,EAAE,gBADO;AAEhBE,MAAAA,MAAM,EAAE,IAFQ;AAGhBD,MAAAA,KAAK,EAAE;AAHS,KAVE;AAepB,yBAAqB;AACnBD,MAAAA,OAAO,EAAE,6CADU;AAEnBE,MAAAA,MAAM,EAAE,IAFW;AAGnBD,MAAAA,KAAK,EAAE;AAHY,KAfD;AAoBpBG,IAAAA,QAAQ,EAAE,qBApBU;AAqBpB,gCAA4B;AAC1BJ,MAAAA,OAAO,EAAE,mBADiB;AAE1BC,MAAAA,KAAK,EAAE;AAFmB,KArBR;AAyBpB,oBAAgB;AACdD,MAAAA,OAAO,EAAE,+CADK;AAEdC,MAAAA,KAAK,EAAE;AAFO,KAzBI;AA6BpB,4BAAwB;AACtBD,MAAAA,OAAO,EAAE,qBADa;AAEtBC,MAAAA,KAAK,EAAE;AAFe,KA7BJ;AAiCpB,8BAA0B;AACxBD,MAAAA,OAAO,EAAE,wBADe;AAExBC,MAAAA,KAAK,EAAE;AAFiB,KAjCN;AAqCpB,iBAAa;AACXD,MAAAA,OAAO,EAAE,mBADE;AAEXC,MAAAA,KAAK,EAAE;AAFI,KArCO;AAyCpB,mBAAe;AACbD,MAAAA,OAAO,EACL,sHAFW;AAGbC,MAAAA,KAAK,EAAE;AAHM,KAzCK;AA8CpB,oBAAgB;AACdD,MAAAA,OAAO,EAAE,GADK;AAEdC,MAAAA,KAAK,EAAE;AAFO,KA9CI;AAkDpB,2BAAuB;AACrBD,MAAAA,OAAO,EAAE,gDADY;AAErBC,MAAAA,KAAK,EAAE;AAFc,KAlDH;AAsDpB,6BAAyB;AACvBD,MAAAA,OAAO,EAAE,aADc;AAEvBC,MAAAA,KAAK,EAAE;AAFgB,KAtDL;AA0DpB,6BAAyB;AACvBD,MAAAA,OAAO,EAAE,eADc;AAEvBC,MAAAA,KAAK,EAAE;AAFgB,KA1DL;AA8DpBI,IAAAA,WAAW,EAAE;AA9DO,GAAtB;AAgED","sourcesContent":["// @ts-nocheck\nbqn.displayName = 'bqn'\nbqn.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function bqn(Prism) {\n  Prism.languages.bqn = {\n    shebang: {\n      pattern: /^#![ \\t]*\\/.*/,\n      alias: 'important',\n      greedy: true\n    },\n    comment: {\n      pattern: /#.*/,\n      greedy: true\n    },\n    'string-literal': {\n      pattern: /\"(?:[^\"]|\"\")*\"/,\n      greedy: true,\n      alias: 'string'\n    },\n    'character-literal': {\n      pattern: /'(?:[\\s\\S]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF])'/,\n      greedy: true,\n      alias: 'char'\n    },\n    function: /•[\\w¯.∞π]+[\\w¯.∞π]*/,\n    'dot-notation-on-brackets': {\n      pattern: /\\{(?=.*\\}\\.)|\\}\\./,\n      alias: 'namespace'\n    },\n    'special-name': {\n      pattern: /(?:𝕨|𝕩|𝕗|𝕘|𝕤|𝕣|𝕎|𝕏|𝔽|𝔾|𝕊|_𝕣_|_𝕣)/,\n      alias: 'keyword'\n    },\n    'dot-notation-on-name': {\n      pattern: /[A-Za-z_][\\w¯∞π]*\\./,\n      alias: 'namespace'\n    },\n    'word-number-scientific': {\n      pattern: /\\d+(?:\\.\\d+)?[eE]¯?\\d+/,\n      alias: 'number'\n    },\n    'word-name': {\n      pattern: /[A-Za-z_][\\w¯∞π]*/,\n      alias: 'symbol'\n    },\n    'word-number': {\n      pattern:\n        /[¯∞π]?(?:\\d*\\.?\\b\\d+(?:e[+¯]?\\d+|E[+¯]?\\d+)?|¯|∞|π)(?:j¯?(?:(?:\\d+(?:\\.\\d+)?|\\.\\d+)(?:e[+¯]?\\d+|E[+¯]?\\d+)?|¯|∞|π))?/,\n      alias: 'number'\n    },\n    'null-literal': {\n      pattern: /@/,\n      alias: 'char'\n    },\n    'primitive-functions': {\n      pattern: /[-+×÷⋆√⌊⌈|¬∧∨<>≠=≤≥≡≢⊣⊢⥊∾≍⋈↑↓↕«»⌽⍉/⍋⍒⊏⊑⊐⊒∊⍷⊔!]/,\n      alias: 'operator'\n    },\n    'primitive-1-operators': {\n      pattern: /[`˜˘¨⁼⌜´˝˙]/,\n      alias: 'operator'\n    },\n    'primitive-2-operators': {\n      pattern: /[∘⊸⟜○⌾⎉⚇⍟⊘◶⎊]/,\n      alias: 'operator'\n    },\n    punctuation: /[←⇐↩(){}⟨⟩[\\]‿·⋄,.;:?]/\n  }\n}\n"]},"metadata":{},"sourceType":"module"}