{"ast":null,"code":"// @ts-nocheck\nimport refractorJavascript from './javascript.js';\ntypescript.displayName = 'typescript';\ntypescript.aliases = ['ts'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function typescript(Prism) {\n  Prism.register(refractorJavascript);\n\n  (function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern: /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n\n      },\n      builtin: /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    }); // The keywords TypeScript adds to JavaScript\n\n    Prism.languages.typescript.keyword.push(/\\b(?:abstract|declare|is|keyof|readonly|require)\\b/, // keywords that have to be followed by an identifier\n    /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/, // This is for `import type *, {}`\n    /\\btype\\b(?=\\s*(?:[\\{*]|$))/); // doesn't work with TS because TS is too complex\n\n    delete Prism.languages.typescript['parameter'];\n    delete Prism.languages.typescript['literal-property']; // a version of typescript specifically for highlighting types\n\n    var typeInside = Prism.languages.extend('typescript', {});\n    delete typeInside['class-name'];\n    Prism.languages.typescript['class-name'].inside = typeInside;\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    });\n    Prism.languages.ts = Prism.languages.typescript;\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/typescript.js"],"names":["refractorJavascript","typescript","displayName","aliases","Prism","register","languages","extend","pattern","lookbehind","greedy","inside","builtin","keyword","push","typeInside","insertBefore","decorator","at","alias","function","generic","ts"],"mappings":"AAAA;AACA,OAAOA,mBAAP,MAAgC,iBAAhC;AACAC,UAAU,CAACC,WAAX,GAAyB,YAAzB;AACAD,UAAU,CAACE,OAAX,GAAqB,CAAC,IAAD,CAArB;AAEA;;AACA,eAAe,SAASF,UAAT,CAAoBG,KAApB,EAA2B;AACxCA,EAAAA,KAAK,CAACC,QAAN,CAAeL,mBAAf;;AACC,GAAC,UAAUI,KAAV,EAAiB;AACjBA,IAAAA,KAAK,CAACE,SAAN,CAAgBL,UAAhB,GAA6BG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,YAAvB,EAAqC;AAChE,oBAAc;AACZC,QAAAA,OAAO,EACL,8KAFU;AAGZC,QAAAA,UAAU,EAAE,IAHA;AAIZC,QAAAA,MAAM,EAAE,IAJI;AAKZC,QAAAA,MAAM,EAAE,IALI,CAKC;;AALD,OADkD;AAShEC,MAAAA,OAAO,EACL;AAV8D,KAArC,CAA7B,CADiB,CAcjB;;AACAR,IAAAA,KAAK,CAACE,SAAN,CAAgBL,UAAhB,CAA2BY,OAA3B,CAAmCC,IAAnC,CACE,oDADF,EAEE;AACA,8FAHF,EAIE;AACA,gCALF,EAfiB,CAuBjB;;AACA,WAAOV,KAAK,CAACE,SAAN,CAAgBL,UAAhB,CAA2B,WAA3B,CAAP;AACA,WAAOG,KAAK,CAACE,SAAN,CAAgBL,UAAhB,CAA2B,kBAA3B,CAAP,CAzBiB,CA2BjB;;AACA,QAAIc,UAAU,GAAGX,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,YAAvB,EAAqC,EAArC,CAAjB;AACA,WAAOQ,UAAU,CAAC,YAAD,CAAjB;AACAX,IAAAA,KAAK,CAACE,SAAN,CAAgBL,UAAhB,CAA2B,YAA3B,EAAyCU,MAAzC,GAAkDI,UAAlD;AACAX,IAAAA,KAAK,CAACE,SAAN,CAAgBU,YAAhB,CAA6B,YAA7B,EAA2C,UAA3C,EAAuD;AACrDC,MAAAA,SAAS,EAAE;AACTT,QAAAA,OAAO,EAAE,oBADA;AAETG,QAAAA,MAAM,EAAE;AACNO,UAAAA,EAAE,EAAE;AACFV,YAAAA,OAAO,EAAE,IADP;AAEFW,YAAAA,KAAK,EAAE;AAFL,WADE;AAKNC,UAAAA,QAAQ,EAAE;AALJ;AAFC,OAD0C;AAWrD,0BAAoB;AAClB;AACAZ,QAAAA,OAAO,EACL,wGAHgB;AAIlBE,QAAAA,MAAM,EAAE,IAJU;AAKlBC,QAAAA,MAAM,EAAE;AACNS,UAAAA,QAAQ,EAAE,2DADJ;AAENC,UAAAA,OAAO,EAAE;AACPb,YAAAA,OAAO,EAAE,UADF;AAEP;AACAW,YAAAA,KAAK,EAAE,YAHA;AAIPR,YAAAA,MAAM,EAAEI;AAJD;AAFH;AALU;AAXiC,KAAvD;AA2BAX,IAAAA,KAAK,CAACE,SAAN,CAAgBgB,EAAhB,GAAqBlB,KAAK,CAACE,SAAN,CAAgBL,UAArC;AACD,GA3DA,EA2DEG,KA3DF;AA4DF","sourcesContent":["// @ts-nocheck\nimport refractorJavascript from './javascript.js'\ntypescript.displayName = 'typescript'\ntypescript.aliases = ['ts']\n\n/** @type {import('../core.js').Syntax} */\nexport default function typescript(Prism) {\n  Prism.register(refractorJavascript)\n  ;(function (Prism) {\n    Prism.languages.typescript = Prism.languages.extend('javascript', {\n      'class-name': {\n        pattern:\n          /(\\b(?:class|extends|implements|instanceof|interface|new|type)\\s+)(?!keyof\\b)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?:\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,\n        lookbehind: true,\n        greedy: true,\n        inside: null // see below\n      },\n\n      builtin:\n        /\\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\\b/\n    })\n\n    // The keywords TypeScript adds to JavaScript\n    Prism.languages.typescript.keyword.push(\n      /\\b(?:abstract|declare|is|keyof|readonly|require)\\b/,\n      // keywords that have to be followed by an identifier\n      /\\b(?:asserts|infer|interface|module|namespace|type)\\b(?=\\s*(?:[{_$a-zA-Z\\xA0-\\uFFFF]|$))/,\n      // This is for `import type *, {}`\n      /\\btype\\b(?=\\s*(?:[\\{*]|$))/\n    )\n\n    // doesn't work with TS because TS is too complex\n    delete Prism.languages.typescript['parameter']\n    delete Prism.languages.typescript['literal-property']\n\n    // a version of typescript specifically for highlighting types\n    var typeInside = Prism.languages.extend('typescript', {})\n    delete typeInside['class-name']\n    Prism.languages.typescript['class-name'].inside = typeInside\n    Prism.languages.insertBefore('typescript', 'function', {\n      decorator: {\n        pattern: /@[$\\w\\xA0-\\uFFFF]+/,\n        inside: {\n          at: {\n            pattern: /^@/,\n            alias: 'operator'\n          },\n          function: /^[\\s\\S]+/\n        }\n      },\n      'generic-function': {\n        // e.g. foo<T extends \"bar\" | \"baz\">( ...\n        pattern:\n          /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\\s*\\()/,\n        greedy: true,\n        inside: {\n          function: /^#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*/,\n          generic: {\n            pattern: /<[\\s\\S]+/,\n            // everything after the first <\n            alias: 'class-name',\n            inside: typeInside\n          }\n        }\n      }\n    })\n    Prism.languages.ts = Prism.languages.typescript\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"module"}