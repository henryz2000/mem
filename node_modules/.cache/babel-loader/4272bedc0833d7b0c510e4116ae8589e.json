{"ast":null,"code":"import _classCallCheck from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { regex } from './regex.js';\nvar own = Object.hasOwnProperty;\n/**\n * Slugger.\n */\n\nvar BananaSlug = /*#__PURE__*/function () {\n  /**\n   * Create a new slug class.\n   */\n  function BananaSlug() {\n    _classCallCheck(this, BananaSlug);\n\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences;\n    this.reset();\n  }\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n\n\n  _createClass(BananaSlug, [{\n    key: \"slug\",\n    value: function slug(value, maintainCase) {\n      var self = this;\n\n      var result = _slug(value, maintainCase === true);\n\n      var originalSlug = result;\n\n      while (own.call(self.occurrences, result)) {\n        self.occurrences[originalSlug]++;\n        result = originalSlug + '-' + self.occurrences[originalSlug];\n      }\n\n      self.occurrences[result] = 0;\n      return result;\n    }\n    /**\n     * Reset - Forget all previous slugs\n     *\n     * @return void\n     */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.occurrences = Object.create(null);\n    }\n  }]);\n\n  return BananaSlug;\n}();\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\n\n\nexport { BananaSlug as default };\n\nfunction _slug(value, maintainCase) {\n  if (typeof value !== 'string') return '';\n  if (!maintainCase) value = value.toLowerCase();\n  return value.replace(regex, '').replace(/ /g, '-');\n}\n\nexport { _slug as slug };","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/github-slugger/index.js"],"names":["regex","own","Object","hasOwnProperty","BananaSlug","occurrences","reset","value","maintainCase","self","result","slug","originalSlug","call","create","toLowerCase","replace"],"mappings":";;AAAA,SAASA,KAAT,QAAsB,YAAtB;AAEA,IAAMC,GAAG,GAAGC,MAAM,CAACC,cAAnB;AAEA;AACA;AACA;;IACqBC,U;AACnB;AACF;AACA;AACE,wBAAe;AAAA;;AACb;AACA;AACA,SAAKC,WAAL;AAEA,SAAKC,KAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,cAAMC,KAAN,EAAaC,YAAb,EAA2B;AACzB,UAAMC,IAAI,GAAG,IAAb;;AACA,UAAIC,MAAM,GAAGC,KAAI,CAACJ,KAAD,EAAQC,YAAY,KAAK,IAAzB,CAAjB;;AACA,UAAMI,YAAY,GAAGF,MAArB;;AAEA,aAAOT,GAAG,CAACY,IAAJ,CAASJ,IAAI,CAACJ,WAAd,EAA2BK,MAA3B,CAAP,EAA2C;AACzCD,QAAAA,IAAI,CAACJ,WAAL,CAAiBO,YAAjB;AACAF,QAAAA,MAAM,GAAGE,YAAY,GAAG,GAAf,GAAqBH,IAAI,CAACJ,WAAL,CAAiBO,YAAjB,CAA9B;AACD;;AAEDH,MAAAA,IAAI,CAACJ,WAAL,CAAiBK,MAAjB,IAA2B,CAA3B;AAEA,aAAOA,MAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;;WACE,iBAAS;AACP,WAAKL,WAAL,GAAmBH,MAAM,CAACY,MAAP,CAAc,IAAd,CAAnB;AACD;;;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;SAhEqBV,U;;AAiEd,SAASO,KAAT,CAAeJ,KAAf,EAAsBC,YAAtB,EAAoC;AACzC,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B,OAAO,EAAP;AAC/B,MAAI,CAACC,YAAL,EAAmBD,KAAK,GAAGA,KAAK,CAACQ,WAAN,EAAR;AACnB,SAAOR,KAAK,CAACS,OAAN,CAAchB,KAAd,EAAqB,EAArB,EAAyBgB,OAAzB,CAAiC,IAAjC,EAAuC,GAAvC,CAAP;AACD","sourcesContent":["import { regex } from './regex.js'\n\nconst own = Object.hasOwnProperty\n\n/**\n * Slugger.\n */\nexport default class BananaSlug {\n  /**\n   * Create a new slug class.\n   */\n  constructor () {\n    /** @type {Record<string, number>} */\n    // eslint-disable-next-line no-unused-expressions\n    this.occurrences\n\n    this.reset()\n  }\n\n  /**\n   * Generate a unique slug.\n  *\n  * Tracks previously generated slugs: repeated calls with the same value\n  * will result in different slugs.\n  * Use the `slug` function to get same slugs.\n   *\n   * @param  {string} value\n   *   String of text to slugify\n   * @param  {boolean} [maintainCase=false]\n   *   Keep the current case, otherwise make all lowercase\n   * @return {string}\n   *   A unique slug string\n   */\n  slug (value, maintainCase) {\n    const self = this\n    let result = slug(value, maintainCase === true)\n    const originalSlug = result\n\n    while (own.call(self.occurrences, result)) {\n      self.occurrences[originalSlug]++\n      result = originalSlug + '-' + self.occurrences[originalSlug]\n    }\n\n    self.occurrences[result] = 0\n\n    return result\n  }\n\n  /**\n   * Reset - Forget all previous slugs\n   *\n   * @return void\n   */\n  reset () {\n    this.occurrences = Object.create(null)\n  }\n}\n\n/**\n * Generate a slug.\n *\n * Does not track previously generated slugs: repeated calls with the same value\n * will result in the exact same slug.\n * Use the `GithubSlugger` class to get unique slugs.\n *\n * @param  {string} value\n *   String of text to slugify\n * @param  {boolean} [maintainCase=false]\n *   Keep the current case, otherwise make all lowercase\n * @return {string}\n *   A unique slug string\n */\nexport function slug (value, maintainCase) {\n  if (typeof value !== 'string') return ''\n  if (!maintainCase) value = value.toLowerCase()\n  return value.replace(regex, '').replace(/ /g, '-')\n}\n"]},"metadata":{},"sourceType":"module"}