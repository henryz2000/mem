{"ast":null,"code":"// @ts-nocheck\nimport refractorCss from './css.js';\nless.displayName = 'less';\nless.aliases = [];\n/** @type {import('../core.js').Syntax} */\n\nexport default function less(Prism) {\n  Prism.register(refractorCss);\n  /* FIXME :\n  :extend() is not handled specifically : its highlighting is buggy.\n  Mixin usage must be inside a ruleset to be highlighted.\n  At-rules (e.g. import) containing interpolations are buggy.\n  Detached rulesets are highlighted as at-rules.\n  A comment before a mixin usage prevents the latter to be properly highlighted.\n  */\n\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [/\\/\\*[\\s\\S]*?\\*\\//, {\n      pattern: /(^|[^\\\\])\\/\\/.*/,\n      lookbehind: true\n    }],\n    atrule: {\n      pattern: /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern: /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n    operator: /[+\\-*\\/]/\n  });\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [// Variable declaration (the colon must be consumed!)\n    {\n      pattern: /@[\\w-]+\\s*:/,\n      inside: {\n        punctuation: /:/\n      }\n    }, // Variable usage\n    /@@?[\\w-]+/],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  });\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/less.js"],"names":["refractorCss","less","displayName","aliases","Prism","register","languages","extend","comment","pattern","lookbehind","atrule","inside","punctuation","selector","variable","property","operator","insertBefore","alias"],"mappings":"AAAA;AACA,OAAOA,YAAP,MAAyB,UAAzB;AACAC,IAAI,CAACC,WAAL,GAAmB,MAAnB;AACAD,IAAI,CAACE,OAAL,GAAe,EAAf;AAEA;;AACA,eAAe,SAASF,IAAT,CAAcG,KAAd,EAAqB;AAClCA,EAAAA,KAAK,CAACC,QAAN,CAAeL,YAAf;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;AAEEI,EAAAA,KAAK,CAACE,SAAN,CAAgBL,IAAhB,GAAuBG,KAAK,CAACE,SAAN,CAAgBC,MAAhB,CAAuB,KAAvB,EAA8B;AACnDC,IAAAA,OAAO,EAAE,CACP,kBADO,EAEP;AACEC,MAAAA,OAAO,EAAE,iBADX;AAEEC,MAAAA,UAAU,EAAE;AAFd,KAFO,CAD0C;AAQnDC,IAAAA,MAAM,EAAE;AACNF,MAAAA,OAAO,EACL,yEAFI;AAGNG,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAHF,KAR2C;AAenD;AACAC,IAAAA,QAAQ,EAAE;AACRL,MAAAA,OAAO,EACL,yGAFM;AAGRG,MAAAA,MAAM,EAAE;AACN;AACAG,QAAAA,QAAQ,EAAE;AAFJ;AAHA,KAhByC;AAwBnDC,IAAAA,QAAQ,EAAE,yCAxByC;AAyBnDC,IAAAA,QAAQ,EAAE;AAzByC,GAA9B,CAAvB;AA2BAb,EAAAA,KAAK,CAACE,SAAN,CAAgBY,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAC/CH,IAAAA,QAAQ,EAAE,CACR;AACA;AACEN,MAAAA,OAAO,EAAE,aADX;AAEEG,MAAAA,MAAM,EAAE;AACNC,QAAAA,WAAW,EAAE;AADP;AAFV,KAFQ,EAQR;AACA,eATQ,CADqC;AAY/C,mBAAe;AACbJ,MAAAA,OAAO,EAAE,qCADI;AAEbC,MAAAA,UAAU,EAAE,IAFC;AAGbS,MAAAA,KAAK,EAAE;AAHM;AAZgC,GAAjD;AAkBD","sourcesContent":["// @ts-nocheck\nimport refractorCss from './css.js'\nless.displayName = 'less'\nless.aliases = []\n\n/** @type {import('../core.js').Syntax} */\nexport default function less(Prism) {\n  Prism.register(refractorCss)\n  /* FIXME :\n:extend() is not handled specifically : its highlighting is buggy.\nMixin usage must be inside a ruleset to be highlighted.\nAt-rules (e.g. import) containing interpolations are buggy.\nDetached rulesets are highlighted as at-rules.\nA comment before a mixin usage prevents the latter to be properly highlighted.\n*/\n\n  Prism.languages.less = Prism.languages.extend('css', {\n    comment: [\n      /\\/\\*[\\s\\S]*?\\*\\//,\n      {\n        pattern: /(^|[^\\\\])\\/\\/.*/,\n        lookbehind: true\n      }\n    ],\n    atrule: {\n      pattern:\n        /@[\\w-](?:\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        punctuation: /[:()]/\n      }\n    },\n    // selectors and mixins are considered the same\n    selector: {\n      pattern:\n        /(?:@\\{[\\w-]+\\}|[^{};\\s@])(?:@\\{[\\w-]+\\}|\\((?:[^(){}]|\\([^(){}]*\\))*\\)|[^(){};@\\s]|\\s+(?!\\s))*?(?=\\s*\\{)/,\n      inside: {\n        // mixin parameters\n        variable: /@+[\\w-]+/\n      }\n    },\n    property: /(?:@\\{[\\w-]+\\}|[\\w-])+(?:\\+_?)?(?=\\s*:)/,\n    operator: /[+\\-*\\/]/\n  })\n  Prism.languages.insertBefore('less', 'property', {\n    variable: [\n      // Variable declaration (the colon must be consumed!)\n      {\n        pattern: /@[\\w-]+\\s*:/,\n        inside: {\n          punctuation: /:/\n        }\n      },\n      // Variable usage\n      /@@?[\\w-]+/\n    ],\n    'mixin-usage': {\n      pattern: /([{;]\\s*)[.#](?!\\d)[\\w-].*?(?=[(;])/,\n      lookbehind: true,\n      alias: 'function'\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}