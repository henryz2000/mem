{"ast":null,"code":"// @ts-nocheck\nplantUml.displayName = 'plant-uml';\nplantUml.aliases = ['plantuml'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function plantUml(Prism) {\n  ;\n\n  (function (Prism) {\n    var variable = /\\$\\w+|%[a-z]+%/;\n    var arrowAttr = /\\[[^[\\]]*\\]/.source;\n    var arrowDirection = /(?:[drlu]|do|down|le|left|ri|right|up)/.source;\n    var arrowBody = '(?:-+' + arrowDirection + '-+|\\\\.+' + arrowDirection + '\\\\.+|-+(?:' + arrowAttr + '-*)?|' + arrowAttr + '-+|\\\\.+(?:' + arrowAttr + '\\\\.*)?|' + arrowAttr + '\\\\.+)';\n    var arrowLeft = /(?:<{1,2}|\\/{1,2}|\\\\{1,2}|<\\||[#*^+}xo])/.source;\n    var arrowRight = /(?:>{1,2}|\\/{1,2}|\\\\{1,2}|\\|>|[#*^+{xo])/.source;\n    var arrowPrefix = /[[?]?[ox]?/.source;\n    var arrowSuffix = /[ox]?[\\]?]?/.source;\n    var arrow = arrowPrefix + '(?:' + arrowBody + arrowRight + '|' + arrowLeft + arrowBody + '(?:' + arrowRight + ')?' + ')' + arrowSuffix;\n    Prism.languages['plant-uml'] = {\n      comment: {\n        pattern: /(^[ \\t]*)(?:'.*|\\/'[\\s\\S]*?'\\/)/m,\n        lookbehind: true,\n        greedy: true\n      },\n      preprocessor: {\n        pattern: /(^[ \\t]*)!.*/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'property',\n        inside: {\n          variable: variable\n        }\n      },\n      delimiter: {\n        pattern: /(^[ \\t]*)@(?:end|start)uml\\b/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      arrow: {\n        pattern: RegExp(/(^|[^-.<>?|\\\\[\\]ox])/.source + arrow + /(?![-.<>?|\\\\\\]ox])/.source),\n        lookbehind: true,\n        greedy: true,\n        alias: 'operator',\n        inside: {\n          expression: {\n            pattern: /(\\[)[^[\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: null // see below\n\n          },\n          punctuation: /\\[(?=$|\\])|^\\]/\n        }\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      text: {\n        pattern: /(\\[[ \\t]*[\\r\\n]+(?![\\r\\n]))[^\\]]*(?=\\])/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string'\n      },\n      keyword: [{\n        pattern: /^([ \\t]*)(?:abstract\\s+class|end\\s+(?:box|fork|group|merge|note|ref|split|title)|(?:fork|split)(?:\\s+again)?|activate|actor|agent|alt|annotation|artifact|autoactivate|autonumber|backward|binary|boundary|box|break|caption|card|case|circle|class|clock|cloud|collections|component|concise|control|create|critical|database|deactivate|destroy|detach|diamond|else|elseif|end|end[hr]note|endif|endswitch|endwhile|entity|enum|file|folder|footer|frame|group|[hr]?note|header|hexagon|hide|if|interface|label|legend|loop|map|namespace|network|newpage|node|nwdiag|object|opt|package|page|par|participant|person|queue|rectangle|ref|remove|repeat|restore|return|robust|scale|set|show|skinparam|stack|start|state|stop|storage|switch|title|together|usecase|usecase\\/|while)(?=\\s|$)/m,\n        lookbehind: true,\n        greedy: true\n      }, /\\b(?:elseif|equals|not|while)(?=\\s*\\()/, /\\b(?:as|is|then)\\b/],\n      divider: {\n        pattern: /^==.+==$/m,\n        greedy: true,\n        alias: 'important'\n      },\n      time: {\n        pattern: /@(?:\\d+(?:[:/]\\d+){2}|[+-]?\\d+|:[a-z]\\w*(?:[+-]\\d+)?)\\b/i,\n        greedy: true,\n        alias: 'number'\n      },\n      color: {\n        pattern: /#(?:[a-z_]+|[a-fA-F0-9]+)\\b/,\n        alias: 'symbol'\n      },\n      variable: variable,\n      punctuation: /[:,;()[\\]{}]|\\.{3}/\n    };\n    Prism.languages['plant-uml'].arrow.inside.expression.inside = Prism.languages['plant-uml'];\n    Prism.languages['plantuml'] = Prism.languages['plant-uml'];\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/plant-uml.js"],"names":["plantUml","displayName","aliases","Prism","variable","arrowAttr","source","arrowDirection","arrowBody","arrowLeft","arrowRight","arrowPrefix","arrowSuffix","arrow","languages","comment","pattern","lookbehind","greedy","preprocessor","alias","inside","delimiter","RegExp","expression","punctuation","string","text","keyword","divider","time","color"],"mappings":"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","sourcesContent":["// @ts-nocheck\nplantUml.displayName = 'plant-uml'\nplantUml.aliases = ['plantuml']\n\n/** @type {import('../core.js').Syntax} */\nexport default function plantUml(Prism) {\n  ;(function (Prism) {\n    var variable = /\\$\\w+|%[a-z]+%/\n    var arrowAttr = /\\[[^[\\]]*\\]/.source\n    var arrowDirection = /(?:[drlu]|do|down|le|left|ri|right|up)/.source\n    var arrowBody =\n      '(?:-+' +\n      arrowDirection +\n      '-+|\\\\.+' +\n      arrowDirection +\n      '\\\\.+|-+(?:' +\n      arrowAttr +\n      '-*)?|' +\n      arrowAttr +\n      '-+|\\\\.+(?:' +\n      arrowAttr +\n      '\\\\.*)?|' +\n      arrowAttr +\n      '\\\\.+)'\n    var arrowLeft = /(?:<{1,2}|\\/{1,2}|\\\\{1,2}|<\\||[#*^+}xo])/.source\n    var arrowRight = /(?:>{1,2}|\\/{1,2}|\\\\{1,2}|\\|>|[#*^+{xo])/.source\n    var arrowPrefix = /[[?]?[ox]?/.source\n    var arrowSuffix = /[ox]?[\\]?]?/.source\n    var arrow =\n      arrowPrefix +\n      '(?:' +\n      arrowBody +\n      arrowRight +\n      '|' +\n      arrowLeft +\n      arrowBody +\n      '(?:' +\n      arrowRight +\n      ')?' +\n      ')' +\n      arrowSuffix\n    Prism.languages['plant-uml'] = {\n      comment: {\n        pattern: /(^[ \\t]*)(?:'.*|\\/'[\\s\\S]*?'\\/)/m,\n        lookbehind: true,\n        greedy: true\n      },\n      preprocessor: {\n        pattern: /(^[ \\t]*)!.*/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'property',\n        inside: {\n          variable: variable\n        }\n      },\n      delimiter: {\n        pattern: /(^[ \\t]*)@(?:end|start)uml\\b/m,\n        lookbehind: true,\n        greedy: true,\n        alias: 'punctuation'\n      },\n      arrow: {\n        pattern: RegExp(\n          /(^|[^-.<>?|\\\\[\\]ox])/.source + arrow + /(?![-.<>?|\\\\\\]ox])/.source\n        ),\n        lookbehind: true,\n        greedy: true,\n        alias: 'operator',\n        inside: {\n          expression: {\n            pattern: /(\\[)[^[\\]]+(?=\\])/,\n            lookbehind: true,\n            inside: null // see below\n          },\n\n          punctuation: /\\[(?=$|\\])|^\\]/\n        }\n      },\n      string: {\n        pattern: /\"[^\"]*\"/,\n        greedy: true\n      },\n      text: {\n        pattern: /(\\[[ \\t]*[\\r\\n]+(?![\\r\\n]))[^\\]]*(?=\\])/,\n        lookbehind: true,\n        greedy: true,\n        alias: 'string'\n      },\n      keyword: [\n        {\n          pattern:\n            /^([ \\t]*)(?:abstract\\s+class|end\\s+(?:box|fork|group|merge|note|ref|split|title)|(?:fork|split)(?:\\s+again)?|activate|actor|agent|alt|annotation|artifact|autoactivate|autonumber|backward|binary|boundary|box|break|caption|card|case|circle|class|clock|cloud|collections|component|concise|control|create|critical|database|deactivate|destroy|detach|diamond|else|elseif|end|end[hr]note|endif|endswitch|endwhile|entity|enum|file|folder|footer|frame|group|[hr]?note|header|hexagon|hide|if|interface|label|legend|loop|map|namespace|network|newpage|node|nwdiag|object|opt|package|page|par|participant|person|queue|rectangle|ref|remove|repeat|restore|return|robust|scale|set|show|skinparam|stack|start|state|stop|storage|switch|title|together|usecase|usecase\\/|while)(?=\\s|$)/m,\n          lookbehind: true,\n          greedy: true\n        },\n        /\\b(?:elseif|equals|not|while)(?=\\s*\\()/,\n        /\\b(?:as|is|then)\\b/\n      ],\n      divider: {\n        pattern: /^==.+==$/m,\n        greedy: true,\n        alias: 'important'\n      },\n      time: {\n        pattern: /@(?:\\d+(?:[:/]\\d+){2}|[+-]?\\d+|:[a-z]\\w*(?:[+-]\\d+)?)\\b/i,\n        greedy: true,\n        alias: 'number'\n      },\n      color: {\n        pattern: /#(?:[a-z_]+|[a-fA-F0-9]+)\\b/,\n        alias: 'symbol'\n      },\n      variable: variable,\n      punctuation: /[:,;()[\\]{}]|\\.{3}/\n    }\n    Prism.languages['plant-uml'].arrow.inside.expression.inside =\n      Prism.languages['plant-uml']\n    Prism.languages['plantuml'] = Prism.languages['plant-uml']\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"module"}