{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.memClientHealthCheck = void 0;\n\nconst types_1 = require(\"../../api/__codegen__/types\");\n\nconst memClientHealthCheck = ({\n  memClient\n}) =>\n/**\n * Returns true if the client is are able to successfully contact the server.\n *\n * Useful for verifying that your `apiAccessToken` is working successfully.\n */\n() => __awaiter(void 0, void 0, void 0, function* () {\n  const result = yield memClient.graphqlRequest(types_1.HealthCheckDocument);\n  return result.healthCheckDetails.apiStatus;\n});\n\nexports.memClientHealthCheck = memClientHealthCheck;","map":{"version":3,"sources":["../../../src/mem-client/methods/healthCheck.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AAIO,MAAM,oBAAoB,GAC/B,CAAC;AAAE,EAAA;AAAF,CAAD;AACA;;;;AAIG;AACH,MAAW,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,aAAA;AACT,QAAM,MAAM,GAAG,MAAM,SAAS,CAAC,cAAV,CAAyB,OAAA,CAAA,mBAAzB,CAArB;AAEA,SAAO,MAAM,CAAC,kBAAP,CAA0B,SAAjC;AACD,CAJU,CAPN;;AAAM,OAAA,CAAA,oBAAA,GAAoB,oBAApB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.memClientHealthCheck = void 0;\nconst types_1 = require(\"../../api/__codegen__/types\");\nconst memClientHealthCheck = ({ memClient }) => \n/**\n * Returns true if the client is are able to successfully contact the server.\n *\n * Useful for verifying that your `apiAccessToken` is working successfully.\n */\n() => __awaiter(void 0, void 0, void 0, function* () {\n    const result = yield memClient.graphqlRequest(types_1.HealthCheckDocument);\n    return result.healthCheckDetails.apiStatus;\n});\nexports.memClientHealthCheck = memClientHealthCheck;\n//# sourceMappingURL=healthCheck.js.map"]},"metadata":{},"sourceType":"script"}