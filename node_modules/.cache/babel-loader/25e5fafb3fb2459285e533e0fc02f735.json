{"ast":null,"code":"/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n */\nimport { zwitch } from 'zwitch';\nimport { comment } from './comment.js';\nimport { doctype } from './doctype.js';\nimport { element } from './element.js';\nimport { raw } from './raw.js';\nimport { root } from './root.js';\nimport { text } from './text.js';\n/**\n * @type {(node: Node, index: number | undefined, parent: Parent | undefined, state: State) => string}\n */\n\nexport var handle = zwitch('type', {\n  invalid: invalid,\n  unknown: unknown,\n  handlers: {\n    comment: comment,\n    doctype: doctype,\n    element: element,\n    raw: raw,\n    root: root,\n    text: text\n  }\n});\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\n\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`');\n}\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\n\n\nfunction unknown(node) {\n  // @ts-expect-error: `type` is defined.\n  throw new Error('Cannot compile unknown node `' + node.type + '`');\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/hast-util-to-html/lib/handle/index.js"],"names":["zwitch","comment","doctype","element","raw","root","text","handle","invalid","unknown","handlers","node","Error","type"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAAQA,MAAR,QAAqB,QAArB;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAAQC,OAAR,QAAsB,cAAtB;AACA,SAAQC,GAAR,QAAkB,UAAlB;AACA,SAAQC,IAAR,QAAmB,WAAnB;AACA,SAAQC,IAAR,QAAmB,WAAnB;AAEA;AACA;AACA;;AACA,OAAO,IAAMC,MAAM,GAAGP,MAAM,CAAC,MAAD,EAAS;AACnCQ,EAAAA,OAAO,EAAPA,OADmC;AAEnCC,EAAAA,OAAO,EAAPA,OAFmC;AAGnCC,EAAAA,QAAQ,EAAE;AAACT,IAAAA,OAAO,EAAPA,OAAD;AAAUC,IAAAA,OAAO,EAAPA,OAAV;AAAmBC,IAAAA,OAAO,EAAPA,OAAnB;AAA4BC,IAAAA,GAAG,EAAHA,GAA5B;AAAiCC,IAAAA,IAAI,EAAJA,IAAjC;AAAuCC,IAAAA,IAAI,EAAJA;AAAvC;AAHyB,CAAT,CAArB;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,OAAT,CAAiBG,IAAjB,EAAuB;AACrB,QAAM,IAAIC,KAAJ,CAAU,yBAAyBD,IAAzB,GAAgC,GAA1C,CAAN;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,OAAT,CAAiBE,IAAjB,EAAuB;AACrB;AACA,QAAM,IAAIC,KAAJ,CAAU,kCAAkCD,IAAI,CAACE,IAAvC,GAA8C,GAAxD,CAAN;AACD","sourcesContent":["/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n */\n\nimport {zwitch} from 'zwitch'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {element} from './element.js'\nimport {raw} from './raw.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\n/**\n * @type {(node: Node, index: number | undefined, parent: Parent | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node) {\n  // @ts-expect-error: `type` is defined.\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n"]},"metadata":{},"sourceType":"module"}