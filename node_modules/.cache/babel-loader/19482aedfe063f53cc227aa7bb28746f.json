{"ast":null,"code":"import _toConsumableArray from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\nimport escape from 'escape-string-regexp';\nimport { visitParents } from 'unist-util-visit-parents';\nimport { convert } from 'unist-util-is';\nvar own = {}.hasOwnProperty;\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\n\nexport var findAndReplace =\n/**\n * @template {Node} Tree\n * @param {Tree} tree\n * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n * @param {Replace | Options | null | undefined} [replace]\n * @param {Options | null | undefined} [options]\n * @returns {Tree}\n */\nfunction findAndReplace(tree, find, replace, options) {\n  /** @type {Options | null | undefined} */\n  var settings;\n  /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n\n  var schema;\n\n  if (typeof find === 'string' || find instanceof RegExp) {\n    // @ts-expect-error don’t expect options twice.\n    schema = [[find, replace]];\n    settings = options;\n  } else {\n    schema = find; // @ts-expect-error don’t expect replace twice.\n\n    settings = replace;\n  }\n\n  if (!settings) {\n    settings = {};\n  }\n\n  var ignored = convert(settings.ignore || []);\n  var pairs = toPairs(schema);\n  var pairIndex = -1;\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor);\n  } // To do next major: don’t return the given tree.\n\n\n  return tree;\n  /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n\n  function visitor(node, parents) {\n    var index = -1;\n    /** @type {Parent | undefined} */\n\n    var grandparent;\n\n    while (++index < parents.length) {\n      var parent = parents[index];\n\n      if (ignored(parent, // @ts-expect-error: TS doesn’t understand but it’s perfect.\n      grandparent ? grandparent.children.indexOf(parent) : undefined, grandparent)) {\n        return;\n      }\n\n      grandparent = parent;\n    }\n\n    if (grandparent) {\n      return handler(node, parents);\n    }\n  }\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parent>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n\n\n  function handler(node, parents) {\n    var parent = parents[parents.length - 1];\n    var find = pairs[pairIndex][0];\n    var replace = pairs[pairIndex][1];\n    var start = 0; // @ts-expect-error: TS is wrong, some of these children can be text.\n\n    var index = parent.children.indexOf(node);\n    var change = false;\n    /** @type {Array<PhrasingContent>} */\n\n    var nodes = [];\n    find.lastIndex = 0;\n    var match = find.exec(node.value);\n\n    while (match) {\n      var position = match.index;\n      /** @type {RegExpMatchObject} */\n\n      var matchObject = {\n        index: match.index,\n        input: match.input,\n        // @ts-expect-error: stack is fine.\n        stack: [].concat(_toConsumableArray(parents), [node])\n      };\n      var value = replace.apply(void 0, _toConsumableArray(match).concat([matchObject]));\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {\n          type: 'text',\n          value: value\n        } : undefined;\n      } // It wasn’t a match after all.\n\n\n      if (value !== false) {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          });\n        }\n\n        if (Array.isArray(value)) {\n          var _nodes;\n\n          (_nodes = nodes).push.apply(_nodes, _toConsumableArray(value));\n        } else if (value) {\n          nodes.push(value);\n        }\n\n        start = position + match[0].length;\n        change = true;\n      }\n\n      if (!find.global) {\n        break;\n      }\n\n      match = find.exec(node.value);\n    }\n\n    if (change) {\n      var _parent$children;\n\n      if (start < node.value.length) {\n        nodes.push({\n          type: 'text',\n          value: node.value.slice(start)\n        });\n      }\n\n      (_parent$children = parent.children).splice.apply(_parent$children, [index, 1].concat(_toConsumableArray(nodes)));\n    } else {\n      nodes = [node];\n    }\n\n    return index + nodes.length;\n  }\n};\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\n\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  var result = [];\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema');\n  }\n\n  if (Array.isArray(schema)) {\n    var index = -1;\n\n    while (++index < schema.length) {\n      result.push([toExpression(schema[index][0]), toFunction(schema[index][1])]);\n    }\n  } else {\n    /** @type {string} */\n    var key;\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])]);\n      }\n    }\n  }\n\n  return result;\n}\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\n\n\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find;\n}\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\n\n\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : function () {\n    return replace;\n  };\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/mdast-util-find-and-replace/lib/index.js"],"names":["escape","visitParents","convert","own","hasOwnProperty","findAndReplace","tree","find","replace","options","settings","schema","RegExp","ignored","ignore","pairs","toPairs","pairIndex","length","visitor","node","parents","index","grandparent","parent","children","indexOf","undefined","handler","start","change","nodes","lastIndex","match","exec","value","position","matchObject","input","stack","type","push","slice","Array","isArray","global","splice","result","TypeError","toExpression","toFunction","key","call"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n"]},"metadata":{},"sourceType":"module"}