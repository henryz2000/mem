{"ast":null,"code":"/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n * @typedef {import('../types.js').Text} Text\n */\nimport { stringifyEntities } from 'stringify-entities';\n/**\n * Serialize a text node.\n *\n * @param {Text | Raw} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\n\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent && parent.type === 'element' && (parent.tagName === 'script' || parent.tagName === 'style') ? node.value : stringifyEntities(node.value, Object.assign({}, state.settings.characterReferences, {\n    subset: ['<', '&']\n  }));\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/hast-util-to-html/lib/handle/text.js"],"names":["stringifyEntities","text","node","_","parent","state","type","tagName","value","Object","assign","settings","characterReferences","subset"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAQA,iBAAR,QAAgC,oBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAcC,IAAd,EAAoBC,CAApB,EAAuBC,MAAvB,EAA+BC,KAA/B,EAAsC;AAC3C;AACA,SAAOD,MAAM,IACXA,MAAM,CAACE,IAAP,KAAgB,SADX,KAEJF,MAAM,CAACG,OAAP,KAAmB,QAAnB,IAA+BH,MAAM,CAACG,OAAP,KAAmB,OAF9C,IAGHL,IAAI,CAACM,KAHF,GAIHR,iBAAiB,CACfE,IAAI,CAACM,KADU,EAEfC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,KAAK,CAACM,QAAN,CAAeC,mBAAjC,EAAsD;AACpDC,IAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN;AAD4C,GAAtD,CAFe,CAJrB;AAUD","sourcesContent":["/**\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').Raw} Raw\n * @typedef {import('../types.js').Text} Text\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n/**\n * Serialize a text node.\n *\n * @param {Text | Raw} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parent | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: ['<', '&']\n        })\n      )\n}\n"]},"metadata":{},"sourceType":"module"}