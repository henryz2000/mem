{"ast":null,"code":"export function selectWord(_ref) {\n  var text = _ref.text,\n      selection = _ref.selection;\n\n  if (text && text.length && selection.start === selection.end) {\n    // the user is pointing to a word\n    return getSurroundingWord(text, selection.start);\n  }\n\n  return selection;\n}\n/**\n *  Gets the number of line-breaks that would have to be inserted before the given 'startPosition'\n *  to make sure there's an empty line between 'startPosition' and the previous text\n */\n\nexport function getBreaksNeededForEmptyLineBefore(text, startPosition) {\n  if (text === void 0) {\n    text = '';\n  }\n\n  if (startPosition === 0) return 0; // rules:\n  // - If we're in the first line, no breaks are needed\n  // - Otherwise there must be 2 breaks before the previous character. Depending on how many breaks exist already, we\n  //      may need to insert 0, 1 or 2 breaks\n\n  var neededBreaks = 2;\n  var isInFirstLine = true;\n\n  for (var i = startPosition - 1; i >= 0 && neededBreaks >= 0; i--) {\n    switch (text.charCodeAt(i)) {\n      case 32:\n        // blank space\n        continue;\n\n      case 10:\n        // line break\n        neededBreaks--;\n        isInFirstLine = false;\n        break;\n\n      default:\n        return neededBreaks;\n    }\n  }\n\n  return isInFirstLine ? 0 : neededBreaks;\n}\n/**\n *  Gets the number of line-breaks that would have to be inserted after the given 'startPosition'\n *  to make sure there's an empty line between 'startPosition' and the next text\n */\n\nexport function getBreaksNeededForEmptyLineAfter(text, startPosition) {\n  if (text === void 0) {\n    text = '';\n  }\n\n  if (startPosition === text.length - 1) return 0; // rules:\n  // - If we're in the first line, no breaks are needed\n  // - Otherwise there must be 2 breaks before the previous character. Depending on how many breaks exist already, we\n  //      may need to insert 0, 1 or 2 breaks\n\n  var neededBreaks = 2;\n  var isInLastLine = true;\n\n  for (var i = startPosition; i < text.length && neededBreaks >= 0; i++) {\n    switch (text.charCodeAt(i)) {\n      case 32:\n        continue;\n\n      case 10:\n        {\n          neededBreaks--;\n          isInLastLine = false;\n          break;\n        }\n\n      default:\n        return neededBreaks;\n    }\n  }\n\n  return isInLastLine ? 0 : neededBreaks;\n}\nexport function getSurroundingWord(text, position) {\n  if (!text) throw Error(\"Argument 'text' should be truthy\");\n\n  var isWordDelimiter = function isWordDelimiter(c) {\n    return c === ' ' || c.charCodeAt(0) === 10;\n  }; // leftIndex is initialized to 0 because if selection is 0, it won't even enter the iteration\n\n\n  var start = 0; // rightIndex is initialized to text.length because if selection is equal to text.length it won't even enter the interation\n\n  var end = text.length; // iterate to the left\n\n  for (var i = position; i - 1 > -1; i--) {\n    if (isWordDelimiter(text[i - 1])) {\n      start = i;\n      break;\n    }\n  } // iterate to the right\n\n\n  for (var _i = position; _i < text.length; _i++) {\n    if (isWordDelimiter(text[_i])) {\n      end = _i;\n      break;\n    }\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@uiw/react-md-editor/esm/utils/markdownUtils.js"],"names":["selectWord","_ref","text","selection","length","start","end","getSurroundingWord","getBreaksNeededForEmptyLineBefore","startPosition","neededBreaks","isInFirstLine","i","charCodeAt","getBreaksNeededForEmptyLineAfter","isInLastLine","position","Error","isWordDelimiter","c","_i"],"mappings":"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","sourcesContent":["export function selectWord(_ref) {\n  var {\n    text,\n    selection\n  } = _ref;\n  if (text && text.length && selection.start === selection.end) {\n    // the user is pointing to a word\n    return getSurroundingWord(text, selection.start);\n  }\n  return selection;\n}\n\n/**\n *  Gets the number of line-breaks that would have to be inserted before the given 'startPosition'\n *  to make sure there's an empty line between 'startPosition' and the previous text\n */\nexport function getBreaksNeededForEmptyLineBefore(text, startPosition) {\n  if (text === void 0) {\n    text = '';\n  }\n  if (startPosition === 0) return 0;\n\n  // rules:\n  // - If we're in the first line, no breaks are needed\n  // - Otherwise there must be 2 breaks before the previous character. Depending on how many breaks exist already, we\n  //      may need to insert 0, 1 or 2 breaks\n\n  var neededBreaks = 2;\n  var isInFirstLine = true;\n  for (var i = startPosition - 1; i >= 0 && neededBreaks >= 0; i--) {\n    switch (text.charCodeAt(i)) {\n      case 32:\n        // blank space\n        continue;\n      case 10:\n        // line break\n        neededBreaks--;\n        isInFirstLine = false;\n        break;\n      default:\n        return neededBreaks;\n    }\n  }\n  return isInFirstLine ? 0 : neededBreaks;\n}\n\n/**\n *  Gets the number of line-breaks that would have to be inserted after the given 'startPosition'\n *  to make sure there's an empty line between 'startPosition' and the next text\n */\nexport function getBreaksNeededForEmptyLineAfter(text, startPosition) {\n  if (text === void 0) {\n    text = '';\n  }\n  if (startPosition === text.length - 1) return 0;\n\n  // rules:\n  // - If we're in the first line, no breaks are needed\n  // - Otherwise there must be 2 breaks before the previous character. Depending on how many breaks exist already, we\n  //      may need to insert 0, 1 or 2 breaks\n\n  var neededBreaks = 2;\n  var isInLastLine = true;\n  for (var i = startPosition; i < text.length && neededBreaks >= 0; i++) {\n    switch (text.charCodeAt(i)) {\n      case 32:\n        continue;\n      case 10:\n        {\n          neededBreaks--;\n          isInLastLine = false;\n          break;\n        }\n      default:\n        return neededBreaks;\n    }\n  }\n  return isInLastLine ? 0 : neededBreaks;\n}\nexport function getSurroundingWord(text, position) {\n  if (!text) throw Error(\"Argument 'text' should be truthy\");\n  var isWordDelimiter = c => c === ' ' || c.charCodeAt(0) === 10;\n\n  // leftIndex is initialized to 0 because if selection is 0, it won't even enter the iteration\n  var start = 0;\n  // rightIndex is initialized to text.length because if selection is equal to text.length it won't even enter the interation\n  var end = text.length;\n\n  // iterate to the left\n  for (var i = position; i - 1 > -1; i--) {\n    if (isWordDelimiter(text[i - 1])) {\n      start = i;\n      break;\n    }\n  }\n\n  // iterate to the right\n  for (var _i = position; _i < text.length; _i++) {\n    if (isWordDelimiter(text[_i])) {\n      end = _i;\n      break;\n    }\n  }\n  return {\n    start,\n    end\n  };\n}"]},"metadata":{},"sourceType":"module"}