{"ast":null,"code":"import _objectSpread from \"/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\n/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { association } from 'mdast-util-to-markdown/lib/util/association.js';\nimport { containerFlow } from 'mdast-util-to-markdown/lib/util/container-flow.js';\nimport { indentLines } from 'mdast-util-to-markdown/lib/util/indent-lines.js';\nimport { safe } from 'mdast-util-to-markdown/lib/util/safe.js';\nimport { track } from 'mdast-util-to-markdown/lib/util/track.js';\nfootnoteReference.peek = footnoteReferencePeek; // To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\n\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  };\n}\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\n\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{\n      character: '[',\n      inConstruct: ['phrasing', 'label', 'reference']\n    }],\n    handlers: {\n      footnoteDefinition: footnoteDefinition,\n      footnoteReference: footnoteReference\n    }\n  };\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\nfunction enterFootnoteDefinition(token) {\n  this.enter({\n    type: 'footnoteDefinition',\n    identifier: '',\n    label: '',\n    children: []\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteDefinitionLabelString(token) {\n  var label = this.resume();\n  var node = this.stack[this.stack.length - 1];\n  node.label = label;\n  node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteDefinition(token) {\n  this.exit(token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterFootnoteCall(token) {\n  this.enter({\n    type: 'footnoteReference',\n    identifier: '',\n    label: ''\n  }, token);\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction enterFootnoteCallString() {\n  this.buffer();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteCallString(token) {\n  var label = this.resume();\n  var node = this.stack[this.stack.length - 1];\n  node.label = label;\n  node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n}\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\n\n\nfunction exitFootnoteCall(token) {\n  this.exit(token);\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\n\n\nfunction footnoteReference(node, _, context, safeOptions) {\n  var tracker = track(safeOptions);\n  var value = tracker.move('[^');\n  var exit = context.enter('footnoteReference');\n  var subexit = context.enter('reference');\n  value += tracker.move(safe(context, association(node), _objectSpread(_objectSpread({}, tracker.current()), {}, {\n    before: value,\n    after: ']'\n  })));\n  subexit();\n  exit();\n  value += tracker.move(']');\n  return value;\n}\n/** @type {ToMarkdownHandle} */\n\n\nfunction footnoteReferencePeek() {\n  return '[';\n}\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\n\n\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  var tracker = track(safeOptions);\n  var value = tracker.move('[^');\n  var exit = context.enter('footnoteDefinition');\n  var subexit = context.enter('label');\n  value += tracker.move(safe(context, association(node), _objectSpread(_objectSpread({}, tracker.current()), {}, {\n    before: value,\n    after: ']'\n  })));\n  subexit();\n  value += tracker.move(']:' + (node.children && node.children.length > 0 ? ' ' : ''));\n  tracker.shift(4);\n  value += tracker.move(indentLines(containerFlow(node, context, tracker.current()), map));\n  exit();\n  return value;\n}\n/** @type {Map} */\n\n\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line;\n  }\n\n  return (blank ? '' : '    ') + line;\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/mdast-util-gfm-footnote/lib/index.js"],"names":["normalizeIdentifier","association","containerFlow","indentLines","safe","track","footnoteReference","peek","footnoteReferencePeek","gfmFootnoteFromMarkdown","enter","gfmFootnoteDefinition","enterFootnoteDefinition","gfmFootnoteDefinitionLabelString","enterFootnoteDefinitionLabelString","gfmFootnoteCall","enterFootnoteCall","gfmFootnoteCallString","enterFootnoteCallString","exit","exitFootnoteDefinition","exitFootnoteDefinitionLabelString","exitFootnoteCall","exitFootnoteCallString","gfmFootnoteToMarkdown","unsafe","character","inConstruct","handlers","footnoteDefinition","token","type","identifier","label","children","buffer","resume","node","stack","length","sliceSerialize","toLowerCase","_","context","safeOptions","tracker","value","move","subexit","current","before","after","shift","map","line","index","blank"],"mappings":"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","sourcesContent":["/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n"]},"metadata":{},"sourceType":"module"}