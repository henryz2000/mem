{"ast":null,"code":"// @ts-nocheck\narturo.displayName = 'arturo';\narturo.aliases = ['art'];\n/** @type {import('../core.js').Syntax} */\n\nexport default function arturo(Prism) {\n  ;\n\n  (function (Prism) {\n    /**\n     * @param {string} lang\n     * @param {string} pattern\n     */\n    var createLanguageString = function createLanguageString(lang, pattern) {\n      return {\n        pattern: RegExp(/\\{!/.source + '(?:' + (pattern || lang) + ')' + /$[\\s\\S]*\\}/.source, 'm'),\n        greedy: true,\n        inside: {\n          embedded: {\n            pattern: /(^\\{!\\w+\\b)[\\s\\S]+(?=\\}$)/,\n            lookbehind: true,\n            alias: 'language-' + lang,\n            inside: Prism.languages[lang]\n          },\n          string: /[\\s\\S]+/\n        }\n      };\n    };\n\n    Prism.languages.arturo = {\n      comment: {\n        pattern: /;.*/,\n        greedy: true\n      },\n      character: {\n        pattern: /`.`/,\n        alias: 'char',\n        greedy: true\n      },\n      number: {\n        pattern: /\\b\\d+(?:\\.\\d+(?:\\.\\d+(?:-[\\w+-]+)?)?)?\\b/\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n        greedy: true\n      },\n      regex: {\n        pattern: /\\{\\/.*?\\/\\}/,\n        greedy: true\n      },\n      'html-string': createLanguageString('html'),\n      'css-string': createLanguageString('css'),\n      'js-string': createLanguageString('js'),\n      'md-string': createLanguageString('md'),\n      'sql-string': createLanguageString('sql'),\n      'sh-string': createLanguageString('shell', 'sh'),\n      multistring: {\n        pattern: /».*|\\{:[\\s\\S]*?:\\}|\\{[\\s\\S]*?\\}|^-{6}$[\\s\\S]*/m,\n        alias: 'string',\n        greedy: true\n      },\n      label: {\n        pattern: /\\w+\\b\\??:/,\n        alias: 'property'\n      },\n      literal: {\n        pattern: /'(?:\\w+\\b\\??:?)/,\n        alias: 'constant'\n      },\n      type: {\n        pattern: /:(?:\\w+\\b\\??:?)/,\n        alias: 'class-name'\n      },\n      color: /#\\w+/,\n      predicate: {\n        pattern: /\\b(?:all|and|any|ascii|attr|attribute|attributeLabel|binary|block|char|contains|database|date|dictionary|empty|equal|even|every|exists|false|floating|function|greater|greaterOrEqual|if|in|inline|integer|is|key|label|leap|less|lessOrEqual|literal|logical|lower|nand|negative|nor|not|notEqual|null|numeric|odd|or|path|pathLabel|positive|prefix|prime|regex|same|set|some|sorted|standalone|string|subset|suffix|superset|symbol|symbolLiteral|true|try|type|unless|upper|when|whitespace|word|xnor|xor|zero)\\?/,\n        alias: 'keyword'\n      },\n      'builtin-function': {\n        pattern: /\\b(?:abs|acos|acosh|acsec|acsech|actan|actanh|add|after|alert|alias|and|angle|append|arg|args|arity|array|as|asec|asech|asin|asinh|atan|atan2|atanh|attr|attrs|average|before|benchmark|blend|break|call|capitalize|case|ceil|chop|clear|clip|close|color|combine|conj|continue|copy|cos|cosh|crc|csec|csech|ctan|ctanh|cursor|darken|dec|decode|define|delete|desaturate|deviation|dialog|dictionary|difference|digest|digits|div|do|download|drop|dup|e|else|empty|encode|ensure|env|escape|execute|exit|exp|extend|extract|factors|fdiv|filter|first|flatten|floor|fold|from|function|gamma|gcd|get|goto|hash|hypot|if|inc|indent|index|infinity|info|input|insert|inspect|intersection|invert|jaro|join|keys|kurtosis|last|let|levenshtein|lighten|list|ln|log|loop|lower|mail|map|match|max|median|min|mod|module|mul|nand|neg|new|nor|normalize|not|now|null|open|or|outdent|pad|palette|panic|path|pause|permissions|permutate|pi|pop|popup|pow|powerset|powmod|prefix|print|prints|process|product|query|random|range|read|relative|remove|rename|render|repeat|replace|request|return|reverse|round|sample|saturate|script|sec|sech|select|serve|set|shl|shr|shuffle|sin|sinh|size|skewness|slice|sort|spin|split|sqrt|squeeze|stack|strip|sub|suffix|sum|switch|symbols|symlink|sys|take|tan|tanh|terminal|terminate|to|truncate|try|type|unclip|union|unique|unless|until|unzip|upper|values|var|variance|volume|webview|while|with|wordwrap|write|xnor|xor|zip)\\b/,\n        alias: 'keyword'\n      },\n      sugar: {\n        pattern: /->|=>|\\||::/,\n        alias: 'operator'\n      },\n      punctuation: /[()[\\],]/,\n      symbol: {\n        pattern: /<:|-:|ø|@|#|\\+|\\||\\*|\\$|---|-|%|\\/|\\.\\.|\\^|~|=|<|>|\\\\/\n      },\n      boolean: {\n        pattern: /\\b(?:false|maybe|true)\\b/\n      }\n    };\n    Prism.languages.art = Prism.languages['arturo'];\n  })(Prism);\n}","map":{"version":3,"sources":["/Users/henryz2000/Downloads/chrome-react-seo-extension/node_modules/refractor/lang/arturo.js"],"names":["arturo","displayName","aliases","Prism","createLanguageString","lang","pattern","RegExp","source","greedy","inside","embedded","lookbehind","alias","languages","string","comment","character","number","regex","multistring","label","literal","type","color","predicate","sugar","punctuation","symbol","boolean","art"],"mappings":"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","sourcesContent":["// @ts-nocheck\narturo.displayName = 'arturo'\narturo.aliases = ['art']\n\n/** @type {import('../core.js').Syntax} */\nexport default function arturo(Prism) {\n  ;(function (Prism) {\n    /**\n     * @param {string} lang\n     * @param {string} pattern\n     */\n    var createLanguageString = function (lang, pattern) {\n      return {\n        pattern: RegExp(\n          /\\{!/.source + '(?:' + (pattern || lang) + ')' + /$[\\s\\S]*\\}/.source,\n          'm'\n        ),\n        greedy: true,\n        inside: {\n          embedded: {\n            pattern: /(^\\{!\\w+\\b)[\\s\\S]+(?=\\}$)/,\n            lookbehind: true,\n            alias: 'language-' + lang,\n            inside: Prism.languages[lang]\n          },\n          string: /[\\s\\S]+/\n        }\n      }\n    }\n    Prism.languages.arturo = {\n      comment: {\n        pattern: /;.*/,\n        greedy: true\n      },\n      character: {\n        pattern: /`.`/,\n        alias: 'char',\n        greedy: true\n      },\n      number: {\n        pattern: /\\b\\d+(?:\\.\\d+(?:\\.\\d+(?:-[\\w+-]+)?)?)?\\b/\n      },\n      string: {\n        pattern: /\"(?:[^\"\\\\\\r\\n]|\\\\.)*\"/,\n        greedy: true\n      },\n      regex: {\n        pattern: /\\{\\/.*?\\/\\}/,\n        greedy: true\n      },\n      'html-string': createLanguageString('html'),\n      'css-string': createLanguageString('css'),\n      'js-string': createLanguageString('js'),\n      'md-string': createLanguageString('md'),\n      'sql-string': createLanguageString('sql'),\n      'sh-string': createLanguageString('shell', 'sh'),\n      multistring: {\n        pattern: /».*|\\{:[\\s\\S]*?:\\}|\\{[\\s\\S]*?\\}|^-{6}$[\\s\\S]*/m,\n        alias: 'string',\n        greedy: true\n      },\n      label: {\n        pattern: /\\w+\\b\\??:/,\n        alias: 'property'\n      },\n      literal: {\n        pattern: /'(?:\\w+\\b\\??:?)/,\n        alias: 'constant'\n      },\n      type: {\n        pattern: /:(?:\\w+\\b\\??:?)/,\n        alias: 'class-name'\n      },\n      color: /#\\w+/,\n      predicate: {\n        pattern:\n          /\\b(?:all|and|any|ascii|attr|attribute|attributeLabel|binary|block|char|contains|database|date|dictionary|empty|equal|even|every|exists|false|floating|function|greater|greaterOrEqual|if|in|inline|integer|is|key|label|leap|less|lessOrEqual|literal|logical|lower|nand|negative|nor|not|notEqual|null|numeric|odd|or|path|pathLabel|positive|prefix|prime|regex|same|set|some|sorted|standalone|string|subset|suffix|superset|symbol|symbolLiteral|true|try|type|unless|upper|when|whitespace|word|xnor|xor|zero)\\?/,\n        alias: 'keyword'\n      },\n      'builtin-function': {\n        pattern:\n          /\\b(?:abs|acos|acosh|acsec|acsech|actan|actanh|add|after|alert|alias|and|angle|append|arg|args|arity|array|as|asec|asech|asin|asinh|atan|atan2|atanh|attr|attrs|average|before|benchmark|blend|break|call|capitalize|case|ceil|chop|clear|clip|close|color|combine|conj|continue|copy|cos|cosh|crc|csec|csech|ctan|ctanh|cursor|darken|dec|decode|define|delete|desaturate|deviation|dialog|dictionary|difference|digest|digits|div|do|download|drop|dup|e|else|empty|encode|ensure|env|escape|execute|exit|exp|extend|extract|factors|fdiv|filter|first|flatten|floor|fold|from|function|gamma|gcd|get|goto|hash|hypot|if|inc|indent|index|infinity|info|input|insert|inspect|intersection|invert|jaro|join|keys|kurtosis|last|let|levenshtein|lighten|list|ln|log|loop|lower|mail|map|match|max|median|min|mod|module|mul|nand|neg|new|nor|normalize|not|now|null|open|or|outdent|pad|palette|panic|path|pause|permissions|permutate|pi|pop|popup|pow|powerset|powmod|prefix|print|prints|process|product|query|random|range|read|relative|remove|rename|render|repeat|replace|request|return|reverse|round|sample|saturate|script|sec|sech|select|serve|set|shl|shr|shuffle|sin|sinh|size|skewness|slice|sort|spin|split|sqrt|squeeze|stack|strip|sub|suffix|sum|switch|symbols|symlink|sys|take|tan|tanh|terminal|terminate|to|truncate|try|type|unclip|union|unique|unless|until|unzip|upper|values|var|variance|volume|webview|while|with|wordwrap|write|xnor|xor|zip)\\b/,\n        alias: 'keyword'\n      },\n      sugar: {\n        pattern: /->|=>|\\||::/,\n        alias: 'operator'\n      },\n      punctuation: /[()[\\],]/,\n      symbol: {\n        pattern: /<:|-:|ø|@|#|\\+|\\||\\*|\\$|---|-|%|\\/|\\.\\.|\\^|~|=|<|>|\\\\/\n      },\n      boolean: {\n        pattern: /\\b(?:false|maybe|true)\\b/\n      }\n    }\n    Prism.languages.art = Prism.languages['arturo']\n  })(Prism)\n}\n"]},"metadata":{},"sourceType":"module"}