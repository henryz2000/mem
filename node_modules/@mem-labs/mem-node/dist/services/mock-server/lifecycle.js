"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._mockServerClose = exports._mockServerResetHandlers = exports._mockServerListen = exports._mockServerInstance = exports._initializeMockServer = void 0;
console.log("yahoo");
const node_1 = require("msw/node");
const runtime_1 = require("../../utils/errors/runtime");
const constants_1 = require("./constants");
/**
 * Initialize the mock server.
 * We can configure any default endpoints here.
 */
const _initializeMockServer = () => __awaiter(void 0, void 0, void 0, function* () {
    constants_1.GLOBAL_MOCK_SERVER_CONFIG.instance = node_1.setupServer();
});
exports._initializeMockServer = _initializeMockServer;
const _mockServerInstance = () => {
    const { instance } = constants_1.GLOBAL_MOCK_SERVER_CONFIG;
    if (!instance) {
        throw new runtime_1.RuntimeError({
            message: `
        The globally shared mock server instance has not yet been initialized.\
        You can do so using => mockServerService.initialize()
      `,
        });
    }
    return instance;
};
exports._mockServerInstance = _mockServerInstance;
const _mockServerListen = () => exports._mockServerInstance().listen();
exports._mockServerListen = _mockServerListen;
const _mockServerResetHandlers = () => exports._mockServerInstance().resetHandlers();
exports._mockServerResetHandlers = _mockServerResetHandlers;
const _mockServerClose = () => exports._mockServerInstance().close();
exports._mockServerClose = _mockServerClose;
//# sourceMappingURL=lifecycle.js.map