import { TypedDocumentNode } from "@graphql-typed-document-node/core";
import { JsonObject } from "type-fest";
import { MemClientConfig } from "./types";
export declare class MemClient {
    private apiClient;
    private logger;
    constructor({ apiEndpoint, apiAccessToken, logLevel }: MemClientConfig);
    graphqlRequest<TVariables extends JsonObject, TResult>(document: TypedDocumentNode<TResult, TVariables>, variables?: TVariables): Promise<TResult>;
    healthCheck: () => Promise<boolean>;
    createMem: ({ memId, content, isRead, isArchived, scheduledFor, createdAt, }: import("./methods/createMem").MemClientCreateMemArgs) => Promise<{
        __typename?: "Mem" | undefined;
    } & Pick<import("../api/__codegen__/types").GqMem, "id">>;
    batchCreateMems: (batchArgs: import("./methods/batchCreateMems").MemClientBatchCreateMemsArgs) => Promise<({
        __typename?: "Mem" | undefined;
    } & Pick<import("../api/__codegen__/types").GqMem, "id">)[]>;
}
//# sourceMappingURL=MemClient.d.ts.map