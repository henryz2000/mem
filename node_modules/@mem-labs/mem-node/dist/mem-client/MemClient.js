"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemClient = void 0;
const graphql_request_1 = require("graphql-request");
const graphql_1 = require("../services/mock-server/graphql");
const base_1 = require("../utils/errors/base");
const runtime_1 = require("../utils/errors/runtime");
const logger_1 = require("../utils/logger");
const constants_1 = require("./constants");
const batchCreateMems_1 = require("./methods/batchCreateMems");
const createMem_1 = require("./methods/createMem");
const healthCheck_1 = require("./methods/healthCheck");
class MemClient {
    constructor({ apiEndpoint = constants_1.defaultMemApiEndpoint, apiAccessToken, logLevel }) {
        this.healthCheck = healthCheck_1.memClientHealthCheck({ memClient: this });
        this.createMem = createMem_1.memClientCreateMem({ memClient: this });
        this.batchCreateMems = batchCreateMems_1.memClientBatchCreateMems({ memClient: this });
        this.logger = new logger_1.Logger({
            level: logLevel,
        });
        if (!apiAccessToken) {
            throw new base_1.ClientInitializationError({
                message: "An `apiAccessToken` must be provided when initializing the MemClient.",
            });
        }
        const defaultHeaders = {
            "Content-Type": "application/json",
            Authorization: `${constants_1.defaultMemAuthorizationScheme} ${apiAccessToken}`,
        };
        this.apiClient = new graphql_request_1.GraphQLClient(apiEndpoint, {
            headers: defaultHeaders,
        });
        this.logger.debug(`[constructor()] MemClient Initialized.`);
    }
    graphqlRequest(document, variables) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logger.debug(`[graphqlRequest()] Started.`, document, variables);
            try {
                const data = yield this.apiClient.request(document, variables);
                this.logger.debug(`[graphqlRequest()] Completed.`);
                return data;
            }
            catch (err) {
                this.logger.debug(`[graphqlRequest()] An error ocurred.`, err);
                graphql_1.graphqlService.handleRequestErrors({
                    err,
                });
            }
            /** This should never be hit - adding it for TS purposes. */
            throw new runtime_1.RuntimeError();
        });
    }
}
exports.MemClient = MemClient;
//# sourceMappingURL=MemClient.js.map