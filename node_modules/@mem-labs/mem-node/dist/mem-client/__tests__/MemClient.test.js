"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../../api/__codegen__/types");
const mock_server_1 = require("../../services/mock-server");
const MemClient_1 = require("../MemClient");
const mockApiKey = "mock-api-key";
const getMockClient = () => {
    const mockClient = new MemClient_1.MemClient({ apiAccessToken: mockApiKey });
    return mockClient;
};
describe("MemClient", () => {
    it("can be instantiated", () => {
        const client = getMockClient();
        expect(client).toBeInstanceOf(MemClient_1.MemClient);
    });
    describe("healthCheck", () => {
        beforeEach(() => {
            mock_server_1.mockServerService.mockQuery({
                document: types_1.HealthCheckDocument,
                data: {
                    healthCheckDetails: { apiStatus: true },
                },
            });
        });
        it("returns true", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield getMockClient().healthCheck();
            expect(result).toBeTrue();
        }));
        describe("when the api status is false", () => {
            beforeEach(() => {
                mock_server_1.mockServerService.mockQuery({
                    document: types_1.HealthCheckDocument,
                    data: {
                        healthCheckDetails: { apiStatus: false },
                    },
                });
            });
            it("return false", () => __awaiter(void 0, void 0, void 0, function* () {
                const result = yield getMockClient().healthCheck();
                expect(result).toBeFalse();
            }));
        });
    });
    describe("createMem", () => {
        beforeEach(() => {
            mock_server_1.mockServerService.mockMutation({
                document: types_1.CreateMemDocument,
                data: {
                    createMem: {
                        success: true,
                        mem: {
                            id: "mock-id",
                        },
                    },
                },
            });
        });
        it("returns the created mem's data", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield getMockClient().createMem({
                content: "abc",
            });
            expect(result).toMatchObject({
                id: "mock-id",
            });
        }));
        it("accepts all of the configuration options", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield getMockClient().createMem({
                content: "abc",
                isRead: false,
                isArchived: true,
                createdAt: new Date("July 1, 1867").toISOString(),
                scheduledFor: new Date("March 7, 2511").toISOString(),
                memId: "10000000-0000-4000-a000-000000000000",
            });
            expect(result).toMatchObject({
                id: "mock-id",
            });
        }));
    });
    describe("batchCreateMems", () => {
        beforeEach(() => {
            mock_server_1.mockServerService.mockMutation({
                document: types_1.BatchCreateMemsDocument,
                data: {
                    batchCreateMems: [
                        {
                            success: true,
                            mem: {
                                id: "mock-id-1",
                            },
                        },
                        {
                            success: true,
                            mem: {
                                id: "mock-id-2",
                            },
                        },
                    ],
                },
            });
        });
        it("returns the created mem's data", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield getMockClient().batchCreateMems([
                {
                    content: "abc",
                },
                {
                    content: "def",
                },
            ]);
            expect(result).toIncludeSameMembers([
                {
                    id: "mock-id-1",
                },
                {
                    id: "mock-id-2",
                },
            ]);
        }));
        it("accepts all of the configuration options", () => __awaiter(void 0, void 0, void 0, function* () {
            const result = yield getMockClient().batchCreateMems([
                {
                    content: "abc",
                    isRead: false,
                    isArchived: true,
                    createdAt: new Date("July 1, 1867").toISOString(),
                    scheduledFor: new Date("March 7, 2511").toISOString(),
                    memId: "10000000-0000-4000-a000-000000000000",
                },
                {
                    content: "def",
                    isRead: true,
                    isArchived: false,
                    createdAt: new Date("July 4, 1776").toISOString(),
                    scheduledFor: new Date("October 27, 2560").toISOString(),
                    memId: "20000000-0000-4000-a000-000000000000",
                },
            ]);
            expect(result).toIncludeSameMembers([
                {
                    id: "mock-id-1",
                },
                {
                    id: "mock-id-2",
                },
            ]);
        }));
    });
});
//# sourceMappingURL=MemClient.test.js.map